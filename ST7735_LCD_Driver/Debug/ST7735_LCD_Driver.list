
ST7735_LCD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048a8  080048a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a8  080048a8  000148a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  080048bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080048bc  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eded  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021aa  00000000  00000000  0002ee29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00030fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00031c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002600d  00000000  00000000  00032810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daf1  00000000  00000000  0005881d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e810f  00000000  00000000  0006630e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e41d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003298  00000000  00000000  0014e470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800464c 	.word	0x0800464c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800464c 	.word	0x0800464c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ST7735_write>:


uint16_t scr_width;
uint16_t scr_height;

 void ST7735_write(uint8_t data) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]


	 HAL_SPI_Transmit( &hspi2, &data, sizeof(data), 100);
 80004ca:	1df9      	adds	r1, r7, #7
 80004cc:	2364      	movs	r3, #100	; 0x64
 80004ce:	2201      	movs	r2, #1
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <ST7735_write+0x20>)
 80004d2:	f002 fdde 	bl	8003092 <HAL_SPI_Transmit>

 }
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	2000002c 	.word	0x2000002c

080004e4 <ST7735_cmd>:

 void ST7735_cmd(uint8_t cmd) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]

	 // bring D/C line low
	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <ST7735_cmd+0x28>)
 80004f6:	f001 f9cb 	bl	8001890 <HAL_GPIO_WritePin>

	 // then send the command
	 ST7735_write(cmd);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ffdf 	bl	80004c0 <ST7735_write>
 }
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	48000400 	.word	0x48000400

08000510 <ST7735_data>:


 void ST7735_data(uint8_t data) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]

	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <ST7735_data+0x28>)
 8000522:	f001 f9b5 	bl	8001890 <HAL_GPIO_WritePin>
	 ST7735_write(data);
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ffc9 	bl	80004c0 <ST7735_write>
 }
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	48000400 	.word	0x48000400

0800053c <ST7735_Init>:


 void ST7735_Init(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0

	 // CS high
	 // reset high
	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000546:	4849      	ldr	r0, [pc, #292]	; (800066c <ST7735_Init+0x130>)
 8000548:	f001 f9a2 	bl	8001890 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	4847      	ldr	r0, [pc, #284]	; (8000670 <ST7735_Init+0x134>)
 8000552:	f001 f99d 	bl	8001890 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fe3e 	bl	80011d8 <HAL_Delay>

	 // reset low
	 HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2140      	movs	r1, #64	; 0x40
 8000560:	4843      	ldr	r0, [pc, #268]	; (8000670 <ST7735_Init+0x134>)
 8000562:	f001 f995 	bl	8001890 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f000 fe36 	bl	80011d8 <HAL_Delay>

	 // Reset high
	 // CS high

	 HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2140      	movs	r1, #64	; 0x40
 8000570:	483f      	ldr	r0, [pc, #252]	; (8000670 <ST7735_Init+0x134>)
 8000572:	f001 f98d 	bl	8001890 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057c:	483b      	ldr	r0, [pc, #236]	; (800066c <ST7735_Init+0x130>)
 800057e:	f001 f987 	bl	8001890 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8000582:	2064      	movs	r0, #100	; 0x64
 8000584:	f000 fe28 	bl	80011d8 <HAL_Delay>

	 //CS low
	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058e:	4837      	ldr	r0, [pc, #220]	; (800066c <ST7735_Init+0x130>)
 8000590:	f001 f97e 	bl	8001890 <HAL_GPIO_WritePin>

	 // sleep out and booster on
	 ST7735_cmd(0x11);
 8000594:	2011      	movs	r0, #17
 8000596:	f7ff ffa5 	bl	80004e4 <ST7735_cmd>
	 HAL_Delay(500);
 800059a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800059e:	f000 fe1b 	bl	80011d8 <HAL_Delay>


	 // put display in normal mode full colors
	 ST7735_cmd(0xb1);
 80005a2:	20b1      	movs	r0, #177	; 0xb1
 80005a4:	f7ff ff9e 	bl	80004e4 <ST7735_cmd>

	 // put D/C high

	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	482f      	ldr	r0, [pc, #188]	; (800066c <ST7735_Init+0x130>)
 80005b0:	f001 f96e 	bl	8001890 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 80005b4:	2005      	movs	r0, #5
 80005b6:	f7ff ff83 	bl	80004c0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 80005ba:	203c      	movs	r0, #60	; 0x3c
 80005bc:	f7ff ff80 	bl	80004c0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 80005c0:	203c      	movs	r0, #60	; 0x3c
 80005c2:	f7ff ff7d 	bl	80004c0 <ST7735_write>

	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 80005c6:	20b2      	movs	r0, #178	; 0xb2
 80005c8:	f7ff ff8c 	bl	80004e4 <ST7735_cmd>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	4826      	ldr	r0, [pc, #152]	; (800066c <ST7735_Init+0x130>)
 80005d4:	f001 f95c 	bl	8001890 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 80005d8:	2005      	movs	r0, #5
 80005da:	f7ff ff71 	bl	80004c0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 80005de:	203c      	movs	r0, #60	; 0x3c
 80005e0:	f7ff ff6e 	bl	80004c0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 80005e4:	203c      	movs	r0, #60	; 0x3c
 80005e6:	f7ff ff6b 	bl	80004c0 <ST7735_write>

	ST7735_cmd(0xb3);   // In partial mode + full colors:
 80005ea:	20b3      	movs	r0, #179	; 0xb3
 80005ec:	f7ff ff7a 	bl	80004e4 <ST7735_cmd>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f6:	481d      	ldr	r0, [pc, #116]	; (800066c <ST7735_Init+0x130>)
 80005f8:	f001 f94a 	bl	8001890 <HAL_GPIO_WritePin>

	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 80005fc:	2005      	movs	r0, #5
 80005fe:	f7ff ff5f 	bl	80004c0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 8000602:	203c      	movs	r0, #60	; 0x3c
 8000604:	f7ff ff5c 	bl	80004c0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 8000608:	203c      	movs	r0, #60	; 0x3c
 800060a:	f7ff ff59 	bl	80004c0 <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 800060e:	2005      	movs	r0, #5
 8000610:	f7ff ff56 	bl	80004c0 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 8000614:	203c      	movs	r0, #60	; 0x3c
 8000616:	f7ff ff53 	bl	80004c0 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 800061a:	203c      	movs	r0, #60	; 0x3c
 800061c:	f7ff ff50 	bl	80004c0 <ST7735_write>

	ST7735_cmd(0xB4);   // Display dot inversion control:
 8000620:	20b4      	movs	r0, #180	; 0xb4
 8000622:	f7ff ff5f 	bl	80004e4 <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 8000626:	2003      	movs	r0, #3
 8000628:	f7ff ff72 	bl	8000510 <ST7735_data>

	ST7735_cmd(0x3a);   // Interface pixel format
 800062c:	203a      	movs	r0, #58	; 0x3a
 800062e:	f7ff ff59 	bl	80004e4 <ST7735_cmd>
	//	ST7735_data(0x03);  // 12-bit/pixel RGB 4-4-4 (4k colors)
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 8000632:	2005      	movs	r0, #5
 8000634:	f7ff ff6c 	bl	8000510 <ST7735_data>
	//	ST7735_data(0x06);  // 18-bit/pixel RGB 6-6-6 (256k colors)

	ST7735_cmd(0x20);   // Display inversion off
 8000638:	2020      	movs	r0, #32
 800063a:	f7ff ff53 	bl	80004e4 <ST7735_cmd>
	//	ST7735_cmd(0x21);   // Display inversion on

	ST7735_cmd(0x13);   // Partial mode off
 800063e:	2013      	movs	r0, #19
 8000640:	f7ff ff50 	bl	80004e4 <ST7735_cmd>

	ST7735_cmd(0x26);   // Gamma curve set:
 8000644:	2026      	movs	r0, #38	; 0x26
 8000646:	f7ff ff4d 	bl	80004e4 <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 800064a:	2001      	movs	r0, #1
 800064c:	f7ff ff60 	bl	8000510 <ST7735_data>
	//	ST7735_data(0x02);  //   Gamma curve 2 (G1.8) or (G2.5)
	//	ST7735_data(0x04);  //   Gamma curve 3 (G2.5) or (G2.2)
	//	ST7735_data(0x08);  //   Gamma curve 4 (G1.0) or (G1.8)

	ST7735_cmd(0x29);   // Display on
 8000650:	2029      	movs	r0, #41	; 0x29
 8000652:	f7ff ff47 	bl	80004e4 <ST7735_cmd>

	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <ST7735_Init+0x130>)
 800065e:	f001 f917 	bl	8001890 <HAL_GPIO_WritePin>
	 ST7735_Orientation(scr_normal);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 f806 	bl	8000674 <ST7735_Orientation>
 }
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	48000400 	.word	0x48000400
 8000670:	48000800 	.word	0x48000800

08000674 <ST7735_Orientation>:

 void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]

	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000684:	4820      	ldr	r0, [pc, #128]	; (8000708 <ST7735_Orientation+0x94>)
 8000686:	f001 f903 	bl	8001890 <HAL_GPIO_WritePin>
 	ST7735_cmd(0x36); // Memory data access control:
 800068a:	2036      	movs	r0, #54	; 0x36
 800068c:	f7ff ff2a 	bl	80004e4 <ST7735_cmd>
 	switch(orientation) {
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d01a      	beq.n	80006cc <ST7735_Orientation+0x58>
 8000696:	2b03      	cmp	r3, #3
 8000698:	dc22      	bgt.n	80006e0 <ST7735_Orientation+0x6c>
 800069a:	2b01      	cmp	r3, #1
 800069c:	d002      	beq.n	80006a4 <ST7735_Orientation+0x30>
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d00a      	beq.n	80006b8 <ST7735_Orientation+0x44>
 80006a2:	e01d      	b.n	80006e0 <ST7735_Orientation+0x6c>
 	case scr_CW:
 		scr_width  = scr_h;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <ST7735_Orientation+0x98>)
 80006a6:	22a0      	movs	r2, #160	; 0xa0
 80006a8:	801a      	strh	r2, [r3, #0]
 		scr_height = scr_w;
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <ST7735_Orientation+0x9c>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	801a      	strh	r2, [r3, #0]
 		ST7735_data(0xA0); // X-Y Exchange,Y-Mirror
 80006b0:	20a0      	movs	r0, #160	; 0xa0
 80006b2:	f7ff ff2d 	bl	8000510 <ST7735_data>
 		break;
 80006b6:	e01d      	b.n	80006f4 <ST7735_Orientation+0x80>
 	case scr_CCW:
 		scr_width  = scr_h;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <ST7735_Orientation+0x98>)
 80006ba:	22a0      	movs	r2, #160	; 0xa0
 80006bc:	801a      	strh	r2, [r3, #0]
 		scr_height = scr_w;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <ST7735_Orientation+0x9c>)
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	801a      	strh	r2, [r3, #0]
 		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 80006c4:	2060      	movs	r0, #96	; 0x60
 80006c6:	f7ff ff23 	bl	8000510 <ST7735_data>
 		break;
 80006ca:	e013      	b.n	80006f4 <ST7735_Orientation+0x80>
 	case scr_180:
 		scr_width  = scr_w;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <ST7735_Orientation+0x98>)
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	801a      	strh	r2, [r3, #0]
 		scr_height = scr_h;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <ST7735_Orientation+0x9c>)
 80006d4:	22a0      	movs	r2, #160	; 0xa0
 80006d6:	801a      	strh	r2, [r3, #0]
 		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 80006d8:	20c0      	movs	r0, #192	; 0xc0
 80006da:	f7ff ff19 	bl	8000510 <ST7735_data>
 		break;
 80006de:	e009      	b.n	80006f4 <ST7735_Orientation+0x80>
 	default:
 		scr_width  = scr_w;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <ST7735_Orientation+0x98>)
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	801a      	strh	r2, [r3, #0]
 		scr_height = scr_h;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <ST7735_Orientation+0x9c>)
 80006e8:	22a0      	movs	r2, #160	; 0xa0
 80006ea:	801a      	strh	r2, [r3, #0]
 		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff ff0f 	bl	8000510 <ST7735_data>
 		break;
 80006f2:	bf00      	nop
 	}
 	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <ST7735_Orientation+0x94>)
 80006fc:	f001 f8c8 	bl	8001890 <HAL_GPIO_WritePin>
 }
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	48000400 	.word	0x48000400
 800070c:	20000028 	.word	0x20000028
 8000710:	2000002a 	.word	0x2000002a

08000714 <ST7735_AddrSet>:




 void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4604      	mov	r4, r0
 800071c:	4608      	mov	r0, r1
 800071e:	4611      	mov	r1, r2
 8000720:	461a      	mov	r2, r3
 8000722:	4623      	mov	r3, r4
 8000724:	80fb      	strh	r3, [r7, #6]
 8000726:	4603      	mov	r3, r0
 8000728:	80bb      	strh	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	807b      	strh	r3, [r7, #2]
 800072e:	4613      	mov	r3, r2
 8000730:	803b      	strh	r3, [r7, #0]
 	ST7735_cmd(0x2a); // Column address set
 8000732:	202a      	movs	r0, #42	; 0x2a
 8000734:	f7ff fed6 	bl	80004e4 <ST7735_cmd>
 	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	4821      	ldr	r0, [pc, #132]	; (80007c4 <ST7735_AddrSet+0xb0>)
 8000740:	f001 f8a6 	bl	8001890 <HAL_GPIO_WritePin>
 	ST7735_write(XS >> 8);
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	b29b      	uxth	r3, r3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff feb7 	bl	80004c0 <ST7735_write>
 	ST7735_write(XS);
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff feb2 	bl	80004c0 <ST7735_write>
 	ST7735_write(XE >> 8);
 800075c:	887b      	ldrh	r3, [r7, #2]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff feab 	bl	80004c0 <ST7735_write>
 	ST7735_write(XE);
 800076a:	887b      	ldrh	r3, [r7, #2]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fea6 	bl	80004c0 <ST7735_write>

 	ST7735_cmd(0x2b); // Row address set
 8000774:	202b      	movs	r0, #43	; 0x2b
 8000776:	f7ff feb5 	bl	80004e4 <ST7735_cmd>
 	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000780:	4810      	ldr	r0, [pc, #64]	; (80007c4 <ST7735_AddrSet+0xb0>)
 8000782:	f001 f885 	bl	8001890 <HAL_GPIO_WritePin>
 	ST7735_write(YS >> 8);
 8000786:	88bb      	ldrh	r3, [r7, #4]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	b29b      	uxth	r3, r3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fe96 	bl	80004c0 <ST7735_write>
 	ST7735_write(YS);
 8000794:	88bb      	ldrh	r3, [r7, #4]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fe91 	bl	80004c0 <ST7735_write>
 	ST7735_write(YE >> 8);
 800079e:	883b      	ldrh	r3, [r7, #0]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe8a 	bl	80004c0 <ST7735_write>
 	ST7735_write(YE);
 80007ac:	883b      	ldrh	r3, [r7, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fe85 	bl	80004c0 <ST7735_write>

 	ST7735_cmd(0x2c); // Memory write
 80007b6:	202c      	movs	r0, #44	; 0x2c
 80007b8:	f7ff fe94 	bl	80004e4 <ST7735_cmd>
 }
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	48000400 	.word	0x48000400

080007c8 <ST7735_Clear>:


 void ST7735_Clear(uint16_t color) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]
 	uint16_t i;
 	uint8_t  CH,CL;

 	CH = color >> 8;
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	737b      	strb	r3, [r7, #13]
 	CL = (uint8_t)color;
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	733b      	strb	r3, [r7, #12]

 	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e4:	481b      	ldr	r0, [pc, #108]	; (8000854 <ST7735_Clear+0x8c>)
 80007e6:	f001 f853 	bl	8001890 <HAL_GPIO_WritePin>
 	ST7735_AddrSet(0,0,scr_width - 1,scr_height - 1);
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <ST7735_Clear+0x90>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <ST7735_Clear+0x94>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff ff89 	bl	8000714 <ST7735_AddrSet>

 	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	4812      	ldr	r0, [pc, #72]	; (8000854 <ST7735_Clear+0x8c>)
 800080a:	f001 f841 	bl	8001890 <HAL_GPIO_WritePin>
 	for (i = 0; i < scr_width * scr_height; i++) {
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]
 8000812:	e00a      	b.n	800082a <ST7735_Clear+0x62>
 		ST7735_write(CH);
 8000814:	7b7b      	ldrb	r3, [r7, #13]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe52 	bl	80004c0 <ST7735_write>
 		ST7735_write(CL);
 800081c:	7b3b      	ldrb	r3, [r7, #12]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fe4e 	bl	80004c0 <ST7735_write>
 	for (i = 0; i < scr_width * scr_height; i++) {
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	3301      	adds	r3, #1
 8000828:	81fb      	strh	r3, [r7, #14]
 800082a:	89fa      	ldrh	r2, [r7, #14]
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <ST7735_Clear+0x90>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <ST7735_Clear+0x94>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	fb03 f301 	mul.w	r3, r3, r1
 800083a:	429a      	cmp	r2, r3
 800083c:	dbea      	blt.n	8000814 <ST7735_Clear+0x4c>
 	}
 	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <ST7735_Clear+0x8c>)
 8000846:	f001 f823 	bl	8001890 <HAL_GPIO_WritePin>
 }
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	48000400 	.word	0x48000400
 8000858:	20000028 	.word	0x20000028
 800085c:	2000002a 	.word	0x2000002a

08000860 <ST7735_PutChar5x7>:
 	}
 	  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 }


 void ST7735_PutChar5x7(uint16_t X, uint16_t Y, uint8_t chr, uint16_t color) {
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b087      	sub	sp, #28
 8000864:	af00      	add	r7, sp, #0
 8000866:	4604      	mov	r4, r0
 8000868:	4608      	mov	r0, r1
 800086a:	4611      	mov	r1, r2
 800086c:	461a      	mov	r2, r3
 800086e:	4623      	mov	r3, r4
 8000870:	80fb      	strh	r3, [r7, #6]
 8000872:	4603      	mov	r3, r0
 8000874:	80bb      	strh	r3, [r7, #4]
 8000876:	460b      	mov	r3, r1
 8000878:	70fb      	strb	r3, [r7, #3]
 800087a:	4613      	mov	r3, r2
 800087c:	803b      	strh	r3, [r7, #0]
 	uint16_t i,j;
 	uint8_t buffer[5];
     uint8_t CH = color >> 8;
 800087e:	883b      	ldrh	r3, [r7, #0]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b29b      	uxth	r3, r3
 8000884:	74fb      	strb	r3, [r7, #19]
     uint8_t CL = (uint8_t)color;
 8000886:	883b      	ldrh	r3, [r7, #0]
 8000888:	74bb      	strb	r3, [r7, #18]

 	memcpy(buffer,&Font5x7[(chr - 32) * 5],5);
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	f1a3 0220 	sub.w	r2, r3, #32
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	4a2b      	ldr	r2, [pc, #172]	; (8000944 <ST7735_PutChar5x7+0xe4>)
 8000898:	441a      	add	r2, r3
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	6810      	ldr	r0, [r2, #0]
 80008a0:	6018      	str	r0, [r3, #0]
 80008a2:	7912      	ldrb	r2, [r2, #4]
 80008a4:	711a      	strb	r2, [r3, #4]

 	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ac:	4826      	ldr	r0, [pc, #152]	; (8000948 <ST7735_PutChar5x7+0xe8>)
 80008ae:	f000 ffef 	bl	8001890 <HAL_GPIO_WritePin>
 	ST7735_AddrSet(X,Y,X + 4,Y + 6);
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	3304      	adds	r3, #4
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	3306      	adds	r3, #6
 80008bc:	b29b      	uxth	r3, r3
 80008be:	88b9      	ldrh	r1, [r7, #4]
 80008c0:	88f8      	ldrh	r0, [r7, #6]
 80008c2:	f7ff ff27 	bl	8000714 <ST7735_AddrSet>
 	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	481e      	ldr	r0, [pc, #120]	; (8000948 <ST7735_PutChar5x7+0xe8>)
 80008ce:	f000 ffdf 	bl	8001890 <HAL_GPIO_WritePin>
 	for (j = 0; j < 7; j++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	82bb      	strh	r3, [r7, #20]
 80008d6:	e028      	b.n	800092a <ST7735_PutChar5x7+0xca>
         for (i = 0; i < 5; i++) {
 80008d8:	2300      	movs	r3, #0
 80008da:	82fb      	strh	r3, [r7, #22]
 80008dc:	e01f      	b.n	800091e <ST7735_PutChar5x7+0xbe>
     		if ((buffer[i] >> j) & 0x01) {
 80008de:	8afb      	ldrh	r3, [r7, #22]
 80008e0:	f107 0218 	add.w	r2, r7, #24
 80008e4:	4413      	add	r3, r2
 80008e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80008ea:	461a      	mov	r2, r3
 80008ec:	8abb      	ldrh	r3, [r7, #20]
 80008ee:	fa42 f303 	asr.w	r3, r2, r3
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d008      	beq.n	800090c <ST7735_PutChar5x7+0xac>
     			ST7735_write(CH);
 80008fa:	7cfb      	ldrb	r3, [r7, #19]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fddf 	bl	80004c0 <ST7735_write>
     			ST7735_write(CL);
 8000902:	7cbb      	ldrb	r3, [r7, #18]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fddb 	bl	80004c0 <ST7735_write>
 800090a:	e005      	b.n	8000918 <ST7735_PutChar5x7+0xb8>
     		} else {
     			ST7735_write(0x00);
 800090c:	2000      	movs	r0, #0
 800090e:	f7ff fdd7 	bl	80004c0 <ST7735_write>
     			ST7735_write(0x00);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff fdd4 	bl	80004c0 <ST7735_write>
         for (i = 0; i < 5; i++) {
 8000918:	8afb      	ldrh	r3, [r7, #22]
 800091a:	3301      	adds	r3, #1
 800091c:	82fb      	strh	r3, [r7, #22]
 800091e:	8afb      	ldrh	r3, [r7, #22]
 8000920:	2b04      	cmp	r3, #4
 8000922:	d9dc      	bls.n	80008de <ST7735_PutChar5x7+0x7e>
 	for (j = 0; j < 7; j++) {
 8000924:	8abb      	ldrh	r3, [r7, #20]
 8000926:	3301      	adds	r3, #1
 8000928:	82bb      	strh	r3, [r7, #20]
 800092a:	8abb      	ldrh	r3, [r7, #20]
 800092c:	2b06      	cmp	r3, #6
 800092e:	d9d3      	bls.n	80008d8 <ST7735_PutChar5x7+0x78>
     		}
     	}
     }
 	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <ST7735_PutChar5x7+0xe8>)
 8000938:	f000 ffaa 	bl	8001890 <HAL_GPIO_WritePin>
 }
 800093c:	bf00      	nop
 800093e:	371c      	adds	r7, #28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	08004678 	.word	0x08004678
 8000948:	48000400 	.word	0x48000400

0800094c <ST7735_PutStr5x7>:

 void ST7735_PutStr5x7(uint8_t X, uint8_t Y, char *str, uint16_t color) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	603a      	str	r2, [r7, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
 800095a:	460b      	mov	r3, r1
 800095c:	71bb      	strb	r3, [r7, #6]
 800095e:	4613      	mov	r3, r2
 8000960:	80bb      	strh	r3, [r7, #4]
     while (*str) {
 8000962:	e024      	b.n	80009ae <ST7735_PutStr5x7+0x62>
         ST7735_PutChar5x7(X,Y,*str++,color);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	b298      	uxth	r0, r3
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	b299      	uxth	r1, r3
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	603a      	str	r2, [r7, #0]
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	88bb      	ldrh	r3, [r7, #4]
 8000976:	f7ff ff73 	bl	8000860 <ST7735_PutChar5x7>
         if (X < scr_width - 6) { X += 6; } else if (Y < scr_height - 8) { X = 0; Y += 8; } else { X = 0; Y = 0; }
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <ST7735_PutStr5x7+0x74>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	3b06      	subs	r3, #6
 8000982:	429a      	cmp	r2, r3
 8000984:	da03      	bge.n	800098e <ST7735_PutStr5x7+0x42>
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3306      	adds	r3, #6
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	e00f      	b.n	80009ae <ST7735_PutStr5x7+0x62>
 800098e:	79ba      	ldrb	r2, [r7, #6]
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <ST7735_PutStr5x7+0x78>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	3b08      	subs	r3, #8
 8000996:	429a      	cmp	r2, r3
 8000998:	da05      	bge.n	80009a6 <ST7735_PutStr5x7+0x5a>
 800099a:	2300      	movs	r3, #0
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	3308      	adds	r3, #8
 80009a2:	71bb      	strb	r3, [r7, #6]
 80009a4:	e003      	b.n	80009ae <ST7735_PutStr5x7+0x62>
 80009a6:	2300      	movs	r3, #0
 80009a8:	71fb      	strb	r3, [r7, #7]
 80009aa:	2300      	movs	r3, #0
 80009ac:	71bb      	strb	r3, [r7, #6]
     while (*str) {
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1d6      	bne.n	8000964 <ST7735_PutStr5x7+0x18>
     };
 }
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000028 	.word	0x20000028
 80009c4:	2000002a 	.word	0x2000002a

080009c8 <RGB565>:

 uint16_t RGB565(uint8_t R,uint8_t G,uint8_t B) {
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
 80009d2:	460b      	mov	r3, r1
 80009d4:	71bb      	strb	r3, [r7, #6]
 80009d6:	4613      	mov	r3, r2
 80009d8:	717b      	strb	r3, [r7, #5]
 	return ((R >> 3) << 11) | ((G >> 2) << 5) | (B >> 3);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	02db      	lsls	r3, r3, #11
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	79bb      	ldrb	r3, [r7, #6]
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	015b      	lsls	r3, r3, #5
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b21a      	sxth	r2, r3
 80009f2:	797b      	ldrb	r3, [r7, #5]
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	b29b      	uxth	r3, r3
 }
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f000 fb66 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f828 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f000 f8f6 	bl	8000c08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a1c:	f000 f8c4 	bl	8000ba8 <MX_USART2_UART_Init>
//  MX_USART3_UART_Init();
  MX_SPI2_Init();
 8000a20:	f000 f884 	bl	8000b2c <MX_SPI2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ST7735_Init();
 8000a24:	f7ff fd8a 	bl	800053c <ST7735_Init>
  	ST7735_AddrSet(0,0,159,127);
 8000a28:	237f      	movs	r3, #127	; 0x7f
 8000a2a:	229f      	movs	r2, #159	; 0x9f
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fe70 	bl	8000714 <ST7735_AddrSet>
  	ST7735_Clear(0x0000);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fec7 	bl	80007c8 <ST7735_Clear>
  	 ST7735_PutStr5x7(0,80,"Time:",RGB565(255,255,255));
 8000a3a:	22ff      	movs	r2, #255	; 0xff
 8000a3c:	21ff      	movs	r1, #255	; 0xff
 8000a3e:	20ff      	movs	r0, #255	; 0xff
 8000a40:	f7ff ffc2 	bl	80009c8 <RGB565>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <main+0x58>)
 8000a48:	2150      	movs	r1, #80	; 0x50
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff ff7e 	bl	800094c <ST7735_PutStr5x7>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_Delay(1000);
 8000a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a54:	f000 fbc0 	bl	80011d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a58:	2120      	movs	r1, #32
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5e:	f000 ff2f 	bl	80018c0 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000a62:	e7f5      	b.n	8000a50 <main+0x44>
 8000a64:	08004670 	.word	0x08004670

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b096      	sub	sp, #88	; 0x58
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2244      	movs	r2, #68	; 0x44
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 fde0 	bl	800463c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a8e:	f000 ff4f 	bl	8001930 <HAL_PWREx_ControlVoltageScaling>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a98:	f000 f94a 	bl	8000d30 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a9c:	f000 ff2a 	bl	80018f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <SystemClock_Config+0xc0>)
 8000aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aa6:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <SystemClock_Config+0xc0>)
 8000aa8:	f023 0318 	bic.w	r3, r3, #24
 8000aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ab0:	2314      	movs	r3, #20
 8000ab2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ac0:	2360      	movs	r3, #96	; 0x60
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ad0:	2328      	movs	r3, #40	; 0x28
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 ff79 	bl	80019dc <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000af0:	f000 f91e 	bl	8000d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	230f      	movs	r3, #15
 8000af6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af8:	2303      	movs	r3, #3
 8000afa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fb4b 	bl	80021a8 <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b18:	f000 f90a 	bl	8000d30 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b1c:	f002 f834 	bl	8002b88 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b20:	bf00      	nop
 8000b22:	3758      	adds	r7, #88	; 0x58
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000

08000b2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <MX_SPI2_Init+0x78>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b44:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b64:	2220      	movs	r2, #32
 8000b66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_SPI2_Init+0x74>)
 8000b8e:	f002 f9dd 	bl	8002f4c <HAL_SPI_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000b98:	f000 f8ca 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000002c 	.word	0x2000002c
 8000ba4:	40003800 	.word	0x40003800

08000ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000bae:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <MX_USART2_UART_Init+0x5c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000bb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_USART2_UART_Init+0x58>)
 8000bec:	f002 fe3a 	bl	8003864 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bf6:	f000 f89b 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000114 	.word	0x20000114
 8000c04:	40004400 	.word	0x40004400

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	4b40      	ldr	r3, [pc, #256]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a3f      	ldr	r2, [pc, #252]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a39      	ldr	r2, [pc, #228]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a2d      	ldr	r2, [pc, #180]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <MX_GPIO_Init+0x118>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2120      	movs	r1, #32
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f000 fe03 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c90:	4824      	ldr	r0, [pc, #144]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c92:	f000 fdfd 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <MX_GPIO_Init+0x120>)
 8000c9e:	f000 fdf7 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_GPIO_Init+0x124>)
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481c      	ldr	r0, [pc, #112]	; (8000d28 <MX_GPIO_Init+0x120>)
 8000cb8:	f000 fc40 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fc31 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000cda:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000cf4:	f000 fc22 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000cf8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_GPIO_Init+0x120>)
 8000d12:	f000 fc13 	bl	800153c <HAL_GPIO_Init>

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48000400 	.word	0x48000400
 8000d28:	48000800 	.word	0x48000800
 8000d2c:	10210000 	.word	0x10210000

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_MspInit+0x44>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_MspInit+0x44>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_MspInit+0x44>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x44>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_MspInit+0x44>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6593      	str	r3, [r2, #88]	; 0x58
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x44>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <HAL_SPI_MspInit+0xc4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d14c      	bne.n	8000e40 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000da6:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6593      	str	r3, [r2, #88]	; 0x58
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dee:	2308      	movs	r3, #8
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4811      	ldr	r0, [pc, #68]	; (8000e50 <HAL_SPI_MspInit+0xcc>)
 8000e0a:	f000 fb97 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e20:	2305      	movs	r3, #5
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480a      	ldr	r0, [pc, #40]	; (8000e54 <HAL_SPI_MspInit+0xd0>)
 8000e2c:	f000 fb86 	bl	800153c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2024      	movs	r0, #36	; 0x24
 8000e36:	f000 facc 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000e3a:	2024      	movs	r0, #36	; 0x24
 8000e3c:	f000 fae5 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40003800 	.word	0x40003800
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48000800 	.word	0x48000800
 8000e54:	48000400 	.word	0x48000400

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0ae      	sub	sp, #184	; 0xb8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	2288      	movs	r2, #136	; 0x88
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 fbdf 	bl	800463c <memset>
  if(huart->Instance==USART2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a46      	ldr	r2, [pc, #280]	; (8000f9c <HAL_UART_MspInit+0x144>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d13c      	bne.n	8000f02 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fb8d 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea0:	f7ff ff46 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea8:	4a3d      	ldr	r2, [pc, #244]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eae:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a37      	ldr	r2, [pc, #220]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eec:	2307      	movs	r3, #7
 8000eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f000 fb1e 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f00:	e047      	b.n	8000f92 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <HAL_UART_MspInit+0x14c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d142      	bne.n	8000f92 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 fb4b 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000f24:	f7ff ff04 	bl	8000d30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f32:	6593      	str	r3, [r2, #88]	; 0x58
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_UART_MspInit+0x148>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f58:	2330      	movs	r3, #48	; 0x30
 8000f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f70:	2307      	movs	r3, #7
 8000f72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <HAL_UART_MspInit+0x150>)
 8000f7e:	f000 fadd 	bl	800153c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2027      	movs	r0, #39	; 0x27
 8000f88:	f000 fa23 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f8c:	2027      	movs	r0, #39	; 0x27
 8000f8e:	f000 fa3c 	bl	800140a <HAL_NVIC_EnableIRQ>
}
 8000f92:	bf00      	nop
 8000f94:	37b8      	adds	r7, #184	; 0xb8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40004800 	.word	0x40004800
 8000fa8:	48000800 	.word	0x48000800

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f8ce 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <SPI2_IRQHandler+0x10>)
 8001006:	f002 f9b1 	bl	800336c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000002c 	.word	0x2000002c

08001014 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <USART3_IRQHandler+0x10>)
 800101a:	f002 fc71 	bl	8003900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000090 	.word	0x20000090

08001028 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <SystemInit+0x5c>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <SystemInit+0x5c>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <SystemInit+0x60>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a11      	ldr	r2, [pc, #68]	; (8001088 <SystemInit+0x60>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <SystemInit+0x60>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <SystemInit+0x60>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <SystemInit+0x60>)
 8001054:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001058:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800105c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <SystemInit+0x60>)
 8001060:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001064:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <SystemInit+0x60>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <SystemInit+0x60>)
 800106c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SystemInit+0x60>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	40021000 	.word	0x40021000

0800108c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001090:	f7ff ffca 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001094:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001096:	e003      	b.n	80010a0 <LoopCopyDataInit>

08001098 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800109a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800109c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800109e:	3104      	adds	r1, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010a8:	d3f6      	bcc.n	8001098 <CopyDataInit>
	ldr	r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010ac:	e002      	b.n	80010b4 <LoopFillZerobss>

080010ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010b0:	f842 3b04 	str.w	r3, [r2], #4

080010b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <LoopForever+0x16>)
	cmp	r2, r3
 80010b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010b8:	d3f9      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f003 fa9b 	bl	80045f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010be:	f7ff fca5 	bl	8000a0c <main>

080010c2 <LoopForever>:

LoopForever:
    b LoopForever
 80010c2:	e7fe      	b.n	80010c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80010c8:	080048b0 	.word	0x080048b0
	ldr	r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010d0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010d4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010d8:	2000019c 	.word	0x2000019c

080010dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_2_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_Init+0x3c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_Init+0x3c>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f6:	2003      	movs	r0, #3
 80010f8:	f000 f960 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 f80f 	bl	8001120 <HAL_InitTick>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	e001      	b.n	8001112 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800110e:	f7ff fe15 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001112:	79fb      	ldrb	r3, [r7, #7]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40022000 	.word	0x40022000

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_InitTick+0x6c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d023      	beq.n	800117c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_InitTick+0x70>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_InitTick+0x6c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f96b 	bl	8001426 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10f      	bne.n	8001176 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d809      	bhi.n	8001170 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f000 f935 	bl	80013d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_InitTick+0x74>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e007      	b.n	8001180 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e004      	b.n	8001180 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e001      	b.n	8001180 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	20000000 	.word	0x20000000
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000198 	.word	0x20000198

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000198 	.word	0x20000198

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b63      	cmp	r3, #99	; 0x63
 80011ee:	d805      	bhi.n	80011fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)uwTickFreq;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_Delay+0x40>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4413      	add	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fc:	bf00      	nop
 80011fe:	f7ff ffdf 	bl	80011c0 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	429a      	cmp	r2, r3
 800120c:	d8f7      	bhi.n	80011fe <HAL_Delay+0x26>
  {
  }
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000008 	.word	0x20000008

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff3e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff31 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800143e:	b480      	push	{r7}
 8001440:	b085      	sub	sp, #20
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d008      	beq.n	8001468 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2204      	movs	r2, #4
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e022      	b.n	80014ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 020e 	bic.w	r2, r2, #14
 8001476:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f003 021c 	and.w	r2, r3, #28
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f202 	lsl.w	r2, r1, r2
 800149a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d005      	beq.n	80014de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2204      	movs	r2, #4
 80014d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e029      	b.n	8001532 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 020e 	bic.w	r2, r2, #14
 80014ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f003 021c 	and.w	r2, r3, #28
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
    }
  }
  return status;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154a:	e17f      	b.n	800184c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	4013      	ands	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8171 	beq.w	8001846 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d00b      	beq.n	8001584 <HAL_GPIO_Init+0x48>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d007      	beq.n	8001584 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001578:	2b11      	cmp	r3, #17
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b12      	cmp	r3, #18
 8001582:	d130      	bne.n	80015e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ba:	2201      	movs	r2, #1
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	f003 0201 	and.w	r2, r3, #1
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d118      	bne.n	8001624 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015f8:	2201      	movs	r2, #1
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	f003 0201 	and.w	r2, r3, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x128>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	6939      	ldr	r1, [r7, #16]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80ac 	beq.w	8001846 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_GPIO_Init+0x330>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	4a5e      	ldr	r2, [pc, #376]	; (800186c <HAL_GPIO_Init+0x330>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6613      	str	r3, [r2, #96]	; 0x60
 80016fa:	4b5c      	ldr	r3, [pc, #368]	; (800186c <HAL_GPIO_Init+0x330>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001706:	4a5a      	ldr	r2, [pc, #360]	; (8001870 <HAL_GPIO_Init+0x334>)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001730:	d025      	beq.n	800177e <HAL_GPIO_Init+0x242>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4f      	ldr	r2, [pc, #316]	; (8001874 <HAL_GPIO_Init+0x338>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01f      	beq.n	800177a <HAL_GPIO_Init+0x23e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4e      	ldr	r2, [pc, #312]	; (8001878 <HAL_GPIO_Init+0x33c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d019      	beq.n	8001776 <HAL_GPIO_Init+0x23a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4d      	ldr	r2, [pc, #308]	; (800187c <HAL_GPIO_Init+0x340>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0x236>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4c      	ldr	r2, [pc, #304]	; (8001880 <HAL_GPIO_Init+0x344>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00d      	beq.n	800176e <HAL_GPIO_Init+0x232>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4b      	ldr	r2, [pc, #300]	; (8001884 <HAL_GPIO_Init+0x348>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x22e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4a      	ldr	r2, [pc, #296]	; (8001888 <HAL_GPIO_Init+0x34c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_GPIO_Init+0x22a>
 8001762:	2306      	movs	r3, #6
 8001764:	e00c      	b.n	8001780 <HAL_GPIO_Init+0x244>
 8001766:	2307      	movs	r3, #7
 8001768:	e00a      	b.n	8001780 <HAL_GPIO_Init+0x244>
 800176a:	2305      	movs	r3, #5
 800176c:	e008      	b.n	8001780 <HAL_GPIO_Init+0x244>
 800176e:	2304      	movs	r3, #4
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x244>
 8001772:	2303      	movs	r3, #3
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x244>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x244>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x244>
 800177e:	2300      	movs	r3, #0
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	f002 0203 	and.w	r2, r2, #3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001790:	4937      	ldr	r1, [pc, #220]	; (8001870 <HAL_GPIO_Init+0x334>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_GPIO_Init+0x350>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017c2:	4a32      	ldr	r2, [pc, #200]	; (800188c <HAL_GPIO_Init+0x350>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_GPIO_Init+0x350>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ec:	4a27      	ldr	r2, [pc, #156]	; (800188c <HAL_GPIO_Init+0x350>)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_GPIO_Init+0x350>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001816:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_GPIO_Init+0x350>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_GPIO_Init+0x350>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <HAL_GPIO_Init+0x350>)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa22 f303 	lsr.w	r3, r2, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	f47f ae78 	bne.w	800154c <HAL_GPIO_Init+0x10>
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000
 8001874:	48000400 	.word	0x48000400
 8001878:	48000800 	.word	0x48000800
 800187c:	48000c00 	.word	0x48000c00
 8001880:	48001000 	.word	0x48001000
 8001884:	48001400 	.word	0x48001400
 8001888:	48001800 	.word	0x48001800
 800188c:	40010400 	.word	0x40010400

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ac:	e002      	b.n	80018b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ae:	887a      	ldrh	r2, [r7, #2]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	041a      	lsls	r2, r3, #16
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43d9      	mvns	r1, r3
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	400b      	ands	r3, r1
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40007000 	.word	0x40007000

08001914 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <HAL_PWREx_GetVoltageRange+0x18>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40007000 	.word	0x40007000

08001930 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800193e:	d130      	bne.n	80019a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800194c:	d038      	beq.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001958:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2232      	movs	r2, #50	; 0x32
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0c9b      	lsrs	r3, r3, #18
 8001970:	3301      	adds	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001974:	e002      	b.n	800197c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3b01      	subs	r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001988:	d102      	bne.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x60>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f2      	bne.n	8001976 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199c:	d110      	bne.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e00f      	b.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ae:	d007      	beq.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b8:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40007000 	.word	0x40007000
 80019d4:	20000000 	.word	0x20000000
 80019d8:	431bde83 	.word	0x431bde83

080019dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e3d4      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ee:	4ba1      	ldr	r3, [pc, #644]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f8:	4b9e      	ldr	r3, [pc, #632]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80e4 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_RCC_OscConfig+0x4a>
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	f040 808b 	bne.w	8001b34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	f040 8087 	bne.w	8001b34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a26:	4b93      	ldr	r3, [pc, #588]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x62>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e3ac      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1a      	ldr	r2, [r3, #32]
 8001a42:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <HAL_RCC_OscConfig+0x7c>
 8001a4e:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a56:	e005      	b.n	8001a64 <HAL_RCC_OscConfig+0x88>
 8001a58:	4b86      	ldr	r3, [pc, #536]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d223      	bcs.n	8001ab0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fd41 	bl	80024f4 <RCC_SetFlashLatencyFromMSIRange>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e38d      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7c:	4b7d      	ldr	r3, [pc, #500]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a7c      	ldr	r2, [pc, #496]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b7a      	ldr	r3, [pc, #488]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4977      	ldr	r1, [pc, #476]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	4972      	ldr	r1, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
 8001aae:	e025      	b.n	8001afc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab0:	4b70      	ldr	r3, [pc, #448]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a6f      	ldr	r2, [pc, #444]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	496a      	ldr	r1, [pc, #424]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ace:	4b69      	ldr	r3, [pc, #420]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	4965      	ldr	r1, [pc, #404]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fd01 	bl	80024f4 <RCC_SetFlashLatencyFromMSIRange>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e34d      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001afc:	f000 fc36 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	495a      	ldr	r1, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x29c>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <HAL_RCC_OscConfig+0x2a0>)
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b1c:	4b58      	ldr	r3, [pc, #352]	; (8001c80 <HAL_RCC_OscConfig+0x2a4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fafd 	bl	8001120 <HAL_InitTick>
 8001b26:	4603      	mov	r3, r0
 8001b28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d052      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	e331      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d032      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a4c      	ldr	r2, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fb3a 	bl	80011c0 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b50:	f7ff fb36 	bl	80011c0 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e31a      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b62:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6e:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a40      	ldr	r2, [pc, #256]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	493b      	ldr	r1, [pc, #236]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b8c:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	4936      	ldr	r1, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
 8001ba0:	e01a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bae:	f7ff fb07 	bl	80011c0 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fb03 	bl	80011c0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e2e7      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x1da>
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d074      	beq.n	8001cce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x21a>
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b0c      	cmp	r3, #12
 8001bee:	d10e      	bne.n	8001c0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d10b      	bne.n	8001c0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d064      	beq.n	8001ccc <HAL_RCC_OscConfig+0x2f0>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d160      	bne.n	8001ccc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e2c4      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c16:	d106      	bne.n	8001c26 <HAL_RCC_OscConfig+0x24a>
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e01d      	b.n	8001c62 <HAL_RCC_OscConfig+0x286>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c2e:	d10c      	bne.n	8001c4a <HAL_RCC_OscConfig+0x26e>
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e00b      	b.n	8001c62 <HAL_RCC_OscConfig+0x286>
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_RCC_OscConfig+0x298>)
 8001c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d01c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff faa9 	bl	80011c0 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c70:	e011      	b.n	8001c96 <HAL_RCC_OscConfig+0x2ba>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08004858 	.word	0x08004858
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fa9c 	bl	80011c0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e280      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c96:	4baf      	ldr	r3, [pc, #700]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x2a8>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fa8c 	bl	80011c0 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fa88 	bl	80011c0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e26c      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cbe:	4ba5      	ldr	r3, [pc, #660]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x2d0>
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d060      	beq.n	8001d9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_OscConfig+0x310>
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	d119      	bne.n	8001d1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d116      	bne.n	8001d1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cec:	4b99      	ldr	r3, [pc, #612]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_OscConfig+0x328>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e249      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b93      	ldr	r3, [pc, #588]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	4990      	ldr	r1, [pc, #576]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d18:	e040      	b.n	8001d9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d023      	beq.n	8001d6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d22:	4b8c      	ldr	r3, [pc, #560]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a8b      	ldr	r2, [pc, #556]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fa47 	bl	80011c0 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d36:	f7ff fa43 	bl	80011c0 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e227      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d48:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	497c      	ldr	r1, [pc, #496]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
 8001d68:	e018      	b.n	8001d9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6a:	4b7a      	ldr	r3, [pc, #488]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a79      	ldr	r2, [pc, #484]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff fa23 	bl	80011c0 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fa1f 	bl	80011c0 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e203      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d90:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d03c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01c      	beq.n	8001dea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db0:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db6:	4a67      	ldr	r2, [pc, #412]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f9fe 	bl	80011c0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f9fa 	bl	80011c0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1de      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dda:	4b5e      	ldr	r3, [pc, #376]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ef      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x3ec>
 8001de8:	e01b      	b.n	8001e22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dea:	4b5a      	ldr	r3, [pc, #360]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f9e1 	bl	80011c0 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff f9dd 	bl	80011c0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1c1      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e14:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ef      	bne.n	8001e02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80a6 	beq.w	8001f7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e34:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10d      	bne.n	8001e5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4c:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5c:	4b3e      	ldr	r3, [pc, #248]	; (8001f58 <HAL_RCC_OscConfig+0x57c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d118      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_RCC_OscConfig+0x57c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3a      	ldr	r2, [pc, #232]	; (8001f58 <HAL_RCC_OscConfig+0x57c>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e74:	f7ff f9a4 	bl	80011c0 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7c:	f7ff f9a0 	bl	80011c0 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e184      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <HAL_RCC_OscConfig+0x57c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x4d8>
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea8:	4a2a      	ldr	r2, [pc, #168]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb2:	e024      	b.n	8001efe <HAL_RCC_OscConfig+0x522>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d110      	bne.n	8001ede <HAL_RCC_OscConfig+0x502>
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	4a24      	ldr	r2, [pc, #144]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001edc:	e00f      	b.n	8001efe <HAL_RCC_OscConfig+0x522>
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001ef6:	f023 0304 	bic.w	r3, r3, #4
 8001efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff f95b 	bl	80011c0 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff f957 	bl	80011c0 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e139      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x578>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ed      	beq.n	8001f0e <HAL_RCC_OscConfig+0x532>
 8001f32:	e01a      	b.n	8001f6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7ff f944 	bl	80011c0 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f3a:	e00f      	b.n	8001f5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7ff f940 	bl	80011c0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d906      	bls.n	8001f5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e122      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f5c:	4b90      	ldr	r3, [pc, #576]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1e8      	bne.n	8001f3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f6a:	7ffb      	ldrb	r3, [r7, #31]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f70:	4b8b      	ldr	r3, [pc, #556]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a8a      	ldr	r2, [pc, #552]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8108 	beq.w	8002196 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	f040 80d0 	bne.w	8002130 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f90:	4b83      	ldr	r3, [pc, #524]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d130      	bne.n	8002006 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d127      	bne.n	8002006 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d11f      	bne.n	8002006 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fd0:	2a07      	cmp	r2, #7
 8001fd2:	bf14      	ite	ne
 8001fd4:	2201      	movne	r2, #1
 8001fd6:	2200      	moveq	r2, #0
 8001fd8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d113      	bne.n	8002006 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	3b01      	subs	r3, #1
 8001fec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	3b01      	subs	r3, #1
 8002000:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d06e      	beq.n	80020e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b0c      	cmp	r3, #12
 800200a:	d069      	beq.n	80020e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800200c:	4b64      	ldr	r3, [pc, #400]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002018:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0b7      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002028:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800202e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002032:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002034:	f7ff f8c4 	bl	80011c0 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff f8c0 	bl	80011c0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0a4      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204e:	4b54      	ldr	r3, [pc, #336]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205a:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_RCC_OscConfig+0x7c8>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800206a:	3a01      	subs	r2, #1
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	4311      	orrs	r1, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002074:	0212      	lsls	r2, r2, #8
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800207c:	0852      	lsrs	r2, r2, #1
 800207e:	3a01      	subs	r2, #1
 8002080:	0552      	lsls	r2, r2, #21
 8002082:	4311      	orrs	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002088:	0852      	lsrs	r2, r2, #1
 800208a:	3a01      	subs	r2, #1
 800208c:	0652      	lsls	r2, r2, #25
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002094:	0912      	lsrs	r2, r2, #4
 8002096:	0452      	lsls	r2, r2, #17
 8002098:	430a      	orrs	r2, r1
 800209a:	4941      	ldr	r1, [pc, #260]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020a0:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a3e      	ldr	r2, [pc, #248]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ac:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a3b      	ldr	r2, [pc, #236]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020b8:	f7ff f882 	bl	80011c0 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff f87e 	bl	80011c0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e062      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020de:	e05a      	b.n	8002196 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e059      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e4:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d152      	bne.n	8002196 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a27      	ldr	r2, [pc, #156]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002106:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002108:	f7ff f85a 	bl	80011c0 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff f856 	bl	80011c0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e03a      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x734>
 800212e:	e032      	b.n	8002196 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d02d      	beq.n	8002192 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800213c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002140:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002154:	f023 0303 	bic.w	r3, r3, #3
 8002158:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002160:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002168:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7ff f829 	bl	80011c0 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002172:	f7ff f825 	bl	80011c0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e009      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_OscConfig+0x7c4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f0      	bne.n	8002172 <HAL_RCC_OscConfig+0x796>
 8002190:	e001      	b.n	8002196 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	f99d808c 	.word	0xf99d808c

080021a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0c8      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021bc:	4b66      	ldr	r3, [pc, #408]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d910      	bls.n	80021ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 0207 	bic.w	r2, r3, #7
 80021d2:	4961      	ldr	r1, [pc, #388]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b5f      	ldr	r3, [pc, #380]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0b0      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d04c      	beq.n	8002292 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002200:	4b56      	ldr	r3, [pc, #344]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d121      	bne.n	8002250 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e09e      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d107      	bne.n	8002228 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d115      	bne.n	8002250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e092      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002230:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e086      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002240:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e07e      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002250:	4b42      	ldr	r3, [pc, #264]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 0203 	bic.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	493f      	ldr	r1, [pc, #252]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002262:	f7fe ffad 	bl	80011c0 <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002268:	e00a      	b.n	8002280 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226a:	f7fe ffa9 	bl	80011c0 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e066      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 020c 	and.w	r2, r3, #12
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	429a      	cmp	r2, r3
 8002290:	d1eb      	bne.n	800226a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229e:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	492c      	ldr	r1, [pc, #176]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d210      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4924      	ldr	r1, [pc, #144]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_RCC_ClockConfig+0x1b0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e036      	b.n	800234e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4918      	ldr	r1, [pc, #96]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4910      	ldr	r1, [pc, #64]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800231e:	f000 f825 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8002322:	4602      	mov	r2, r0
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_RCC_ClockConfig+0x1b4>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	490c      	ldr	r1, [pc, #48]	; (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	5ccb      	ldrb	r3, [r1, r3]
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	fa22 f303 	lsr.w	r3, r2, r3
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe feec 	bl	8001120 <HAL_InitTick>
 8002348:	4603      	mov	r3, r0
 800234a:	72fb      	strb	r3, [r7, #11]

  return status;
 800234c:	7afb      	ldrb	r3, [r7, #11]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40022000 	.word	0x40022000
 800235c:	40021000 	.word	0x40021000
 8002360:	08004858 	.word	0x08004858
 8002364:	20000000 	.word	0x20000000
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237a:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002384:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d121      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d11e      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023c8:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d102      	bne.n	80023ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_RCC_GetSysClockFreq+0x110>)
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	e004      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_RCC_GetSysClockFreq+0x114>)
 80023f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d134      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d003      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0xa6>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d003      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0xac>
 8002410:	e005      	b.n	800241e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_RCC_GetSysClockFreq+0x110>)
 8002414:	617b      	str	r3, [r7, #20]
      break;
 8002416:	e005      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_RCC_GetSysClockFreq+0x114>)
 800241a:	617b      	str	r3, [r7, #20]
      break;
 800241c:	e002      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	617b      	str	r3, [r7, #20]
      break;
 8002422:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	3301      	adds	r3, #1
 8002430:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	fb02 f203 	mul.w	r2, r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	0e5b      	lsrs	r3, r3, #25
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	3301      	adds	r3, #1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002464:	69bb      	ldr	r3, [r7, #24]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	08004870 	.word	0x08004870
 800247c:	00f42400 	.word	0x00f42400
 8002480:	007a1200 	.word	0x007a1200

08002484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_GetHCLKFreq+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000000 	.word	0x20000000

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024a0:	f7ff fff0 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4904      	ldr	r1, [pc, #16]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08004868 	.word	0x08004868

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024cc:	f7ff ffda 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0adb      	lsrs	r3, r3, #11
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	08004868 	.word	0x08004868

080024f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800250c:	f7ff fa02 	bl	8001914 <HAL_PWREx_GetVoltageRange>
 8002510:	6178      	str	r0, [r7, #20]
 8002512:	e014      	b.n	800253e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	4a24      	ldr	r2, [pc, #144]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6593      	str	r3, [r2, #88]	; 0x58
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800252c:	f7ff f9f2 	bl	8001914 <HAL_PWREx_GetVoltageRange>
 8002530:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002544:	d10b      	bne.n	800255e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b80      	cmp	r3, #128	; 0x80
 800254a:	d919      	bls.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2ba0      	cmp	r3, #160	; 0xa0
 8002550:	d902      	bls.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002552:	2302      	movs	r3, #2
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	e013      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002558:	2301      	movs	r3, #1
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e010      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d902      	bls.n	800256a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002564:	2303      	movs	r3, #3
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e00a      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d102      	bne.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002570:	2302      	movs	r3, #2
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e004      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b70      	cmp	r3, #112	; 0x70
 800257a:	d101      	bne.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800257c:	2301      	movs	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 0207 	bic.w	r2, r3, #7
 8002588:	4909      	ldr	r1, [pc, #36]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40022000 	.word	0x40022000

080025b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025bc:	2300      	movs	r3, #0
 80025be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c0:	2300      	movs	r3, #0
 80025c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d041      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025d8:	d02a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025de:	d824      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025e4:	d008      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025ea:	d81e      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f4:	d010      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025f6:	e018      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f8:	4b86      	ldr	r3, [pc, #536]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a85      	ldr	r2, [pc, #532]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002604:	e015      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f000 facb 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002616:	e00c      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3320      	adds	r3, #32
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fbb6 	bl	8002d90 <RCCEx_PLLSAI2_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002628:	e003      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	74fb      	strb	r3, [r7, #19]
      break;
 800262e:	e000      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002638:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002646:	4973      	ldr	r1, [pc, #460]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800264e:	e001      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d041      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002668:	d02a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800266a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800266e:	d824      	bhi.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002674:	d008      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800267a:	d81e      	bhi.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d010      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002686:	e018      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002688:	4b62      	ldr	r3, [pc, #392]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a61      	ldr	r2, [pc, #388]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002692:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002694:	e015      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fa83 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 80026a2:	4603      	mov	r3, r0
 80026a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026a6:	e00c      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3320      	adds	r3, #32
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fb6e 	bl	8002d90 <RCCEx_PLLSAI2_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b8:	e003      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	74fb      	strb	r3, [r7, #19]
      break;
 80026be:	e000      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026c8:	4b52      	ldr	r3, [pc, #328]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d6:	494f      	ldr	r1, [pc, #316]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026de:	e001      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80a0 	beq.w	8002832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002706:	2300      	movs	r3, #0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	4b41      	ldr	r3, [pc, #260]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	4a40      	ldr	r2, [pc, #256]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002716:	6593      	str	r3, [r2, #88]	; 0x58
 8002718:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002724:	2301      	movs	r3, #1
 8002726:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a3a      	ldr	r2, [pc, #232]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002734:	f7fe fd44 	bl	80011c0 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800273a:	e009      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273c:	f7fe fd40 	bl	80011c0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d902      	bls.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	74fb      	strb	r3, [r7, #19]
        break;
 800274e:	e005      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002750:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ef      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d15c      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01f      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d019      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800278a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	4a20      	ldr	r2, [pc, #128]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe fcff 	bl	80011c0 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c4:	e00b      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7fe fcfb 	bl	80011c0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d902      	bls.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	74fb      	strb	r3, [r7, #19]
            break;
 80027dc:	e006      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ec      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002802:	4904      	ldr	r1, [pc, #16]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800280a:	e009      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
 8002810:	e006      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002820:	7c7b      	ldrb	r3, [r7, #17]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002826:	4b9e      	ldr	r3, [pc, #632]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	4a9d      	ldr	r2, [pc, #628]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800283e:	4b98      	ldr	r3, [pc, #608]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f023 0203 	bic.w	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	4994      	ldr	r1, [pc, #592]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002860:	4b8f      	ldr	r3, [pc, #572]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f023 020c 	bic.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	498c      	ldr	r1, [pc, #560]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002882:	4b87      	ldr	r3, [pc, #540]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4983      	ldr	r1, [pc, #524]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028a4:	4b7e      	ldr	r3, [pc, #504]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	497b      	ldr	r1, [pc, #492]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028c6:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d4:	4972      	ldr	r1, [pc, #456]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028e8:	4b6d      	ldr	r3, [pc, #436]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	496a      	ldr	r1, [pc, #424]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	4961      	ldr	r1, [pc, #388]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800292c:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293a:	4959      	ldr	r1, [pc, #356]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294e:	4b54      	ldr	r3, [pc, #336]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295c:	4950      	ldr	r1, [pc, #320]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002970:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	4948      	ldr	r1, [pc, #288]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002992:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	493f      	ldr	r1, [pc, #252]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d028      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c2:	4937      	ldr	r1, [pc, #220]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d2:	d106      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a31      	ldr	r2, [pc, #196]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029de:	60d3      	str	r3, [r2, #12]
 80029e0:	e011      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ea:	d10c      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f8d8 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d028      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	491f      	ldr	r1, [pc, #124]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a30:	d106      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3c:	60d3      	str	r3, [r2, #12]
 8002a3e:	e011      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f8a9 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d02b      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	4908      	ldr	r1, [pc, #32]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8e:	d109      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a02      	ldr	r2, [pc, #8]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9a:	60d3      	str	r3, [r2, #12]
 8002a9c:	e014      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 f877 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02f      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae2:	4928      	ldr	r1, [pc, #160]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	2102      	movs	r1, #2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f854 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d014      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	74bb      	strb	r3, [r7, #18]
 8002b0e:	e011      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3320      	adds	r3, #32
 8002b1e:	2102      	movs	r1, #2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f935 	bl	8002d90 <RCCEx_PLLSAI2_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4e:	490d      	ldr	r1, [pc, #52]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b72:	4904      	ldr	r1, [pc, #16]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000

08002b88 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b92:	f043 0304 	orr.w	r3, r3, #4
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bb6:	4b75      	ldr	r3, [pc, #468]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d018      	beq.n	8002bf4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bc2:	4b72      	ldr	r3, [pc, #456]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0203 	and.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d10d      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bda:	4b6c      	ldr	r3, [pc, #432]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
       ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d047      	beq.n	8002c7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	e044      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d018      	beq.n	8002c2e <RCCEx_PLLSAI1_Config+0x86>
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d825      	bhi.n	8002c4c <RCCEx_PLLSAI1_Config+0xa4>
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d002      	beq.n	8002c0a <RCCEx_PLLSAI1_Config+0x62>
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d009      	beq.n	8002c1c <RCCEx_PLLSAI1_Config+0x74>
 8002c08:	e020      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c0a:	4b60      	ldr	r3, [pc, #384]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11d      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1a:	e01a      	b.n	8002c52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c1c:	4b5b      	ldr	r3, [pc, #364]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2c:	e013      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c2e:	4b57      	ldr	r3, [pc, #348]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c3a:	4b54      	ldr	r3, [pc, #336]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c4a:	e006      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c50:	e004      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c52:	bf00      	nop
 8002c54:	e002      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c62:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	430b      	orrs	r3, r1
 8002c78:	4944      	ldr	r1, [pc, #272]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d17d      	bne.n	8002d80 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c84:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a40      	ldr	r2, [pc, #256]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7fe fa96 	bl	80011c0 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c96:	e009      	b.n	8002cac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c98:	f7fe fa92 	bl	80011c0 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8002caa:	e005      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cac:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ef      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d160      	bne.n	8002d80 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d111      	bne.n	8002ce8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc4:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6892      	ldr	r2, [r2, #8]
 8002cd4:	0211      	lsls	r1, r2, #8
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68d2      	ldr	r2, [r2, #12]
 8002cda:	0912      	lsrs	r2, r2, #4
 8002cdc:	0452      	lsls	r2, r2, #17
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	492a      	ldr	r1, [pc, #168]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	610b      	str	r3, [r1, #16]
 8002ce6:	e027      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d112      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cee:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cf6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6892      	ldr	r2, [r2, #8]
 8002cfe:	0211      	lsls	r1, r2, #8
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6912      	ldr	r2, [r2, #16]
 8002d04:	0852      	lsrs	r2, r2, #1
 8002d06:	3a01      	subs	r2, #1
 8002d08:	0552      	lsls	r2, r2, #21
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	491f      	ldr	r1, [pc, #124]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	610b      	str	r3, [r1, #16]
 8002d12:	e011      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d14:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6892      	ldr	r2, [r2, #8]
 8002d24:	0211      	lsls	r1, r2, #8
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6952      	ldr	r2, [r2, #20]
 8002d2a:	0852      	lsrs	r2, r2, #1
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	0652      	lsls	r2, r2, #25
 8002d30:	430a      	orrs	r2, r1
 8002d32:	4916      	ldr	r1, [pc, #88]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7fe fa3c 	bl	80011c0 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d4a:	e009      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d4c:	f7fe fa38 	bl	80011c0 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d902      	bls.n	8002d60 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d5e:	e005      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ef      	beq.n	8002d4c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	4904      	ldr	r1, [pc, #16]	; (8002d8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000

08002d90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d018      	beq.n	8002ddc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002daa:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0203 	and.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d10d      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dc2:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
       ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d047      	beq.n	8002e66 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
 8002dda:	e044      	b.n	8002e66 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d018      	beq.n	8002e16 <RCCEx_PLLSAI2_Config+0x86>
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d825      	bhi.n	8002e34 <RCCEx_PLLSAI2_Config+0xa4>
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d002      	beq.n	8002df2 <RCCEx_PLLSAI2_Config+0x62>
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d009      	beq.n	8002e04 <RCCEx_PLLSAI2_Config+0x74>
 8002df0:	e020      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002df2:	4b55      	ldr	r3, [pc, #340]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11d      	bne.n	8002e3a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e02:	e01a      	b.n	8002e3a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e04:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d116      	bne.n	8002e3e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e14:	e013      	b.n	8002e3e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e16:	4b4c      	ldr	r3, [pc, #304]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e32:	e006      	b.n	8002e42 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e004      	b.n	8002e44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e3a:	bf00      	nop
 8002e3c:	e002      	b.n	8002e44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e42:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10d      	bne.n	8002e66 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e4a:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	4939      	ldr	r1, [pc, #228]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d167      	bne.n	8002f3c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a35      	ldr	r2, [pc, #212]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e78:	f7fe f9a2 	bl	80011c0 <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e7e:	e009      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e80:	f7fe f99e 	bl	80011c0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d902      	bls.n	8002e94 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	73fb      	strb	r3, [r7, #15]
        break;
 8002e92:	e005      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e94:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ef      	bne.n	8002e80 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d14a      	bne.n	8002f3c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d111      	bne.n	8002ed0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eac:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6892      	ldr	r2, [r2, #8]
 8002ebc:	0211      	lsls	r1, r2, #8
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68d2      	ldr	r2, [r2, #12]
 8002ec2:	0912      	lsrs	r2, r2, #4
 8002ec4:	0452      	lsls	r2, r2, #17
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	491f      	ldr	r1, [pc, #124]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	614b      	str	r3, [r1, #20]
 8002ece:	e011      	b.n	8002ef4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ed8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6892      	ldr	r2, [r2, #8]
 8002ee0:	0211      	lsls	r1, r2, #8
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6912      	ldr	r2, [r2, #16]
 8002ee6:	0852      	lsrs	r2, r2, #1
 8002ee8:	3a01      	subs	r2, #1
 8002eea:	0652      	lsls	r2, r2, #25
 8002eec:	430a      	orrs	r2, r1
 8002eee:	4916      	ldr	r1, [pc, #88]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe f95e 	bl	80011c0 <HAL_GetTick>
 8002f04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f06:	e009      	b.n	8002f1c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f08:	f7fe f95a 	bl	80011c0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d902      	bls.n	8002f1c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	73fb      	strb	r3, [r7, #15]
          break;
 8002f1a:	e005      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4904      	ldr	r1, [pc, #16]	; (8002f48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000

08002f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e095      	b.n	800308a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f6e:	d009      	beq.n	8002f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
 8002f76:	e005      	b.n	8002f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fef0 	bl	8000d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fc4:	d902      	bls.n	8002fcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e002      	b.n	8002fd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fda:	d007      	beq.n	8002fec <HAL_SPI_Init+0xa0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fe4:	d002      	beq.n	8002fec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	ea42 0103 	orr.w	r1, r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	f003 0204 	and.w	r2, r3, #4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003068:	ea42 0103 	orr.w	r1, r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b088      	sub	sp, #32
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_Transmit+0x22>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e156      	b.n	8003362 <HAL_SPI_Transmit+0x2d0>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fe f880 	bl	80011c0 <HAL_GetTick>
 80030c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
 80030d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030d6:	e13b      	b.n	8003350 <HAL_SPI_Transmit+0x2be>
  }

  if ((pData == NULL) || (Size == 0U))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_SPI_Transmit+0x52>
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030e8:	e132      	b.n	8003350 <HAL_SPI_Transmit+0x2be>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2203      	movs	r2, #3
 80030ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	88fa      	ldrh	r2, [r7, #6]
 8003102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003134:	d10f      	bne.n	8003156 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003144:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003154:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d007      	beq.n	8003174 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003172:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800317c:	d94a      	bls.n	8003214 <HAL_SPI_Transmit+0x182>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_SPI_Transmit+0xfa>
 8003186:	8afb      	ldrh	r3, [r7, #22]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d13d      	bne.n	8003208 <HAL_SPI_Transmit+0x176>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031b0:	e02a      	b.n	8003208 <HAL_SPI_Transmit+0x176>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d112      	bne.n	80031e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031e4:	e010      	b.n	8003208 <HAL_SPI_Transmit+0x176>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e6:	f7fd ffeb 	bl	80011c0 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d802      	bhi.n	80031fc <HAL_SPI_Transmit+0x16a>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b64      	cmp	r3, #100	; 0x64
 80031fa:	d102      	bne.n	8003202 <HAL_SPI_Transmit+0x170>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d102      	bne.n	8003208 <HAL_SPI_Transmit+0x176>
        {
          errorcode = HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003206:	e0a3      	b.n	8003350 <HAL_SPI_Transmit+0x2be>
    while (hspi->TxXferCount > 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1cf      	bne.n	80031b2 <HAL_SPI_Transmit+0x120>
 8003212:	e07b      	b.n	800330c <HAL_SPI_Transmit+0x27a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_SPI_Transmit+0x190>
 800321c:	8afb      	ldrh	r3, [r7, #22]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d16f      	bne.n	8003302 <HAL_SPI_Transmit+0x270>
    {
      if (hspi->TxXferCount > 1U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d912      	bls.n	8003252 <HAL_SPI_Transmit+0x1c0>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b02      	subs	r3, #2
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003250:	e057      	b.n	8003302 <HAL_SPI_Transmit+0x270>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	7812      	ldrb	r2, [r2, #0]
 800325e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003278:	e043      	b.n	8003302 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d12b      	bne.n	80032e0 <HAL_SPI_Transmit+0x24e>
      {
        if (hspi->TxXferCount > 1U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d912      	bls.n	80032b8 <HAL_SPI_Transmit+0x226>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	1c9a      	adds	r2, r3, #2
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b02      	subs	r3, #2
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032b6:	e024      	b.n	8003302 <HAL_SPI_Transmit+0x270>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	7812      	ldrb	r2, [r2, #0]
 80032c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032de:	e010      	b.n	8003302 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032e0:	f7fd ff6e 	bl	80011c0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d802      	bhi.n	80032f6 <HAL_SPI_Transmit+0x264>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d102      	bne.n	80032fc <HAL_SPI_Transmit+0x26a>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <HAL_SPI_Transmit+0x270>
        {
          errorcode = HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003300:	e026      	b.n	8003350 <HAL_SPI_Transmit+0x2be>
    while (hspi->TxXferCount > 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1b6      	bne.n	800327a <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	6839      	ldr	r1, [r7, #0]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fa61 	bl	80037d8 <SPI_EndRxTxTransaction>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_SPI_Transmit+0x290>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_SPI_Transmit+0x2ae>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_SPI_Transmit+0x2bc>
  {
    errorcode = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e000      	b.n	8003350 <HAL_SPI_Transmit+0x2be>
  }

error:
 800334e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003360:	7ffb      	ldrb	r3, [r7, #31]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10f      	bne.n	80033b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	099b      	lsrs	r3, r3, #6
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
    return;
 80033ae:	e0d7      	b.n	8003560 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_SPI_IRQHandler+0x66>
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	09db      	lsrs	r3, r3, #7
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
    return;
 80033d0:	e0c6      	b.n	8003560 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_SPI_IRQHandler+0x8c>
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	099b      	lsrs	r3, r3, #6
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80b4 	beq.w	8003560 <HAL_SPI_IRQHandler+0x1f4>
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80ad 	beq.w	8003560 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d023      	beq.n	800345a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b03      	cmp	r3, #3
 800341c:	d011      	beq.n	8003442 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003422:	f043 0204 	orr.w	r2, r3, #4
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	e00b      	b.n	800345a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	693b      	ldr	r3, [r7, #16]
        return;
 8003458:	e082      	b.n	8003560 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d014      	beq.n	8003490 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00c      	beq.n	80034b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a0:	f043 0208 	orr.w	r2, r3, #8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d04f      	beq.n	800355e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_SPI_IRQHandler+0x17e>
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d034      	beq.n	8003554 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0203 	bic.w	r2, r2, #3
 80034f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d011      	beq.n	8003526 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	4a18      	ldr	r2, [pc, #96]	; (8003568 <HAL_SPI_IRQHandler+0x1fc>)
 8003508:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd ffd3 	bl	80014ba <HAL_DMA_Abort_IT>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	4a0d      	ldr	r2, [pc, #52]	; (8003568 <HAL_SPI_IRQHandler+0x1fc>)
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd ffbd 	bl	80014ba <HAL_DMA_Abort_IT>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003552:	e003      	b.n	800355c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f809 	bl	800356c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800355a:	e000      	b.n	800355e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800355c:	bf00      	nop
    return;
 800355e:	bf00      	nop
  }
}
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	08003581 	.word	0x08003581

0800356c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f7ff ffe5 	bl	800356c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035bc:	f7fd fe00 	bl	80011c0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	4413      	add	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035cc:	f7fd fdf8 	bl	80011c0 <HAL_GetTick>
 80035d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035d2:	4b38      	ldr	r3, [pc, #224]	; (80036b4 <SPI_WaitFlagStateUntilTimeout+0x108>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	015b      	lsls	r3, r3, #5
 80035d8:	0d1b      	lsrs	r3, r3, #20
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035e2:	e053      	b.n	800368c <SPI_WaitFlagStateUntilTimeout+0xe0>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d050      	beq.n	800368c <SPI_WaitFlagStateUntilTimeout+0xe0>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035ea:	f7fd fde9 	bl	80011c0 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d902      	bls.n	8003600 <SPI_WaitFlagStateUntilTimeout+0x54>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d13d      	bne.n	800367c <SPI_WaitFlagStateUntilTimeout+0xd0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800360e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003618:	d111      	bne.n	800363e <SPI_WaitFlagStateUntilTimeout+0x92>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003622:	d004      	beq.n	800362e <SPI_WaitFlagStateUntilTimeout+0x82>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362c:	d107      	bne.n	800363e <SPI_WaitFlagStateUntilTimeout+0x92>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003646:	d10f      	bne.n	8003668 <SPI_WaitFlagStateUntilTimeout+0xbc>
        {
          SPI_RESET_CRC(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003666:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e017      	b.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x100>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <SPI_WaitFlagStateUntilTimeout+0xda>
      {
        tmp_timeout = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	3b01      	subs	r3, #1
 800368a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d19c      	bne.n	80035e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000000 	.word	0x20000000

080036b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036c6:	f7fd fd7b 	bl	80011c0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036d6:	f7fd fd73 	bl	80011c0 <HAL_GetTick>
 80036da:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036dc:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <SPI_WaitFifoStateUntilTimeout+0x11c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00da      	lsls	r2, r3, #3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	0d1b      	lsrs	r3, r3, #20
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80036f4:	e061      	b.n	80037ba <SPI_WaitFifoStateUntilTimeout+0x102>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036fc:	d109      	bne.n	8003712 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d106      	bne.n	8003712 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003710:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b64      	cmp	r3, #100	; 0x64
 8003716:	d050      	beq.n	80037ba <SPI_WaitFifoStateUntilTimeout+0x102>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003718:	f7fd fd52 	bl	80011c0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	429a      	cmp	r2, r3
 8003726:	d902      	bls.n	800372e <SPI_WaitFifoStateUntilTimeout+0x76>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d13d      	bne.n	80037aa <SPI_WaitFifoStateUntilTimeout+0xf2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800373c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003746:	d111      	bne.n	800376c <SPI_WaitFifoStateUntilTimeout+0xb4>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003750:	d004      	beq.n	800375c <SPI_WaitFifoStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d107      	bne.n	800376c <SPI_WaitFifoStateUntilTimeout+0xb4>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800376a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003774:	d10f      	bne.n	8003796 <SPI_WaitFifoStateUntilTimeout+0xde>
        {
          SPI_RESET_CRC(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e010      	b.n	80037cc <SPI_WaitFifoStateUntilTimeout+0x114>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
      {
        tmp_timeout = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4013      	ands	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d195      	bne.n	80036f6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000000 	.word	0x20000000

080037d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f7ff ff61 	bl	80036b8 <SPI_WaitFifoStateUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003800:	f043 0220 	orr.w	r2, r3, #32
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e027      	b.n	800385c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff fec8 	bl	80035ac <SPI_WaitFlagStateUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e014      	b.n	800385c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2200      	movs	r2, #0
 800383a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff ff3a 	bl	80036b8 <SPI_WaitFifoStateUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384e:	f043 0220 	orr.w	r2, r3, #32
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e000      	b.n	800385c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e040      	b.n	80038f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fae6 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fa4e 	bl	8003d44 <UART_SetConfig>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e022      	b.n	80038f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fccc 	bl	8004258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fd53 	bl	800439c <UART_CheckIdleState>
 80038f6:	4603      	mov	r3, r0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f640 030f 	movw	r3, #2063	; 0x80f
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d113      	bne.n	8003958 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00e      	beq.n	8003958 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 81ce 	beq.w	8003cea <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
      }
      return;
 8003956:	e1c8      	b.n	8003cea <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80e3 	beq.w	8003b26 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d105      	bne.n	8003976 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4ba6      	ldr	r3, [pc, #664]	; (8003c08 <HAL_UART_IRQHandler+0x308>)
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80d8 	beq.w	8003b26 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d010      	beq.n	80039a2 <HAL_UART_IRQHandler+0xa2>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2201      	movs	r2, #1
 8003990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003998:	f043 0201 	orr.w	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d010      	beq.n	80039ce <HAL_UART_IRQHandler+0xce>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2202      	movs	r2, #2
 80039bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c4:	f043 0204 	orr.w	r2, r3, #4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <HAL_UART_IRQHandler+0xfa>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2204      	movs	r2, #4
 80039e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f0:	f043 0202 	orr.w	r2, r3, #2
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d015      	beq.n	8003a30 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d104      	bne.n	8003a18 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a26:	f043 0208 	orr.w	r2, r3, #8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d011      	beq.n	8003a5e <HAL_UART_IRQHandler+0x15e>
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00c      	beq.n	8003a5e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8142 	beq.w	8003cee <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00c      	beq.n	8003a8e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d004      	beq.n	8003aae <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d031      	beq.n	8003b12 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fd38 	bl	8004524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d123      	bne.n	8003b0a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d013      	beq.n	8003b02 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	4a4b      	ldr	r2, [pc, #300]	; (8003c0c <HAL_UART_IRQHandler+0x30c>)
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fd fce7 	bl	80014ba <HAL_DMA_Abort_IT>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d017      	beq.n	8003b22 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003afc:	4610      	mov	r0, r2
 8003afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	e00f      	b.n	8003b22 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f908 	bl	8003d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	e00b      	b.n	8003b22 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f904 	bl	8003d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b10:	e007      	b.n	8003b22 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f900 	bl	8003d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b20:	e0e5      	b.n	8003cee <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b22:	bf00      	nop
    return;
 8003b24:	e0e3      	b.n	8003cee <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	f040 80a9 	bne.w	8003c82 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80a3 	beq.w	8003c82 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 809d 	beq.w	8003c82 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d158      	bne.n	8003c10 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003b68:	893b      	ldrh	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80c1 	beq.w	8003cf2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b76:	893a      	ldrh	r2, [r7, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	f080 80ba 	bcs.w	8003cf2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	893a      	ldrh	r2, [r7, #8]
 8003b82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d12a      	bne.n	8003bec <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0210 	bic.w	r2, r2, #16
 8003be0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd fc29 	bl	800143e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f893 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c06:	e074      	b.n	8003cf2 <HAL_UART_IRQHandler+0x3f2>
 8003c08:	04000120 	.word	0x04000120
 8003c0c:	08004583 	.word	0x08004583
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d063      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d060      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c42:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0210 	bic.w	r2, r2, #16
 8003c74:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c76:	897b      	ldrh	r3, [r7, #10]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f856 	bl	8003d2c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c80:	e039      	b.n	8003cf6 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x3a8>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fc9d 	bl	80045e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ca6:	e029      	b.n	8003cfc <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01a      	beq.n	8003cfa <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
    }
    return;
 8003ccc:	e015      	b.n	8003cfa <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d011      	beq.n	8003cfc <HAL_UART_IRQHandler+0x3fc>
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fc63 	bl	80045ae <UART_EndTransmit_IT>
    return;
 8003ce8:	e008      	b.n	8003cfc <HAL_UART_IRQHandler+0x3fc>
      return;
 8003cea:	bf00      	nop
 8003cec:	e006      	b.n	8003cfc <HAL_UART_IRQHandler+0x3fc>
    return;
 8003cee:	bf00      	nop
 8003cf0:	e004      	b.n	8003cfc <HAL_UART_IRQHandler+0x3fc>
      return;
 8003cf2:	bf00      	nop
 8003cf4:	e002      	b.n	8003cfc <HAL_UART_IRQHandler+0x3fc>
      return;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <HAL_UART_IRQHandler+0x3fc>
    return;
 8003cfa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop

08003d04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d44:	b5b0      	push	{r4, r5, r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4bad      	ldr	r3, [pc, #692]	; (8004024 <UART_SetConfig+0x2e0>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	69f9      	ldr	r1, [r7, #28]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4aa2      	ldr	r2, [pc, #648]	; (8004028 <UART_SetConfig+0x2e4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a99      	ldr	r2, [pc, #612]	; (800402c <UART_SetConfig+0x2e8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d121      	bne.n	8003e0e <UART_SetConfig+0xca>
 8003dca:	4b99      	ldr	r3, [pc, #612]	; (8004030 <UART_SetConfig+0x2ec>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d817      	bhi.n	8003e08 <UART_SetConfig+0xc4>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0x9c>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003dfd 	.word	0x08003dfd
 8003de8:	08003df7 	.word	0x08003df7
 8003dec:	08003e03 	.word	0x08003e03
 8003df0:	2301      	movs	r3, #1
 8003df2:	76fb      	strb	r3, [r7, #27]
 8003df4:	e0e7      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003df6:	2302      	movs	r3, #2
 8003df8:	76fb      	strb	r3, [r7, #27]
 8003dfa:	e0e4      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	76fb      	strb	r3, [r7, #27]
 8003e00:	e0e1      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003e02:	2308      	movs	r3, #8
 8003e04:	76fb      	strb	r3, [r7, #27]
 8003e06:	e0de      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003e08:	2310      	movs	r3, #16
 8003e0a:	76fb      	strb	r3, [r7, #27]
 8003e0c:	e0db      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a88      	ldr	r2, [pc, #544]	; (8004034 <UART_SetConfig+0x2f0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d132      	bne.n	8003e7e <UART_SetConfig+0x13a>
 8003e18:	4b85      	ldr	r3, [pc, #532]	; (8004030 <UART_SetConfig+0x2ec>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d828      	bhi.n	8003e78 <UART_SetConfig+0x134>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <UART_SetConfig+0xe8>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003e79 	.word	0x08003e79
 8003e34:	08003e79 	.word	0x08003e79
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e6d 	.word	0x08003e6d
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e79 	.word	0x08003e79
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e67 	.word	0x08003e67
 8003e50:	08003e79 	.word	0x08003e79
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e79 	.word	0x08003e79
 8003e5c:	08003e73 	.word	0x08003e73
 8003e60:	2300      	movs	r3, #0
 8003e62:	76fb      	strb	r3, [r7, #27]
 8003e64:	e0af      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003e66:	2302      	movs	r3, #2
 8003e68:	76fb      	strb	r3, [r7, #27]
 8003e6a:	e0ac      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	76fb      	strb	r3, [r7, #27]
 8003e70:	e0a9      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003e72:	2308      	movs	r3, #8
 8003e74:	76fb      	strb	r3, [r7, #27]
 8003e76:	e0a6      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	76fb      	strb	r3, [r7, #27]
 8003e7c:	e0a3      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a6d      	ldr	r2, [pc, #436]	; (8004038 <UART_SetConfig+0x2f4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d120      	bne.n	8003eca <UART_SetConfig+0x186>
 8003e88:	4b69      	ldr	r3, [pc, #420]	; (8004030 <UART_SetConfig+0x2ec>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e92:	2b30      	cmp	r3, #48	; 0x30
 8003e94:	d013      	beq.n	8003ebe <UART_SetConfig+0x17a>
 8003e96:	2b30      	cmp	r3, #48	; 0x30
 8003e98:	d814      	bhi.n	8003ec4 <UART_SetConfig+0x180>
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d009      	beq.n	8003eb2 <UART_SetConfig+0x16e>
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d810      	bhi.n	8003ec4 <UART_SetConfig+0x180>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <UART_SetConfig+0x168>
 8003ea6:	2b10      	cmp	r3, #16
 8003ea8:	d006      	beq.n	8003eb8 <UART_SetConfig+0x174>
 8003eaa:	e00b      	b.n	8003ec4 <UART_SetConfig+0x180>
 8003eac:	2300      	movs	r3, #0
 8003eae:	76fb      	strb	r3, [r7, #27]
 8003eb0:	e089      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	76fb      	strb	r3, [r7, #27]
 8003eb6:	e086      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	76fb      	strb	r3, [r7, #27]
 8003ebc:	e083      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	76fb      	strb	r3, [r7, #27]
 8003ec2:	e080      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	76fb      	strb	r3, [r7, #27]
 8003ec8:	e07d      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a5b      	ldr	r2, [pc, #364]	; (800403c <UART_SetConfig+0x2f8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d120      	bne.n	8003f16 <UART_SetConfig+0x1d2>
 8003ed4:	4b56      	ldr	r3, [pc, #344]	; (8004030 <UART_SetConfig+0x2ec>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ede:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee0:	d013      	beq.n	8003f0a <UART_SetConfig+0x1c6>
 8003ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee4:	d814      	bhi.n	8003f10 <UART_SetConfig+0x1cc>
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d009      	beq.n	8003efe <UART_SetConfig+0x1ba>
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d810      	bhi.n	8003f10 <UART_SetConfig+0x1cc>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <UART_SetConfig+0x1b4>
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d006      	beq.n	8003f04 <UART_SetConfig+0x1c0>
 8003ef6:	e00b      	b.n	8003f10 <UART_SetConfig+0x1cc>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	76fb      	strb	r3, [r7, #27]
 8003efc:	e063      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003efe:	2302      	movs	r3, #2
 8003f00:	76fb      	strb	r3, [r7, #27]
 8003f02:	e060      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003f04:	2304      	movs	r3, #4
 8003f06:	76fb      	strb	r3, [r7, #27]
 8003f08:	e05d      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	76fb      	strb	r3, [r7, #27]
 8003f0e:	e05a      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003f10:	2310      	movs	r3, #16
 8003f12:	76fb      	strb	r3, [r7, #27]
 8003f14:	e057      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a49      	ldr	r2, [pc, #292]	; (8004040 <UART_SetConfig+0x2fc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d125      	bne.n	8003f6c <UART_SetConfig+0x228>
 8003f20:	4b43      	ldr	r3, [pc, #268]	; (8004030 <UART_SetConfig+0x2ec>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2e:	d017      	beq.n	8003f60 <UART_SetConfig+0x21c>
 8003f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f34:	d817      	bhi.n	8003f66 <UART_SetConfig+0x222>
 8003f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3a:	d00b      	beq.n	8003f54 <UART_SetConfig+0x210>
 8003f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f40:	d811      	bhi.n	8003f66 <UART_SetConfig+0x222>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <UART_SetConfig+0x20a>
 8003f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4a:	d006      	beq.n	8003f5a <UART_SetConfig+0x216>
 8003f4c:	e00b      	b.n	8003f66 <UART_SetConfig+0x222>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	76fb      	strb	r3, [r7, #27]
 8003f52:	e038      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003f54:	2302      	movs	r3, #2
 8003f56:	76fb      	strb	r3, [r7, #27]
 8003f58:	e035      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003f5a:	2304      	movs	r3, #4
 8003f5c:	76fb      	strb	r3, [r7, #27]
 8003f5e:	e032      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003f60:	2308      	movs	r3, #8
 8003f62:	76fb      	strb	r3, [r7, #27]
 8003f64:	e02f      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003f66:	2310      	movs	r3, #16
 8003f68:	76fb      	strb	r3, [r7, #27]
 8003f6a:	e02c      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a2d      	ldr	r2, [pc, #180]	; (8004028 <UART_SetConfig+0x2e4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d125      	bne.n	8003fc2 <UART_SetConfig+0x27e>
 8003f76:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <UART_SetConfig+0x2ec>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f84:	d017      	beq.n	8003fb6 <UART_SetConfig+0x272>
 8003f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f8a:	d817      	bhi.n	8003fbc <UART_SetConfig+0x278>
 8003f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f90:	d00b      	beq.n	8003faa <UART_SetConfig+0x266>
 8003f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f96:	d811      	bhi.n	8003fbc <UART_SetConfig+0x278>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <UART_SetConfig+0x260>
 8003f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa0:	d006      	beq.n	8003fb0 <UART_SetConfig+0x26c>
 8003fa2:	e00b      	b.n	8003fbc <UART_SetConfig+0x278>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	76fb      	strb	r3, [r7, #27]
 8003fa8:	e00d      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003faa:	2302      	movs	r3, #2
 8003fac:	76fb      	strb	r3, [r7, #27]
 8003fae:	e00a      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	76fb      	strb	r3, [r7, #27]
 8003fb4:	e007      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	76fb      	strb	r3, [r7, #27]
 8003fba:	e004      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	76fb      	strb	r3, [r7, #27]
 8003fc0:	e001      	b.n	8003fc6 <UART_SetConfig+0x282>
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a17      	ldr	r2, [pc, #92]	; (8004028 <UART_SetConfig+0x2e4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	f040 8087 	bne.w	80040e0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fd2:	7efb      	ldrb	r3, [r7, #27]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d837      	bhi.n	8004048 <UART_SetConfig+0x304>
 8003fd8:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <UART_SetConfig+0x29c>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	08004049 	.word	0x08004049
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	08004049 	.word	0x08004049
 8003ff0:	08004013 	.word	0x08004013
 8003ff4:	08004049 	.word	0x08004049
 8003ff8:	08004049 	.word	0x08004049
 8003ffc:	08004049 	.word	0x08004049
 8004000:	0800401b 	.word	0x0800401b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe fa4a 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8004008:	6178      	str	r0, [r7, #20]
        break;
 800400a:	e022      	b.n	8004052 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800400c:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <UART_SetConfig+0x300>)
 800400e:	617b      	str	r3, [r7, #20]
        break;
 8004010:	e01f      	b.n	8004052 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004012:	f7fe f9ab 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8004016:	6178      	str	r0, [r7, #20]
        break;
 8004018:	e01b      	b.n	8004052 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401e:	617b      	str	r3, [r7, #20]
        break;
 8004020:	e017      	b.n	8004052 <UART_SetConfig+0x30e>
 8004022:	bf00      	nop
 8004024:	efff69f3 	.word	0xefff69f3
 8004028:	40008000 	.word	0x40008000
 800402c:	40013800 	.word	0x40013800
 8004030:	40021000 	.word	0x40021000
 8004034:	40004400 	.word	0x40004400
 8004038:	40004800 	.word	0x40004800
 800403c:	40004c00 	.word	0x40004c00
 8004040:	40005000 	.word	0x40005000
 8004044:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	76bb      	strb	r3, [r7, #26]
        break;
 8004050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80f1 	beq.w	800423c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	429a      	cmp	r2, r3
 8004068:	d305      	bcc.n	8004076 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	429a      	cmp	r2, r3
 8004074:	d902      	bls.n	800407c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	76bb      	strb	r3, [r7, #26]
 800407a:	e0df      	b.n	800423c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4618      	mov	r0, r3
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	020b      	lsls	r3, r1, #8
 800408e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004092:	0202      	lsls	r2, r0, #8
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	6849      	ldr	r1, [r1, #4]
 8004098:	0849      	lsrs	r1, r1, #1
 800409a:	4608      	mov	r0, r1
 800409c:	f04f 0100 	mov.w	r1, #0
 80040a0:	1814      	adds	r4, r2, r0
 80040a2:	eb43 0501 	adc.w	r5, r3, r1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	461a      	mov	r2, r3
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	4620      	mov	r0, r4
 80040b2:	4629      	mov	r1, r5
 80040b4:	f7fc f888 	bl	80001c8 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4613      	mov	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c6:	d308      	bcc.n	80040da <UART_SetConfig+0x396>
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ce:	d204      	bcs.n	80040da <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	60da      	str	r2, [r3, #12]
 80040d8:	e0b0      	b.n	800423c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	76bb      	strb	r3, [r7, #26]
 80040de:	e0ad      	b.n	800423c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e8:	d15c      	bne.n	80041a4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80040ea:	7efb      	ldrb	r3, [r7, #27]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d828      	bhi.n	8004142 <UART_SetConfig+0x3fe>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <UART_SetConfig+0x3b4>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800412d 	.word	0x0800412d
 8004104:	08004143 	.word	0x08004143
 8004108:	08004133 	.word	0x08004133
 800410c:	08004143 	.word	0x08004143
 8004110:	08004143 	.word	0x08004143
 8004114:	08004143 	.word	0x08004143
 8004118:	0800413b 	.word	0x0800413b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7fe f9be 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8004120:	6178      	str	r0, [r7, #20]
        break;
 8004122:	e013      	b.n	800414c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7fe f9d0 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8004128:	6178      	str	r0, [r7, #20]
        break;
 800412a:	e00f      	b.n	800414c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800412c:	4b49      	ldr	r3, [pc, #292]	; (8004254 <UART_SetConfig+0x510>)
 800412e:	617b      	str	r3, [r7, #20]
        break;
 8004130:	e00c      	b.n	800414c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004132:	f7fe f91b 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8004136:	6178      	str	r0, [r7, #20]
        break;
 8004138:	e008      	b.n	800414c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413e:	617b      	str	r3, [r7, #20]
        break;
 8004140:	e004      	b.n	800414c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	76bb      	strb	r3, [r7, #26]
        break;
 800414a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d074      	beq.n	800423c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	005a      	lsls	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b0f      	cmp	r3, #15
 800416e:	d916      	bls.n	800419e <UART_SetConfig+0x45a>
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004176:	d212      	bcs.n	800419e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f023 030f 	bic.w	r3, r3, #15
 8004180:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	b29b      	uxth	r3, r3
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	b29a      	uxth	r2, r3
 800418e:	89fb      	ldrh	r3, [r7, #14]
 8004190:	4313      	orrs	r3, r2
 8004192:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	89fa      	ldrh	r2, [r7, #14]
 800419a:	60da      	str	r2, [r3, #12]
 800419c:	e04e      	b.n	800423c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	76bb      	strb	r3, [r7, #26]
 80041a2:	e04b      	b.n	800423c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041a4:	7efb      	ldrb	r3, [r7, #27]
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d827      	bhi.n	80041fa <UART_SetConfig+0x4b6>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <UART_SetConfig+0x46c>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041fb 	.word	0x080041fb
 80041c0:	080041eb 	.word	0x080041eb
 80041c4:	080041fb 	.word	0x080041fb
 80041c8:	080041fb 	.word	0x080041fb
 80041cc:	080041fb 	.word	0x080041fb
 80041d0:	080041f3 	.word	0x080041f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d4:	f7fe f962 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 80041d8:	6178      	str	r0, [r7, #20]
        break;
 80041da:	e013      	b.n	8004204 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041dc:	f7fe f974 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 80041e0:	6178      	str	r0, [r7, #20]
        break;
 80041e2:	e00f      	b.n	8004204 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e4:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <UART_SetConfig+0x510>)
 80041e6:	617b      	str	r3, [r7, #20]
        break;
 80041e8:	e00c      	b.n	8004204 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ea:	f7fe f8bf 	bl	800236c <HAL_RCC_GetSysClockFreq>
 80041ee:	6178      	str	r0, [r7, #20]
        break;
 80041f0:	e008      	b.n	8004204 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f6:	617b      	str	r3, [r7, #20]
        break;
 80041f8:	e004      	b.n	8004204 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	76bb      	strb	r3, [r7, #26]
        break;
 8004202:	bf00      	nop
    }

    if (pclk != 0U)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d018      	beq.n	800423c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	085a      	lsrs	r2, r3, #1
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	441a      	add	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	b29b      	uxth	r3, r3
 800421e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	d908      	bls.n	8004238 <UART_SetConfig+0x4f4>
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d204      	bcs.n	8004238 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	e001      	b.n	800423c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004248:	7ebb      	ldrb	r3, [r7, #26]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bdb0      	pop	{r4, r5, r7, pc}
 8004252:	bf00      	nop
 8004254:	00f42400 	.word	0x00f42400

08004258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01a      	beq.n	800436e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004356:	d10a      	bne.n	800436e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]
  }
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043ac:	f7fc ff08 	bl	80011c0 <HAL_GetTick>
 80043b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d10e      	bne.n	80043de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f82d 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e023      	b.n	8004426 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d10e      	bne.n	800440a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f817 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e00d      	b.n	8004426 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443e:	e05d      	b.n	80044fc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d05a      	beq.n	80044fc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004446:	f7fc febb 	bl	80011c0 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <UART_WaitOnFlagUntilTimeout+0x2e>
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d11b      	bne.n	8004494 <UART_WaitOnFlagUntilTimeout+0x66>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800446a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0201 	bic.w	r2, r2, #1
 800447a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e043      	b.n	800451c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d02c      	beq.n	80044fc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b0:	d124      	bne.n	80044fc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ba:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044ca:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0201 	bic.w	r2, r2, #1
 80044da:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e00f      	b.n	800451c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4013      	ands	r3, r2
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	429a      	cmp	r2, r3
 8004518:	d092      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800453a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004550:	2b01      	cmp	r3, #1
 8004552:	d107      	bne.n	8004564 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0210 	bic.w	r2, r2, #16
 8004562:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fbb9 	bl	8003d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fb96 	bl	8003d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045d8:	bf00      	nop
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <__libc_init_array>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4d0d      	ldr	r5, [pc, #52]	; (800462c <__libc_init_array+0x38>)
 80045f8:	4c0d      	ldr	r4, [pc, #52]	; (8004630 <__libc_init_array+0x3c>)
 80045fa:	1b64      	subs	r4, r4, r5
 80045fc:	10a4      	asrs	r4, r4, #2
 80045fe:	2600      	movs	r6, #0
 8004600:	42a6      	cmp	r6, r4
 8004602:	d109      	bne.n	8004618 <__libc_init_array+0x24>
 8004604:	4d0b      	ldr	r5, [pc, #44]	; (8004634 <__libc_init_array+0x40>)
 8004606:	4c0c      	ldr	r4, [pc, #48]	; (8004638 <__libc_init_array+0x44>)
 8004608:	f000 f820 	bl	800464c <_init>
 800460c:	1b64      	subs	r4, r4, r5
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	2600      	movs	r6, #0
 8004612:	42a6      	cmp	r6, r4
 8004614:	d105      	bne.n	8004622 <__libc_init_array+0x2e>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	f855 3b04 	ldr.w	r3, [r5], #4
 800461c:	4798      	blx	r3
 800461e:	3601      	adds	r6, #1
 8004620:	e7ee      	b.n	8004600 <__libc_init_array+0xc>
 8004622:	f855 3b04 	ldr.w	r3, [r5], #4
 8004626:	4798      	blx	r3
 8004628:	3601      	adds	r6, #1
 800462a:	e7f2      	b.n	8004612 <__libc_init_array+0x1e>
 800462c:	080048a8 	.word	0x080048a8
 8004630:	080048a8 	.word	0x080048a8
 8004634:	080048a8 	.word	0x080048a8
 8004638:	080048ac 	.word	0x080048ac

0800463c <memset>:
 800463c:	4402      	add	r2, r0
 800463e:	4603      	mov	r3, r0
 8004640:	4293      	cmp	r3, r2
 8004642:	d100      	bne.n	8004646 <memset+0xa>
 8004644:	4770      	bx	lr
 8004646:	f803 1b01 	strb.w	r1, [r3], #1
 800464a:	e7f9      	b.n	8004640 <memset+0x4>

0800464c <_init>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	bf00      	nop
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr

08004658 <_fini>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr
