#include <ST7735.h>



uint16_t scr_width;
uint16_t scr_height;

 void ST7735_write(uint8_t data) {


	 HAL_SPI_Transmit(SPI_HandleTypeDef &hspi2, uint8_t &data, sizeof(data), 100);

 }

 void ST7735_cmd(uint8_t cmd) {

	 // bring D/C line low
	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);

	 // then send the command
	 ST7735_write(cmd);
 }


 void ST7735_data(uint8_t data) {

	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
	 ST7735_write(data);
 }


 void ST7735_Init(void) {

	 // CS high
	 // reset high
	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
	 HAL_Delay(5);

	 // reset low
	 HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
	 HAL_Delay(5);

	 // Reset high
	 // CS high

	 HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
	 HAL_Delay(5);

	 //CS low
	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);

	 // sleep out and booster on
	 ST7735_cmd(0x11);
	 HAL_Delay(100);


	 // put display in normal mode full colors
	 ST7735_cmd(0xb1);

	 // put D/C high

	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2

	ST7735_cmd(0xb2);   // In idle mode (8-colors):
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2

	ST7735_cmd(0xb3);   // In partial mode + full colors:
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);

	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2

	ST7735_cmd(0xB4);   // Display dot inversion control:
	ST7735_data(0x03);  //   NLB,NLC

	ST7735_cmd(0x3a);   // Interface pixel format
	//	ST7735_data(0x03);  // 12-bit/pixel RGB 4-4-4 (4k colors)
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
	//	ST7735_data(0x06);  // 18-bit/pixel RGB 6-6-6 (256k colors)

	ST7735_cmd(0x20);   // Display inversion off
	//	ST7735_cmd(0x21);   // Display inversion on

	ST7735_cmd(0x13);   // Partial mode off

	ST7735_cmd(0x26);   // Gamma curve set:
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
	//	ST7735_data(0x02);  //   Gamma curve 2 (G1.8) or (G2.5)
	//	ST7735_data(0x04);  //   Gamma curve 3 (G2.5) or (G2.2)
	//	ST7735_data(0x08);  //   Gamma curve 4 (G1.0) or (G1.8)

	ST7735_cmd(0x29);   // Display on

	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
	 ST7735_Orientation(scr_normal);
 }

 void ST7735_Orientation(ScrOrientation_TypeDef orientation) {

	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 	ST7735_cmd(0x36); // Memory data access control:
 	switch(orientation) {
 	case scr_CW:
 		scr_width  = scr_h;
 		scr_height = scr_w;
 		ST7735_data(0xA0); // X-Y Exchange,Y-Mirror
 		break;
 	case scr_CCW:
 		scr_width  = scr_h;
 		scr_height = scr_w;
 		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 		break;
 	case scr_180:
 		scr_width  = scr_w;
 		scr_height = scr_h;
 		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 		break;
 	default:
 		scr_width  = scr_w;
 		scr_height = scr_h;
 		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 		break;
 	}
 	 HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 }




 void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 	ST7735_cmd(0x2a); // Column address set
 	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 	ST7735_write(XS >> 8);
 	ST7735_write(XS);
 	ST7735_write(XE >> 8);
 	ST7735_write(XE);

 	ST7735_cmd(0x2b); // Row address set
 	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 	ST7735_write(YS >> 8);
 	ST7735_write(YS);
 	ST7735_write(YE >> 8);
 	ST7735_write(YE);

 	ST7735_cmd(0x2c); // Memory write
 }


 void ST7735_Clear(uint16_t color) {
 	uint16_t i;
 	uint8_t  CH,CL;

 	CH = color >> 8;
 	CL = (uint8_t)color;

 	 HAL_GPIO_WritePin(CS_PORT, CS_LOW, GPIO_PIN_RESET);
 	ST7735_AddrSet(0,0,scr_width - 1,scr_height - 1);

 	 HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 	for (i = 0; i < scr_width * scr_height; i++) {
 		ST7735_write(CH);
 		ST7735_write(CL);
 	}
 	 HAL_GPIO_WritePin(CS_PORT, CS_LOW, GPIO_PIN_SET);
 }

 void ST7735_HLine(uint16_t X1, uint16_t X2, uint16_t Y, uint16_t color) {
     uint16_t i;
     uint8_t CH = color >> 8;
     uint8_t CL = (uint8_t)color;

     HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
     ST7735_AddrSet(X1,Y,X2,Y);
     HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 	for (i = 0; i <= (X2 - X1); i++) {
 		ST7735_write(CH);
 		ST7735_write(CL);
 	}
 	  HAL_GPIO_WritePin(CS_PORT, CS_LOW, GPIO_PIN_SET);
 }
