
USB_VCP-bareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ef4  08006ef4  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  08006ef4  08006ef4  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ef4  08006ef4  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08006efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b24  20000190  0800708c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20001cb4  0800708c  00021cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016835  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003218  00000000  00000000  000369f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00039c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  0003a990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002850f  00000000  00000000  0003b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c83  00000000  00000000  00063ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7c28  00000000  00000000  0007474a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c372  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003534  00000000  00000000  0015c3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e54 	.word	0x08006e54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	08006e54 	.word	0x08006e54

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f978 	bl	80004c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f805 	bl	80001de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f852 	bl	800027c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f005 ff5e 	bl	8006098 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x14>

080001de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b096      	sub	sp, #88	; 0x58
 80001e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2244      	movs	r2, #68	; 0x44
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f006 fe29 	bl	8006e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	463b      	mov	r3, r7
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000200:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000204:	f001 fd98 	bl	8001d38 <HAL_PWREx_ControlVoltageScaling>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800020e:	f000 f89d 	bl	800034c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000216:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800021a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021c:	2302      	movs	r3, #2
 800021e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000220:	2303      	movs	r3, #3
 8000222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000224:	2301      	movs	r3, #1
 8000226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000228:	2310      	movs	r3, #16
 800022a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800022c:	2307      	movs	r3, #7
 800022e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000230:	2302      	movs	r3, #2
 8000232:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000234:	2302      	movs	r3, #2
 8000236:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4618      	mov	r0, r3
 800023e:	f001 fde1 	bl	8001e04 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000248:	f000 f880 	bl	800034c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2303      	movs	r3, #3
 8000252:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000260:	463b      	mov	r3, r7
 8000262:	2103      	movs	r1, #3
 8000264:	4618      	mov	r0, r3
 8000266:	f002 f9b3 	bl	80025d0 <HAL_RCC_ClockConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000270:	f000 f86c 	bl	800034c <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3758      	adds	r7, #88	; 0x58
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b08a      	sub	sp, #40	; 0x28
 8000280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000292:	4b2b      	ldr	r3, [pc, #172]	; (8000340 <MX_GPIO_Init+0xc4>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	4a2a      	ldr	r2, [pc, #168]	; (8000340 <MX_GPIO_Init+0xc4>)
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029e:	4b28      	ldr	r3, [pc, #160]	; (8000340 <MX_GPIO_Init+0xc4>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	f003 0304 	and.w	r3, r3, #4
 80002a6:	613b      	str	r3, [r7, #16]
 80002a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <MX_GPIO_Init+0xc4>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	4a24      	ldr	r2, [pc, #144]	; (8000340 <MX_GPIO_Init+0xc4>)
 80002b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002b6:	4b22      	ldr	r3, [pc, #136]	; (8000340 <MX_GPIO_Init+0xc4>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b1f      	ldr	r3, [pc, #124]	; (8000340 <MX_GPIO_Init+0xc4>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	4a1e      	ldr	r2, [pc, #120]	; (8000340 <MX_GPIO_Init+0xc4>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ce:	4b1c      	ldr	r3, [pc, #112]	; (8000340 <MX_GPIO_Init+0xc4>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
 80002d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002da:	4b19      	ldr	r3, [pc, #100]	; (8000340 <MX_GPIO_Init+0xc4>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	4a18      	ldr	r2, [pc, #96]	; (8000340 <MX_GPIO_Init+0xc4>)
 80002e0:	f043 0302 	orr.w	r3, r3, #2
 80002e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e6:	4b16      	ldr	r3, [pc, #88]	; (8000340 <MX_GPIO_Init+0xc4>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	f003 0302 	and.w	r3, r3, #2
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2120      	movs	r1, #32
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fa:	f000 fc3d 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_GPIO_Init+0xc8>)
 8000306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	2300      	movs	r3, #0
 800030a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	4619      	mov	r1, r3
 8000312:	480d      	ldr	r0, [pc, #52]	; (8000348 <MX_GPIO_Init+0xcc>)
 8000314:	f000 fa86 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000318:	2320      	movs	r3, #32
 800031a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031c:	2301      	movs	r3, #1
 800031e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000324:	2300      	movs	r3, #0
 8000326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000332:	f000 fa77 	bl	8000824 <HAL_GPIO_Init>

}
 8000336:	bf00      	nop
 8000338:	3728      	adds	r7, #40	; 0x28
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000
 8000344:	10210000 	.word	0x10210000
 8000348:	48000800 	.word	0x48000800

0800034c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000350:	b672      	cpsid	i
}
 8000352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000354:	e7fe      	b.n	8000354 <Error_Handler+0x8>
	...

08000358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <HAL_MspInit+0x44>)
 8000360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000362:	4a0e      	ldr	r2, [pc, #56]	; (800039c <HAL_MspInit+0x44>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6613      	str	r3, [r2, #96]	; 0x60
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <HAL_MspInit+0x44>)
 800036c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <HAL_MspInit+0x44>)
 8000378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800037a:	4a08      	ldr	r2, [pc, #32]	; (800039c <HAL_MspInit+0x44>)
 800037c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000380:	6593      	str	r3, [r2, #88]	; 0x58
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <HAL_MspInit+0x44>)
 8000384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <NMI_Handler+0x4>

080003a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <HardFault_Handler+0x4>

080003ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <MemManage_Handler+0x4>

080003b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <BusFault_Handler+0x4>

080003b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <UsageFault_Handler+0x4>

080003be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ec:	f000 f8c4 	bl	8000578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80003f8:	4802      	ldr	r0, [pc, #8]	; (8000404 <OTG_FS_IRQHandler+0x10>)
 80003fa:	f000 fd42 	bl	8000e82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200018ac 	.word	0x200018ac

08000408 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <SystemInit+0x5c>)
 800040e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000412:	4a14      	ldr	r2, [pc, #80]	; (8000464 <SystemInit+0x5c>)
 8000414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <SystemInit+0x60>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a11      	ldr	r2, [pc, #68]	; (8000468 <SystemInit+0x60>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <SystemInit+0x60>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <SystemInit+0x60>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <SystemInit+0x60>)
 8000434:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000438:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800043c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <SystemInit+0x60>)
 8000440:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000444:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <SystemInit+0x60>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a07      	ldr	r2, [pc, #28]	; (8000468 <SystemInit+0x60>)
 800044c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000450:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <SystemInit+0x60>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00
 8000468:	40021000 	.word	0x40021000

0800046c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800046c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000470:	f7ff ffca 	bl	8000408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000474:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000476:	e003      	b.n	8000480 <LoopCopyDataInit>

08000478 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800047a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800047c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800047e:	3104      	adds	r1, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000480:	480a      	ldr	r0, [pc, #40]	; (80004ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000484:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000486:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000488:	d3f6      	bcc.n	8000478 <CopyDataInit>
	ldr	r2, =_sbss
 800048a:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800048c:	e002      	b.n	8000494 <LoopFillZerobss>

0800048e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800048e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000490:	f842 3b04 	str.w	r3, [r2], #4

08000494 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000496:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000498:	d3f9      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800049a:	f006 fcaf 	bl	8006dfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800049e:	f7ff fe93 	bl	80001c8 <main>

080004a2 <LoopForever>:

LoopForever:
    b LoopForever
 80004a2:	e7fe      	b.n	80004a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80004a8:	08006efc 	.word	0x08006efc
	ldr	r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004b0:	20000190 	.word	0x20000190
	ldr	r2, =_sbss
 80004b4:	20000190 	.word	0x20000190
	ldr	r3, = _ebss
 80004b8:	20001cb4 	.word	0x20001cb4

080004bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC1_2_IRQHandler>
	...

080004c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <HAL_Init+0x3c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <HAL_Init+0x3c>)
 80004d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 f962 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f80f 	bl	8000500 <HAL_InitTick>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e001      	b.n	80004f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ee:	f7ff ff33 	bl	8000358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40022000 	.word	0x40022000

08000500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <HAL_InitTick+0x6c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d023      	beq.n	800055c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <HAL_InitTick+0x70>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <HAL_InitTick+0x6c>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f96d 	bl	800080a <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d10f      	bne.n	8000556 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d809      	bhi.n	8000550 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	f000 f937 	bl	80007b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <HAL_InitTick+0x74>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e007      	b.n	8000560 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e004      	b.n	8000560 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
 800055a:	e001      	b.n	8000560 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000008 	.word	0x20000008
 8000570:	20000000 	.word	0x20000000
 8000574:	20000004 	.word	0x20000004

08000578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x20>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x24>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4413      	add	r3, r2
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_IncTick+0x24>)
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000008 	.word	0x20000008
 800059c:	200003d0 	.word	0x200003d0

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200003d0 	.word	0x200003d0

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c0:	f7ff ffee 	bl	80005a0 <HAL_GetTick>
 80005c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d005      	beq.n	80005de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <HAL_Delay+0x44>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4413      	add	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005de:	bf00      	nop
 80005e0:	f7ff ffde 	bl	80005a0 <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d8f7      	bhi.n	80005e0 <HAL_Delay+0x28>
  {
  }
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000008 	.word	0x20000008

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0b      	blt.n	800068e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <__NVIC_EnableIRQ+0x38>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff8e 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff29 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff3e 	bl	8000648 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff8e 	bl	80006f4 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff31 	bl	8000664 <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000832:	e17f      	b.n	8000b34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	2101      	movs	r1, #1
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	4013      	ands	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	f000 8171 	beq.w	8000b2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d00b      	beq.n	800086c <HAL_GPIO_Init+0x48>
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	2b02      	cmp	r3, #2
 800085a:	d007      	beq.n	800086c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000860:	2b11      	cmp	r3, #17
 8000862:	d003      	beq.n	800086c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b12      	cmp	r3, #18
 800086a:	d130      	bne.n	80008ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2203      	movs	r2, #3
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68da      	ldr	r2, [r3, #12]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4313      	orrs	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008a2:	2201      	movs	r2, #1
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	4013      	ands	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	091b      	lsrs	r3, r3, #4
 80008b8:	f003 0201 	and.w	r2, r3, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d118      	bne.n	800090c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008e0:	2201      	movs	r2, #1
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	f003 0201 	and.w	r2, r3, #1
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4313      	orrs	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b02      	cmp	r3, #2
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0x128>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b12      	cmp	r3, #18
 800094a:	d123      	bne.n	8000994 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	08da      	lsrs	r2, r3, #3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3208      	adds	r2, #8
 8000954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	220f      	movs	r2, #15
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	691a      	ldr	r2, [r3, #16]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	08da      	lsrs	r2, r3, #3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3208      	adds	r2, #8
 800098e:	6939      	ldr	r1, [r7, #16]
 8000990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2203      	movs	r2, #3
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0203 	and.w	r2, r3, #3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f000 80ac 	beq.w	8000b2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b5f      	ldr	r3, [pc, #380]	; (8000b54 <HAL_GPIO_Init+0x330>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	4a5e      	ldr	r2, [pc, #376]	; (8000b54 <HAL_GPIO_Init+0x330>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	; 0x60
 80009e2:	4b5c      	ldr	r3, [pc, #368]	; (8000b54 <HAL_GPIO_Init+0x330>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009ee:	4a5a      	ldr	r2, [pc, #360]	; (8000b58 <HAL_GPIO_Init+0x334>)
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	3302      	adds	r3, #2
 80009f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f003 0303 	and.w	r3, r3, #3
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	220f      	movs	r2, #15
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a18:	d025      	beq.n	8000a66 <HAL_GPIO_Init+0x242>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4f      	ldr	r2, [pc, #316]	; (8000b5c <HAL_GPIO_Init+0x338>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d01f      	beq.n	8000a62 <HAL_GPIO_Init+0x23e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4e      	ldr	r2, [pc, #312]	; (8000b60 <HAL_GPIO_Init+0x33c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d019      	beq.n	8000a5e <HAL_GPIO_Init+0x23a>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4d      	ldr	r2, [pc, #308]	; (8000b64 <HAL_GPIO_Init+0x340>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d013      	beq.n	8000a5a <HAL_GPIO_Init+0x236>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4c      	ldr	r2, [pc, #304]	; (8000b68 <HAL_GPIO_Init+0x344>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d00d      	beq.n	8000a56 <HAL_GPIO_Init+0x232>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a4b      	ldr	r2, [pc, #300]	; (8000b6c <HAL_GPIO_Init+0x348>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d007      	beq.n	8000a52 <HAL_GPIO_Init+0x22e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4a      	ldr	r2, [pc, #296]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_GPIO_Init+0x22a>
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	e00c      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a4e:	2307      	movs	r3, #7
 8000a50:	e00a      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a52:	2305      	movs	r3, #5
 8000a54:	e008      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a56:	2304      	movs	r3, #4
 8000a58:	e006      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	e004      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a5e:	2302      	movs	r3, #2
 8000a60:	e002      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a66:	2300      	movs	r3, #0
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	f002 0203 	and.w	r2, r2, #3
 8000a6e:	0092      	lsls	r2, r2, #2
 8000a70:	4093      	lsls	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a78:	4937      	ldr	r1, [pc, #220]	; (8000b58 <HAL_GPIO_Init+0x334>)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a86:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aaa:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ad4:	4a27      	ldr	r2, [pc, #156]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000afe:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b28:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <HAL_GPIO_Init+0x350>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f47f ae78 	bne.w	8000834 <HAL_GPIO_Init+0x10>
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	371c      	adds	r7, #28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48000800 	.word	0x48000800
 8000b64:	48000c00 	.word	0x48000c00
 8000b68:	48001000 	.word	0x48001000
 8000b6c:	48001400 	.word	0x48001400
 8000b70:	48001800 	.word	0x48001800
 8000b74:	40010400 	.word	0x40010400

08000b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
 8000b84:	4613      	mov	r3, r2
 8000b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b94:	e002      	b.n	8000b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bba:	887a      	ldrh	r2, [r7, #2]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	041a      	lsls	r2, r3, #16
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43d9      	mvns	r1, r3
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	400b      	ands	r3, r1
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	619a      	str	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bde:	b08f      	sub	sp, #60	; 0x3c
 8000be0:	af0a      	add	r7, sp, #40	; 0x28
 8000be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e116      	b.n	8000e1c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d106      	bne.n	8000c0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f005 fcb3 	bl	8006574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2203      	movs	r2, #3
 8000c12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fc3e 	bl	80034ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	687e      	ldr	r6, [r7, #4]
 8000c3a:	466d      	mov	r5, sp
 8000c3c:	f106 0410 	add.w	r4, r6, #16
 8000c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c50:	1d33      	adds	r3, r6, #4
 8000c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c54:	6838      	ldr	r0, [r7, #0]
 8000c56:	f002 fb51 	bl	80032fc <USB_CoreInit>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d005      	beq.n	8000c6c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2202      	movs	r2, #2
 8000c64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e0d7      	b.n	8000e1c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 fc2c 	bl	80034d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
 8000c7c:	e04a      	b.n	8000d14 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	333d      	adds	r3, #61	; 0x3d
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	1a9b      	subs	r3, r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	333c      	adds	r3, #60	; 0x3c
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ca6:	7bfa      	ldrb	r2, [r7, #15]
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	b298      	uxth	r0, r3
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3342      	adds	r3, #66	; 0x42
 8000cba:	4602      	mov	r2, r0
 8000cbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	1a9b      	subs	r3, r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	333f      	adds	r3, #63	; 0x3f
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	440b      	add	r3, r1
 8000ce0:	3344      	adds	r3, #68	; 0x44
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	3348      	adds	r3, #72	; 0x48
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cfa:	7bfa      	ldrb	r2, [r7, #15]
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	440b      	add	r3, r1
 8000d08:	3350      	adds	r3, #80	; 0x50
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	3301      	adds	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	7bfa      	ldrb	r2, [r7, #15]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d3af      	bcc.n	8000c7e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e044      	b.n	8000dae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d24:	7bfa      	ldrb	r2, [r7, #15]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	440b      	add	r3, r1
 8000d32:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d3a:	7bfa      	ldrb	r2, [r7, #15]
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	440b      	add	r3, r1
 8000d48:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000d4c:	7bfa      	ldrb	r2, [r7, #15]
 8000d4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d50:	7bfa      	ldrb	r2, [r7, #15]
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	4613      	mov	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d66:	7bfa      	ldrb	r2, [r7, #15]
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	1a9b      	subs	r3, r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	440b      	add	r3, r1
 8000d74:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	4613      	mov	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	1a9b      	subs	r3, r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	3301      	adds	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d3b5      	bcc.n	8000d24 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	687e      	ldr	r6, [r7, #4]
 8000dc0:	466d      	mov	r5, sp
 8000dc2:	f106 0410 	add.w	r4, r6, #16
 8000dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dd6:	1d33      	adds	r3, r6, #4
 8000dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dda:	6838      	ldr	r0, [r7, #0]
 8000ddc:	f002 fba2 	bl	8003524 <USB_DevInit>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d005      	beq.n	8000df2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2202      	movs	r2, #2
 8000dea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e014      	b.n	8000e1c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d102      	bne.n	8000e10 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 ff62 	bl	8001cd4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fb24 	bl	8004462 <USB_DevDisconnect>

  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d101      	bne.n	8000e40 <HAL_PCD_Start+0x1c>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e01c      	b.n	8000e7a <HAL_PCD_Start+0x56>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d105      	bne.n	8000e5c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fb13 	bl	800348c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fad8 	bl	8004420 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e82:	b590      	push	{r4, r7, lr}
 8000e84:	b08d      	sub	sp, #52	; 0x34
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fb96 	bl	80045ca <USB_GetMode>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f040 838f 	bne.w	80015c4 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fafa 	bl	80044a4 <USB_ReadInterrupts>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8385 	beq.w	80015c2 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 faf1 	bl	80044a4 <USB_ReadInterrupts>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d107      	bne.n	8000edc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f002 0202 	and.w	r2, r2, #2
 8000eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fadf 	bl	80044a4 <USB_ReadInterrupts>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	2b10      	cmp	r3, #16
 8000eee:	d161      	bne.n	8000fb4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	699a      	ldr	r2, [r3, #24]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0210 	bic.w	r2, r2, #16
 8000efe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8000f00:	6a3b      	ldr	r3, [r7, #32]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	f003 020f 	and.w	r2, r3, #15
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	0c5b      	lsrs	r3, r3, #17
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d124      	bne.n	8000f76 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d035      	beq.n	8000fa4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	6a38      	ldr	r0, [r7, #32]
 8000f4c:	f003 f945 	bl	80041da <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f5c:	441a      	add	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f6e:	441a      	add	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	619a      	str	r2, [r3, #24]
 8000f74:	e016      	b.n	8000fa4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	0c5b      	lsrs	r3, r3, #17
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d110      	bne.n	8000fa4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000f88:	2208      	movs	r2, #8
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	6a38      	ldr	r0, [r7, #32]
 8000f8e:	f003 f924 	bl	80041da <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f9e:	441a      	add	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	699a      	ldr	r2, [r3, #24]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0210 	orr.w	r2, r2, #16
 8000fb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 fa73 	bl	80044a4 <USB_ReadInterrupts>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000fc8:	d16e      	bne.n	80010a8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 fa79 	bl	80044ca <USB_ReadDevAllOutEpInterrupt>
 8000fd8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000fda:	e062      	b.n	80010a2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d057      	beq.n	8001096 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fa9e 	bl	8004532 <USB_ReadDevOutEPInterrupt>
 8000ff6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00c      	beq.n	800101c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	015a      	lsls	r2, r3, #5
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	4413      	add	r3, r2
 800100a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800100e:	461a      	mov	r2, r3
 8001010:	2301      	movs	r3, #1
 8001012:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 fd82 	bl	8001b20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00c      	beq.n	8001040 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	015a      	lsls	r2, r3, #5
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	4413      	add	r3, r2
 800102e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001032:	461a      	mov	r2, r3
 8001034:	2308      	movs	r3, #8
 8001036:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 fdbe 	bl	8001bbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	2b00      	cmp	r3, #0
 8001048:	d008      	beq.n	800105c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	015a      	lsls	r2, r3, #5
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	4413      	add	r3, r2
 8001052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001056:	461a      	mov	r2, r3
 8001058:	2310      	movs	r3, #16
 800105a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	2b00      	cmp	r3, #0
 8001064:	d008      	beq.n	8001078 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	015a      	lsls	r2, r3, #5
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	4413      	add	r3, r2
 800106e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001072:	461a      	mov	r2, r3
 8001074:	2320      	movs	r3, #32
 8001076:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d009      	beq.n	8001096 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	015a      	lsls	r2, r3, #5
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	4413      	add	r3, r2
 800108a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800108e:	461a      	mov	r2, r3
 8001090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001094:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	3301      	adds	r3, #1
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80010a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d199      	bne.n	8000fdc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 f9f9 	bl	80044a4 <USB_ReadInterrupts>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010bc:	f040 8087 	bne.w	80011ce <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 fa1a 	bl	80044fe <USB_ReadDevAllInEpInterrupt>
 80010ca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80010d0:	e07a      	b.n	80011c8 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d06f      	beq.n	80011bc <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fa41 	bl	800456e <USB_ReadDevInEPInterrupt>
 80010ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	2201      	movs	r2, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800110c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	69f9      	ldr	r1, [r7, #28]
 8001114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001118:	4013      	ands	r3, r2
 800111a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	015a      	lsls	r2, r3, #5
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001128:	461a      	mov	r2, r3
 800112a:	2301      	movs	r3, #1
 800112c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f005 fadc 	bl	80066f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	015a      	lsls	r2, r3, #5
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001150:	461a      	mov	r2, r3
 8001152:	2308      	movs	r3, #8
 8001154:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	015a      	lsls	r2, r3, #5
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	4413      	add	r3, r2
 8001168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800116c:	461a      	mov	r2, r3
 800116e:	2310      	movs	r3, #16
 8001170:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	015a      	lsls	r2, r3, #5
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4413      	add	r3, r2
 8001184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001188:	461a      	mov	r2, r3
 800118a:	2340      	movs	r3, #64	; 0x40
 800118c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	015a      	lsls	r2, r3, #5
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	4413      	add	r3, r2
 80011a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011a4:	461a      	mov	r2, r3
 80011a6:	2302      	movs	r3, #2
 80011a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80011b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fc29 	bl	8001a0e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	3301      	adds	r3, #1
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	085b      	lsrs	r3, r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80011c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d181      	bne.n	80010d2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 f966 	bl	80044a4 <USB_ReadInterrupts>
 80011d8:	4603      	mov	r3, r0
 80011da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011e2:	d122      	bne.n	800122a <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d108      	bne.n	8001214 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800120a:	2100      	movs	r1, #0
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f005 fd89 	bl	8006d24 <HAL_PCDEx_LPM_Callback>
 8001212:	e002      	b.n	800121a <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f005 fad9 	bl	80067cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	695a      	ldr	r2, [r3, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f003 f938 	bl	80044a4 <USB_ReadInterrupts>
 8001234:	4603      	mov	r3, r0
 8001236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800123a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800123e:	d112      	bne.n	8001266 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b01      	cmp	r3, #1
 800124e:	d102      	bne.n	8001256 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f005 fa95 	bl	8006780 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001264:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f003 f91a 	bl	80044a4 <USB_ReadInterrupts>
 8001270:	4603      	mov	r3, r0
 8001272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800127a:	d121      	bne.n	80012c0 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	695a      	ldr	r2, [r3, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800128a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d111      	bne.n	80012ba <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	f003 020f 	and.w	r2, r3, #15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80012b0:	2101      	movs	r1, #1
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f005 fd36 	bl	8006d24 <HAL_PCDEx_LPM_Callback>
 80012b8:	e002      	b.n	80012c0 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f005 fa60 	bl	8006780 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 f8ed 	bl	80044a4 <USB_ReadInterrupts>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d4:	f040 80c5 	bne.w	8001462 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2110      	movs	r1, #16
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 fa62 	bl	80037bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012fc:	e056      	b.n	80013ac <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	015a      	lsls	r2, r3, #5
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4413      	add	r3, r2
 8001306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800130a:	461a      	mov	r2, r3
 800130c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001310:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001314:	015a      	lsls	r2, r3, #5
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	4413      	add	r3, r2
 800131a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001322:	0151      	lsls	r1, r2, #5
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	440a      	add	r2, r1
 8001328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800132c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001330:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001342:	0151      	lsls	r1, r2, #5
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	440a      	add	r2, r1
 8001348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800134c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001350:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	015a      	lsls	r2, r3, #5
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	4413      	add	r3, r2
 800135a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800135e:	461a      	mov	r2, r3
 8001360:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001364:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	015a      	lsls	r2, r3, #5
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	4413      	add	r3, r2
 800136e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001376:	0151      	lsls	r1, r2, #5
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	440a      	add	r2, r1
 800137c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001380:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001384:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	4413      	add	r3, r2
 800138e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001396:	0151      	lsls	r1, r2, #5
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	440a      	add	r2, r1
 800139c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80013a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	3301      	adds	r3, #1
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d3a3      	bcc.n	80012fe <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80013c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d016      	beq.n	8001400 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013e2:	f043 030b 	orr.w	r3, r3, #11
 80013e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013f8:	f043 030b 	orr.w	r3, r3, #11
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	e015      	b.n	800142c <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800140e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001412:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001416:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001426:	f043 030b 	orr.w	r3, r3, #11
 800142a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800143a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800143e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800144a:	4619      	mov	r1, r3
 800144c:	4610      	mov	r0, r2
 800144e:	f003 f8ed 	bl	800462c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001460:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 f81c 	bl	80044a4 <USB_ReadInterrupts>
 800146c:	4603      	mov	r3, r0
 800146e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001476:	d124      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f003 f8b2 	bl	80045e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f9f9 	bl	800387e <USB_GetDevSpeed>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681c      	ldr	r4, [r3, #0]
 8001498:	f001 fa08 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 800149c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	4620      	mov	r0, r4
 80014a8:	f001 ff54 	bl	8003354 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f005 f948 	bl	8006742 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 ffec 	bl	80044a4 <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d10a      	bne.n	80014ec <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f005 f925 	bl	8006726 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f002 0208 	and.w	r2, r2, #8
 80014ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 ffd7 	bl	80044a4 <USB_ReadInterrupts>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001500:	d10f      	bne.n	8001522 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f005 f997 	bl	8006840 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001520:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f002 ffbc 	bl	80044a4 <USB_ReadInterrupts>
 800152c:	4603      	mov	r3, r0
 800152e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001536:	d10f      	bne.n	8001558 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f005 f96a 	bl	800681c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f002 ffa1 	bl	80044a4 <USB_ReadInterrupts>
 8001562:	4603      	mov	r3, r0
 8001564:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156c:	d10a      	bne.n	8001584 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f005 f978 	bl	8006864 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001582:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f002 ff8b 	bl	80044a4 <USB_ReadInterrupts>
 800158e:	4603      	mov	r3, r0
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b04      	cmp	r3, #4
 8001596:	d115      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f005 f968 	bl	8006880 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	e000      	b.n	80015c4 <HAL_PCD_IRQHandler+0x742>
      return;
 80015c2:	bf00      	nop
    }
  }
}
 80015c4:	3734      	adds	r7, #52	; 0x34
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}

080015ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_PCD_SetAddress+0x1a>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e013      	b.n	800160c <HAL_PCD_SetAddress+0x42>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fee9 	bl	80043d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	4608      	mov	r0, r1
 800161e:	4611      	mov	r1, r2
 8001620:	461a      	mov	r2, r3
 8001622:	4603      	mov	r3, r0
 8001624:	70fb      	strb	r3, [r7, #3]
 8001626:	460b      	mov	r3, r1
 8001628:	803b      	strh	r3, [r7, #0]
 800162a:	4613      	mov	r3, r2
 800162c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001636:	2b00      	cmp	r3, #0
 8001638:	da0f      	bge.n	800165a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	f003 020f 	and.w	r2, r3, #15
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3338      	adds	r3, #56	; 0x38
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	3304      	adds	r3, #4
 8001650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	705a      	strb	r2, [r3, #1]
 8001658:	e00f      	b.n	800167a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	f003 020f 	and.w	r2, r3, #15
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	3304      	adds	r3, #4
 8001672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	b2da      	uxtb	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001686:	883a      	ldrh	r2, [r7, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	78ba      	ldrb	r2, [r7, #2]
 8001690:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	785b      	ldrb	r3, [r3, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016a4:	78bb      	ldrb	r3, [r7, #2]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d102      	bne.n	80016b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_PCD_EP_Open+0xaa>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e00e      	b.n	80016dc <HAL_PCD_EP_Open+0xc8>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68f9      	ldr	r1, [r7, #12]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 f8f5 	bl	80038bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80016da:	7afb      	ldrb	r3, [r7, #11]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da0f      	bge.n	8001718 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	f003 020f 	and.w	r2, r3, #15
 80016fe:	4613      	mov	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	1a9b      	subs	r3, r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	3338      	adds	r3, #56	; 0x38
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	3304      	adds	r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	705a      	strb	r2, [r3, #1]
 8001716:	e00f      	b.n	8001738 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	f003 020f 	and.w	r2, r3, #15
 800171e:	4613      	mov	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	3304      	adds	r3, #4
 8001730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	b2da      	uxtb	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_PCD_EP_Close+0x6e>
 800174e:	2302      	movs	r3, #2
 8001750:	e00e      	b.n	8001770 <HAL_PCD_EP_Close+0x8c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68f9      	ldr	r1, [r7, #12]
 8001760:	4618      	mov	r0, r3
 8001762:	f002 f933 	bl	80039cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	460b      	mov	r3, r1
 8001786:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	f003 020f 	and.w	r2, r3, #15
 800178e:	4613      	mov	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4413      	add	r3, r2
 800179e:	3304      	adds	r3, #4
 80017a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2200      	movs	r2, #0
 80017b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d106      	bne.n	80017de <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6979      	ldr	r1, [r7, #20]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fbb0 	bl	8003f3c <USB_EP0StartXfer>
 80017dc:	e005      	b.n	80017ea <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6979      	ldr	r1, [r7, #20]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 f9cd 	bl	8003b84 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	f003 020f 	and.w	r2, r3, #15
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	460b      	mov	r3, r1
 8001832:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001834:	7afb      	ldrb	r3, [r7, #11]
 8001836:	f003 020f 	and.w	r2, r3, #15
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	3338      	adds	r3, #56	; 0x38
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	3304      	adds	r3, #4
 800184a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2201      	movs	r2, #1
 8001862:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001864:	7afb      	ldrb	r3, [r7, #11]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	b2da      	uxtb	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	2b00      	cmp	r3, #0
 8001878:	d106      	bne.n	8001888 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6979      	ldr	r1, [r7, #20]
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fb5b 	bl	8003f3c <USB_EP0StartXfer>
 8001886:	e005      	b.n	8001894 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	4618      	mov	r0, r3
 8001890:	f002 f978 	bl	8003b84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	f003 020f 	and.w	r2, r3, #15
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d901      	bls.n	80018bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e04e      	b.n	800195a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da0f      	bge.n	80018e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	f003 020f 	and.w	r2, r3, #15
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	3338      	adds	r3, #56	; 0x38
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	3304      	adds	r3, #4
 80018da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	705a      	strb	r2, [r3, #1]
 80018e2:	e00d      	b.n	8001900 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	3304      	adds	r3, #4
 80018f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	b2da      	uxtb	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_PCD_EP_SetStall+0x82>
 800191c:	2302      	movs	r3, #2
 800191e:	e01c      	b.n	800195a <HAL_PCD_EP_SetStall+0xbc>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68f9      	ldr	r1, [r7, #12]
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fc7c 	bl	800422c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	2b00      	cmp	r3, #0
 800193c:	d108      	bne.n	8001950 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001948:	4619      	mov	r1, r3
 800194a:	4610      	mov	r0, r2
 800194c:	f002 fe6e 	bl	800462c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 020f 	and.w	r2, r3, #15
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	d901      	bls.n	8001980 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e042      	b.n	8001a06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001984:	2b00      	cmp	r3, #0
 8001986:	da0f      	bge.n	80019a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f003 020f 	and.w	r2, r3, #15
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	3338      	adds	r3, #56	; 0x38
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	3304      	adds	r3, #4
 800199e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	705a      	strb	r2, [r3, #1]
 80019a6:	e00f      	b.n	80019c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	f003 020f 	and.w	r2, r3, #15
 80019ae:	4613      	mov	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	3304      	adds	r3, #4
 80019c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_PCD_EP_ClrStall+0x86>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e00e      	b.n	8001a06 <HAL_PCD_EP_ClrStall+0xa4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68f9      	ldr	r1, [r7, #12]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 fc86 	bl	8004308 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b088      	sub	sp, #32
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	3338      	adds	r3, #56	; 0x38
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	3304      	adds	r3, #4
 8001a34:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	699a      	ldr	r2, [r3, #24]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d901      	bls.n	8001a46 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e067      	b.n	8001b16 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d902      	bls.n	8001a62 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3303      	adds	r3, #3
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a6a:	e026      	b.n	8001aba <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d902      	bls.n	8001a88 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	3303      	adds	r3, #3
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68d9      	ldr	r1, [r3, #12]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	6978      	ldr	r0, [r7, #20]
 8001a9e:	f002 fb6b 	bl	8004178 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	441a      	add	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	699a      	ldr	r2, [r3, #24]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	441a      	add	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	015a      	lsls	r2, r3, #5
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d809      	bhi.n	8001ae4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d203      	bcs.n	8001ae4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1c3      	bne.n	8001a6c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d811      	bhi.n	8001b14 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	2201      	movs	r2, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	6939      	ldr	r1, [r7, #16]
 8001b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b10:	4013      	ands	r3, r2
 8001b12:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	333c      	adds	r3, #60	; 0x3c
 8001b38:	3304      	adds	r3, #4
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4a19      	ldr	r2, [pc, #100]	; (8001bb8 <PCD_EP_OutXfrComplete_int+0x98>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d124      	bne.n	8001ba0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b72:	6093      	str	r3, [r2, #8]
 8001b74:	e01a      	b.n	8001bac <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2320      	movs	r3, #32
 8001b90:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f004 fd8f 	bl	80066bc <HAL_PCD_DataOutStageCallback>
 8001b9e:	e005      	b.n	8001bac <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f004 fd88 	bl	80066bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	4f54310a 	.word	0x4f54310a

08001bbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	333c      	adds	r3, #60	; 0x3c
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <PCD_EP_OutSetupPacket_int+0x64>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d90e      	bls.n	8001c10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f004 fd41 	bl	8006698 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	4f54300a 	.word	0x4f54300a

08001c24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
 8001c30:	4613      	mov	r3, r2
 8001c32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d107      	bne.n	8001c52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001c42:	883b      	ldrh	r3, [r7, #0]
 8001c44:	0419      	lsls	r1, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c50:	e028      	b.n	8001ca4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e00d      	b.n	8001c82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	3340      	adds	r3, #64	; 0x40
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	4413      	add	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3ec      	bcc.n	8001c66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001c8c:	883b      	ldrh	r3, [r7, #0]
 8001c8e:	0418      	lsls	r0, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	4302      	orrs	r2, r0
 8001c9c:	3340      	adds	r3, #64	; 0x40
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d06:	f043 0303 	orr.w	r3, r3, #3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40007000 	.word	0x40007000

08001d38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d46:	d130      	bne.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d48:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d54:	d038      	beq.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2232      	movs	r2, #50	; 0x32
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9b      	lsrs	r3, r3, #18
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d7c:	e002      	b.n	8001d84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d90:	d102      	bne.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f2      	bne.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da4:	d110      	bne.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e00f      	b.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db6:	d007      	beq.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	431bde83 	.word	0x431bde83

08001de4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df2:	6053      	str	r3, [r2, #4]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40007000 	.word	0x40007000

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e3d4      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e16:	4ba1      	ldr	r3, [pc, #644]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e20:	4b9e      	ldr	r3, [pc, #632]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80e4 	beq.w	8002000 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <HAL_RCC_OscConfig+0x4a>
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	f040 808b 	bne.w	8001f5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	f040 8087 	bne.w	8001f5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e4e:	4b93      	ldr	r3, [pc, #588]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x62>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e3ac      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1a      	ldr	r2, [r3, #32]
 8001e6a:	4b8c      	ldr	r3, [pc, #560]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d004      	beq.n	8001e80 <HAL_RCC_OscConfig+0x7c>
 8001e76:	4b89      	ldr	r3, [pc, #548]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7e:	e005      	b.n	8001e8c <HAL_RCC_OscConfig+0x88>
 8001e80:	4b86      	ldr	r3, [pc, #536]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d223      	bcs.n	8001ed8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fd15 	bl	80028c4 <RCC_SetFlashLatencyFromMSIRange>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e38d      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea4:	4b7d      	ldr	r3, [pc, #500]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a7c      	ldr	r2, [pc, #496]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001eaa:	f043 0308 	orr.w	r3, r3, #8
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b7a      	ldr	r3, [pc, #488]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4977      	ldr	r1, [pc, #476]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec2:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	4972      	ldr	r1, [pc, #456]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
 8001ed6:	e025      	b.n	8001f24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed8:	4b70      	ldr	r3, [pc, #448]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6f      	ldr	r2, [pc, #444]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001ede:	f043 0308 	orr.w	r3, r3, #8
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b6d      	ldr	r3, [pc, #436]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	496a      	ldr	r1, [pc, #424]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef6:	4b69      	ldr	r3, [pc, #420]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	4965      	ldr	r1, [pc, #404]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fcd5 	bl	80028c4 <RCC_SetFlashLatencyFromMSIRange>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e34d      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f24:	f000 fc36 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b5c      	ldr	r3, [pc, #368]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	495a      	ldr	r1, [pc, #360]	; (80020a0 <HAL_RCC_OscConfig+0x29c>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <HAL_RCC_OscConfig+0x2a0>)
 8001f42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f44:	4b58      	ldr	r3, [pc, #352]	; (80020a8 <HAL_RCC_OscConfig+0x2a4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fad9 	bl	8000500 <HAL_InitTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d052      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	e331      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d032      	beq.n	8001fca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f64:	4b4d      	ldr	r3, [pc, #308]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a4c      	ldr	r2, [pc, #304]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f70:	f7fe fb16 	bl	80005a0 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f78:	f7fe fb12 	bl	80005a0 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e31a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f8a:	4b44      	ldr	r3, [pc, #272]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a40      	ldr	r2, [pc, #256]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b3e      	ldr	r3, [pc, #248]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	493b      	ldr	r1, [pc, #236]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	4936      	ldr	r1, [pc, #216]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
 8001fc8:	e01a      	b.n	8002000 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a33      	ldr	r2, [pc, #204]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fd6:	f7fe fae3 	bl	80005a0 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fde:	f7fe fadf 	bl	80005a0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e2e7      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x1da>
 8001ffc:	e000      	b.n	8002000 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ffe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d074      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b08      	cmp	r3, #8
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x21a>
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d10e      	bne.n	8002036 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d10b      	bne.n	8002036 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d064      	beq.n	80020f4 <HAL_RCC_OscConfig+0x2f0>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d160      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e2c4      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x24a>
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a15      	ldr	r2, [pc, #84]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e01d      	b.n	800208a <HAL_RCC_OscConfig+0x286>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002056:	d10c      	bne.n	8002072 <HAL_RCC_OscConfig+0x26e>
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_RCC_OscConfig+0x298>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_RCC_OscConfig+0x298>)
 800205e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0c      	ldr	r2, [pc, #48]	; (800209c <HAL_RCC_OscConfig+0x298>)
 800206a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	e00b      	b.n	800208a <HAL_RCC_OscConfig+0x286>
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8002078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_RCC_OscConfig+0x298>)
 8002084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01c      	beq.n	80020cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7fe fa85 	bl	80005a0 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002098:	e011      	b.n	80020be <HAL_RCC_OscConfig+0x2ba>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	08006eb4 	.word	0x08006eb4
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7fe fa78 	bl	80005a0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e280      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020be:	4baf      	ldr	r3, [pc, #700]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x2a8>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe fa68 	bl	80005a0 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe fa64 	bl	80005a0 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e26c      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e6:	4ba5      	ldr	r3, [pc, #660]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x2d0>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d060      	beq.n	80021c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b04      	cmp	r3, #4
 8002106:	d005      	beq.n	8002114 <HAL_RCC_OscConfig+0x310>
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d119      	bne.n	8002142 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d116      	bne.n	8002142 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002114:	4b99      	ldr	r3, [pc, #612]	; (800237c <HAL_RCC_OscConfig+0x578>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_OscConfig+0x328>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e249      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b93      	ldr	r3, [pc, #588]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	4990      	ldr	r1, [pc, #576]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002140:	e040      	b.n	80021c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d023      	beq.n	8002192 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214a:	4b8c      	ldr	r3, [pc, #560]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a8b      	ldr	r2, [pc, #556]	; (800237c <HAL_RCC_OscConfig+0x578>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe fa23 	bl	80005a0 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215e:	f7fe fa1f 	bl	80005a0 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e227      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002170:	4b82      	ldr	r3, [pc, #520]	; (800237c <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217c:	4b7f      	ldr	r3, [pc, #508]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	497c      	ldr	r1, [pc, #496]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
 8002190:	e018      	b.n	80021c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002192:	4b7a      	ldr	r3, [pc, #488]	; (800237c <HAL_RCC_OscConfig+0x578>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a79      	ldr	r2, [pc, #484]	; (800237c <HAL_RCC_OscConfig+0x578>)
 8002198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800219c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7fe f9ff 	bl	80005a0 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a6:	f7fe f9fb 	bl	80005a0 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e203      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b8:	4b70      	ldr	r3, [pc, #448]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d03c      	beq.n	800224a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01c      	beq.n	8002212 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d8:	4b68      	ldr	r3, [pc, #416]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80021da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021de:	4a67      	ldr	r2, [pc, #412]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7fe f9da 	bl	80005a0 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f0:	f7fe f9d6 	bl	80005a0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1de      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002202:	4b5e      	ldr	r3, [pc, #376]	; (800237c <HAL_RCC_OscConfig+0x578>)
 8002204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ef      	beq.n	80021f0 <HAL_RCC_OscConfig+0x3ec>
 8002210:	e01b      	b.n	800224a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002212:	4b5a      	ldr	r3, [pc, #360]	; (800237c <HAL_RCC_OscConfig+0x578>)
 8002214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002218:	4a58      	ldr	r2, [pc, #352]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7fe f9bd 	bl	80005a0 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222a:	f7fe f9b9 	bl	80005a0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1c1      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1ef      	bne.n	800222a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80a6 	beq.w	80023a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800225c:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10d      	bne.n	8002284 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	4b44      	ldr	r3, [pc, #272]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	4a43      	ldr	r2, [pc, #268]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800226e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002272:	6593      	str	r3, [r2, #88]	; 0x58
 8002274:	4b41      	ldr	r3, [pc, #260]	; (800237c <HAL_RCC_OscConfig+0x578>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002280:	2301      	movs	r3, #1
 8002282:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002284:	4b3e      	ldr	r3, [pc, #248]	; (8002380 <HAL_RCC_OscConfig+0x57c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d118      	bne.n	80022c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002290:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <HAL_RCC_OscConfig+0x57c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a3a      	ldr	r2, [pc, #232]	; (8002380 <HAL_RCC_OscConfig+0x57c>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229c:	f7fe f980 	bl	80005a0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a4:	f7fe f97c 	bl	80005a0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e184      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_RCC_OscConfig+0x57c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d108      	bne.n	80022dc <HAL_RCC_OscConfig+0x4d8>
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80022cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d0:	4a2a      	ldr	r2, [pc, #168]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022da:	e024      	b.n	8002326 <HAL_RCC_OscConfig+0x522>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d110      	bne.n	8002306 <HAL_RCC_OscConfig+0x502>
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	4a24      	ldr	r2, [pc, #144]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	4a20      	ldr	r2, [pc, #128]	; (800237c <HAL_RCC_OscConfig+0x578>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002304:	e00f      	b.n	8002326 <HAL_RCC_OscConfig+0x522>
 8002306:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_RCC_OscConfig+0x578>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	4a1b      	ldr	r2, [pc, #108]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_RCC_OscConfig+0x578>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231c:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800231e:	f023 0304 	bic.w	r3, r3, #4
 8002322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7fe f937 	bl	80005a0 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fe f933 	bl	80005a0 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	; 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e139      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_OscConfig+0x578>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0ed      	beq.n	8002336 <HAL_RCC_OscConfig+0x532>
 800235a:	e01a      	b.n	8002392 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fe f920 	bl	80005a0 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002362:	e00f      	b.n	8002384 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002364:	f7fe f91c 	bl	80005a0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d906      	bls.n	8002384 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e122      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002384:	4b90      	ldr	r3, [pc, #576]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1e8      	bne.n	8002364 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002392:	7ffb      	ldrb	r3, [r7, #31]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b8b      	ldr	r3, [pc, #556]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	4a8a      	ldr	r2, [pc, #552]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 800239e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 8108 	beq.w	80025be <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	f040 80d0 	bne.w	8002558 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023b8:	4b83      	ldr	r3, [pc, #524]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d130      	bne.n	800242e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	3b01      	subs	r3, #1
 80023d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d127      	bne.n	800242e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d11f      	bne.n	800242e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023f8:	2a07      	cmp	r2, #7
 80023fa:	bf14      	ite	ne
 80023fc:	2201      	movne	r2, #1
 80023fe:	2200      	moveq	r2, #0
 8002400:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002402:	4293      	cmp	r3, r2
 8002404:	d113      	bne.n	800242e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	3b01      	subs	r3, #1
 8002414:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d109      	bne.n	800242e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	3b01      	subs	r3, #1
 8002428:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d06e      	beq.n	800250c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d069      	beq.n	8002508 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002434:	4b64      	ldr	r3, [pc, #400]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002440:	4b61      	ldr	r3, [pc, #388]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0b7      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002450:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a5c      	ldr	r2, [pc, #368]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800245c:	f7fe f8a0 	bl	80005a0 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe f89c 	bl	80005a0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0a4      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002476:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002482:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	4b51      	ldr	r3, [pc, #324]	; (80025cc <HAL_RCC_OscConfig+0x7c8>)
 8002488:	4013      	ands	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002492:	3a01      	subs	r2, #1
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	4311      	orrs	r1, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800249c:	0212      	lsls	r2, r2, #8
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024a4:	0852      	lsrs	r2, r2, #1
 80024a6:	3a01      	subs	r2, #1
 80024a8:	0552      	lsls	r2, r2, #21
 80024aa:	4311      	orrs	r1, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024b0:	0852      	lsrs	r2, r2, #1
 80024b2:	3a01      	subs	r2, #1
 80024b4:	0652      	lsls	r2, r2, #25
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024bc:	0912      	lsrs	r2, r2, #4
 80024be:	0452      	lsls	r2, r2, #17
 80024c0:	430a      	orrs	r2, r1
 80024c2:	4941      	ldr	r1, [pc, #260]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024c8:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a3e      	ldr	r2, [pc, #248]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d4:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a3b      	ldr	r2, [pc, #236]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 80024da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e0:	f7fe f85e 	bl	80005a0 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe f85a 	bl	80005a0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e062      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002506:	e05a      	b.n	80025be <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e059      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250c:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d152      	bne.n	80025be <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 800251e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 800252a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002530:	f7fe f836 	bl	80005a0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe f832 	bl	80005a0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e03a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x734>
 8002556:	e032      	b.n	80025be <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d02d      	beq.n	80025ba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002568:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 800257c:	f023 0303 	bic.w	r3, r3, #3
 8002580:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 8002588:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800258c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002590:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe f805 	bl	80005a0 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe f801 	bl	80005a0 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e009      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x7c4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x796>
 80025b8:	e001      	b.n	80025be <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	f99d808c 	.word	0xf99d808c

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0c8      	b.n	8002776 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b66      	ldr	r3, [pc, #408]	; (8002780 <HAL_RCC_ClockConfig+0x1b0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_ClockConfig+0x1b0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4961      	ldr	r1, [pc, #388]	; (8002780 <HAL_RCC_ClockConfig+0x1b0>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b5f      	ldr	r3, [pc, #380]	; (8002780 <HAL_RCC_ClockConfig+0x1b0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b0      	b.n	8002776 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d04c      	beq.n	80026ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d107      	bne.n	8002638 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002628:	4b56      	ldr	r3, [pc, #344]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d121      	bne.n	8002678 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e09e      	b.n	8002776 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d107      	bne.n	8002650 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d115      	bne.n	8002678 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e092      	b.n	8002776 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002658:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e086      	b.n	8002776 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002668:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e07e      	b.n	8002776 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002678:	4b42      	ldr	r3, [pc, #264]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 0203 	bic.w	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	493f      	ldr	r1, [pc, #252]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268a:	f7fd ff89 	bl	80005a0 <HAL_GetTick>
 800268e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002692:	f7fd ff85 	bl	80005a0 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e066      	b.n	8002776 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a8:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 020c 	and.w	r2, r3, #12
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d1eb      	bne.n	8002692 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c6:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	492c      	ldr	r1, [pc, #176]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <HAL_RCC_ClockConfig+0x1b0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d210      	bcs.n	8002708 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b26      	ldr	r3, [pc, #152]	; (8002780 <HAL_RCC_ClockConfig+0x1b0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4924      	ldr	r1, [pc, #144]	; (8002780 <HAL_RCC_ClockConfig+0x1b0>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b22      	ldr	r3, [pc, #136]	; (8002780 <HAL_RCC_ClockConfig+0x1b0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e036      	b.n	8002776 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4918      	ldr	r1, [pc, #96]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002732:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4910      	ldr	r1, [pc, #64]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002746:	f000 f825 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 800274a:	4602      	mov	r2, r0
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCC_ClockConfig+0x1b4>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	490c      	ldr	r1, [pc, #48]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	5ccb      	ldrb	r3, [r1, r3]
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fec8 	bl	8000500 <HAL_InitTick>
 8002770:	4603      	mov	r3, r0
 8002772:	72fb      	strb	r3, [r7, #11]

  return status;
 8002774:	7afb      	ldrb	r3, [r7, #11]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40022000 	.word	0x40022000
 8002784:	40021000 	.word	0x40021000
 8002788:	08006eb4 	.word	0x08006eb4
 800278c:	20000000 	.word	0x20000000
 8002790:	20000004 	.word	0x20000004

08002794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a2:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_RCC_GetSysClockFreq+0x108>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_GetSysClockFreq+0x108>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x34>
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	d121      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d11e      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027c8:	4b34      	ldr	r3, [pc, #208]	; (800289c <HAL_RCC_GetSysClockFreq+0x108>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_RCC_GetSysClockFreq+0x108>)
 80027d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e005      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027e4:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_RCC_GetSysClockFreq+0x108>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027f0:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10d      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002804:	e00a      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d102      	bne.n	8002812 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	e004      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d101      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002818:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800281a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d134      	bne.n	800288c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002822:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_RCC_GetSysClockFreq+0x108>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0xa6>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d003      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0xac>
 8002838:	e005      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800283c:	617b      	str	r3, [r7, #20]
      break;
 800283e:	e005      	b.n	800284c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002842:	617b      	str	r3, [r7, #20]
      break;
 8002844:	e002      	b.n	800284c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	617b      	str	r3, [r7, #20]
      break;
 800284a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <HAL_RCC_GetSysClockFreq+0x108>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	3301      	adds	r3, #1
 8002858:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_RCC_GetSysClockFreq+0x108>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	fb02 f203 	mul.w	r2, r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_RCC_GetSysClockFreq+0x108>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	0e5b      	lsrs	r3, r3, #25
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	3301      	adds	r3, #1
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	fbb2 f3f3 	udiv	r3, r2, r3
 800288a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800288c:	69bb      	ldr	r3, [r7, #24]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3724      	adds	r7, #36	; 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	08006ec4 	.word	0x08006ec4
 80028a4:	00f42400 	.word	0x00f42400
 80028a8:	007a1200 	.word	0x007a1200

080028ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000

080028c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028d0:	4b2a      	ldr	r3, [pc, #168]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028dc:	f7ff fa1e 	bl	8001d1c <HAL_PWREx_GetVoltageRange>
 80028e0:	6178      	str	r0, [r7, #20]
 80028e2:	e014      	b.n	800290e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6593      	str	r3, [r2, #88]	; 0x58
 80028f0:	4b22      	ldr	r3, [pc, #136]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028fc:	f7ff fa0e 	bl	8001d1c <HAL_PWREx_GetVoltageRange>
 8002900:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002914:	d10b      	bne.n	800292e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d919      	bls.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2ba0      	cmp	r3, #160	; 0xa0
 8002920:	d902      	bls.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002922:	2302      	movs	r3, #2
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e013      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002928:	2301      	movs	r3, #1
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	e010      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b80      	cmp	r3, #128	; 0x80
 8002932:	d902      	bls.n	800293a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002934:	2303      	movs	r3, #3
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	e00a      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d102      	bne.n	8002946 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002940:	2302      	movs	r3, #2
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	e004      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b70      	cmp	r3, #112	; 0x70
 800294a:	d101      	bne.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 0207 	bic.w	r2, r3, #7
 8002958:	4909      	ldr	r1, [pc, #36]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	40022000 	.word	0x40022000

08002984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800298c:	2300      	movs	r3, #0
 800298e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002990:	2300      	movs	r3, #0
 8002992:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299c:	2b00      	cmp	r3, #0
 800299e:	d041      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029a8:	d02a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029ae:	d824      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029b4:	d008      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ba:	d81e      	bhi.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c4:	d010      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029c6:	e018      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029c8:	4b86      	ldr	r3, [pc, #536]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a85      	ldr	r2, [pc, #532]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d4:	e015      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fabb 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e6:	e00c      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3320      	adds	r3, #32
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fba6 	bl	8003140 <RCCEx_PLLSAI2_Config>
 80029f4:	4603      	mov	r3, r0
 80029f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029f8:	e003      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	74fb      	strb	r3, [r7, #19]
      break;
 80029fe:	e000      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10b      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a08:	4b76      	ldr	r3, [pc, #472]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a16:	4973      	ldr	r1, [pc, #460]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a1e:	e001      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d041      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a38:	d02a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a3e:	d824      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a4a:	d81e      	bhi.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a54:	d010      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a56:	e018      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a58:	4b62      	ldr	r3, [pc, #392]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a61      	ldr	r2, [pc, #388]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a64:	e015      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fa73 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a76:	e00c      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3320      	adds	r3, #32
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fb5e 	bl	8003140 <RCCEx_PLLSAI2_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a88:	e003      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a8e:	e000      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10b      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a98:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa6:	494f      	ldr	r1, [pc, #316]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002aae:	e001      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80a0 	beq.w	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	4a40      	ldr	r2, [pc, #256]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae8:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af8:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3a      	ldr	r2, [pc, #232]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b04:	f7fd fd4c 	bl	80005a0 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b0a:	e009      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0c:	f7fd fd48 	bl	80005a0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d902      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b1e:	e005      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b20:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ef      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d15c      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b32:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01f      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d019      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b50:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b5c:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	4a20      	ldr	r2, [pc, #128]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b7c:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d016      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fd fd07 	bl	80005a0 <HAL_GetTick>
 8002b92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b94:	e00b      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fd fd03 	bl	80005a0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d902      	bls.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	74fb      	strb	r3, [r7, #19]
            break;
 8002bac:	e006      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ec      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd2:	4904      	ldr	r1, [pc, #16]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bda:	e009      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	74bb      	strb	r3, [r7, #18]
 8002be0:	e006      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf0:	7c7b      	ldrb	r3, [r7, #17]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf6:	4b9e      	ldr	r3, [pc, #632]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	4a9d      	ldr	r2, [pc, #628]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c0e:	4b98      	ldr	r3, [pc, #608]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f023 0203 	bic.w	r2, r3, #3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	4994      	ldr	r1, [pc, #592]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c30:	4b8f      	ldr	r3, [pc, #572]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f023 020c 	bic.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	498c      	ldr	r1, [pc, #560]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c52:	4b87      	ldr	r3, [pc, #540]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4983      	ldr	r1, [pc, #524]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c74:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	497b      	ldr	r1, [pc, #492]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca4:	4972      	ldr	r1, [pc, #456]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cb8:	4b6d      	ldr	r3, [pc, #436]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	496a      	ldr	r1, [pc, #424]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cda:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	4961      	ldr	r1, [pc, #388]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cfc:	4b5c      	ldr	r3, [pc, #368]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0a:	4959      	ldr	r1, [pc, #356]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d1e:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2c:	4950      	ldr	r1, [pc, #320]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d40:	4b4b      	ldr	r3, [pc, #300]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	4948      	ldr	r1, [pc, #288]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	493f      	ldr	r1, [pc, #252]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d028      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d92:	4937      	ldr	r1, [pc, #220]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da2:	d106      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da4:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4a31      	ldr	r2, [pc, #196]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dae:	60d3      	str	r3, [r2, #12]
 8002db0:	e011      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dba:	d10c      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f8c8 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d028      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	491f      	ldr	r1, [pc, #124]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e00:	d106      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0c:	60d3      	str	r3, [r2, #12]
 8002e0e:	e011      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f899 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d02b      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	4908      	ldr	r1, [pc, #32]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e5e:	d109      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a02      	ldr	r2, [pc, #8]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6a:	60d3      	str	r3, [r2, #12]
 8002e6c:	e014      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2101      	movs	r1, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f867 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02f      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eb2:	4928      	ldr	r1, [pc, #160]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f844 	bl	8002f58 <RCCEx_PLLSAI1_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed4:	7cfb      	ldrb	r3, [r7, #19]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d014      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	74bb      	strb	r3, [r7, #18]
 8002ede:	e011      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3320      	adds	r3, #32
 8002eee:	2102      	movs	r1, #2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f925 	bl	8003140 <RCCEx_PLLSAI2_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f10:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f1e:	490d      	ldr	r1, [pc, #52]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f42:	4904      	ldr	r1, [pc, #16]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000

08002f58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f66:	4b75      	ldr	r3, [pc, #468]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d018      	beq.n	8002fa4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f72:	4b72      	ldr	r3, [pc, #456]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0203 	and.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d10d      	bne.n	8002f9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
       ||
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f8a:	4b6c      	ldr	r3, [pc, #432]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
       ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d047      	beq.n	800302e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e044      	b.n	800302e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d018      	beq.n	8002fde <RCCEx_PLLSAI1_Config+0x86>
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d825      	bhi.n	8002ffc <RCCEx_PLLSAI1_Config+0xa4>
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d002      	beq.n	8002fba <RCCEx_PLLSAI1_Config+0x62>
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d009      	beq.n	8002fcc <RCCEx_PLLSAI1_Config+0x74>
 8002fb8:	e020      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fba:	4b60      	ldr	r3, [pc, #384]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d11d      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fca:	e01a      	b.n	8003002 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fcc:	4b5b      	ldr	r3, [pc, #364]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d116      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e013      	b.n	8003006 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fea:	4b54      	ldr	r3, [pc, #336]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ffa:	e006      	b.n	800300a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8003000:	e004      	b.n	800300c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003002:	bf00      	nop
 8003004:	e002      	b.n	800300c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003006:	bf00      	nop
 8003008:	e000      	b.n	800300c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800300a:	bf00      	nop
    }

    if(status == HAL_OK)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003012:	4b4a      	ldr	r3, [pc, #296]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	430b      	orrs	r3, r1
 8003028:	4944      	ldr	r1, [pc, #272]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 800302a:	4313      	orrs	r3, r2
 800302c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d17d      	bne.n	8003130 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003034:	4b41      	ldr	r3, [pc, #260]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a40      	ldr	r2, [pc, #256]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800303e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003040:	f7fd faae 	bl	80005a0 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003046:	e009      	b.n	800305c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003048:	f7fd faaa 	bl	80005a0 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d902      	bls.n	800305c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	73fb      	strb	r3, [r7, #15]
        break;
 800305a:	e005      	b.n	8003068 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800305c:	4b37      	ldr	r3, [pc, #220]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ef      	bne.n	8003048 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d160      	bne.n	8003130 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d111      	bne.n	8003098 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003074:	4b31      	ldr	r3, [pc, #196]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800307c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6892      	ldr	r2, [r2, #8]
 8003084:	0211      	lsls	r1, r2, #8
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68d2      	ldr	r2, [r2, #12]
 800308a:	0912      	lsrs	r2, r2, #4
 800308c:	0452      	lsls	r2, r2, #17
 800308e:	430a      	orrs	r2, r1
 8003090:	492a      	ldr	r1, [pc, #168]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	610b      	str	r3, [r1, #16]
 8003096:	e027      	b.n	80030e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d112      	bne.n	80030c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6892      	ldr	r2, [r2, #8]
 80030ae:	0211      	lsls	r1, r2, #8
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6912      	ldr	r2, [r2, #16]
 80030b4:	0852      	lsrs	r2, r2, #1
 80030b6:	3a01      	subs	r2, #1
 80030b8:	0552      	lsls	r2, r2, #21
 80030ba:	430a      	orrs	r2, r1
 80030bc:	491f      	ldr	r1, [pc, #124]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	610b      	str	r3, [r1, #16]
 80030c2:	e011      	b.n	80030e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c4:	4b1d      	ldr	r3, [pc, #116]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	0211      	lsls	r1, r2, #8
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6952      	ldr	r2, [r2, #20]
 80030da:	0852      	lsrs	r2, r2, #1
 80030dc:	3a01      	subs	r2, #1
 80030de:	0652      	lsls	r2, r2, #25
 80030e0:	430a      	orrs	r2, r1
 80030e2:	4916      	ldr	r1, [pc, #88]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a13      	ldr	r2, [pc, #76]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fd fa54 	bl	80005a0 <HAL_GetTick>
 80030f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030fa:	e009      	b.n	8003110 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030fc:	f7fd fa50 	bl	80005a0 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d902      	bls.n	8003110 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	73fb      	strb	r3, [r7, #15]
          break;
 800310e:	e005      	b.n	800311c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ef      	beq.n	80030fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	4904      	ldr	r1, [pc, #16]	; (800313c <RCCEx_PLLSAI1_Config+0x1e4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000

08003140 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800314e:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d018      	beq.n	800318c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800315a:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0203 	and.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d10d      	bne.n	8003186 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
       ||
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003172:	4b61      	ldr	r3, [pc, #388]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
       ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d047      	beq.n	8003216 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	e044      	b.n	8003216 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d018      	beq.n	80031c6 <RCCEx_PLLSAI2_Config+0x86>
 8003194:	2b03      	cmp	r3, #3
 8003196:	d825      	bhi.n	80031e4 <RCCEx_PLLSAI2_Config+0xa4>
 8003198:	2b01      	cmp	r3, #1
 800319a:	d002      	beq.n	80031a2 <RCCEx_PLLSAI2_Config+0x62>
 800319c:	2b02      	cmp	r3, #2
 800319e:	d009      	beq.n	80031b4 <RCCEx_PLLSAI2_Config+0x74>
 80031a0:	e020      	b.n	80031e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031a2:	4b55      	ldr	r3, [pc, #340]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11d      	bne.n	80031ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b2:	e01a      	b.n	80031ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031b4:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d116      	bne.n	80031ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c4:	e013      	b.n	80031ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031c6:	4b4c      	ldr	r3, [pc, #304]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031d2:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031e2:	e006      	b.n	80031f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	e004      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ea:	bf00      	nop
 80031ec:	e002      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ee:	bf00      	nop
 80031f0:	e000      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10d      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031fa:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6819      	ldr	r1, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	430b      	orrs	r3, r1
 8003210:	4939      	ldr	r1, [pc, #228]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003212:	4313      	orrs	r3, r2
 8003214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d167      	bne.n	80032ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a35      	ldr	r2, [pc, #212]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003228:	f7fd f9ba 	bl	80005a0 <HAL_GetTick>
 800322c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800322e:	e009      	b.n	8003244 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003230:	f7fd f9b6 	bl	80005a0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d902      	bls.n	8003244 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	73fb      	strb	r3, [r7, #15]
        break;
 8003242:	e005      	b.n	8003250 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003244:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1ef      	bne.n	8003230 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d14a      	bne.n	80032ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d111      	bne.n	8003280 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800325c:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6892      	ldr	r2, [r2, #8]
 800326c:	0211      	lsls	r1, r2, #8
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68d2      	ldr	r2, [r2, #12]
 8003272:	0912      	lsrs	r2, r2, #4
 8003274:	0452      	lsls	r2, r2, #17
 8003276:	430a      	orrs	r2, r1
 8003278:	491f      	ldr	r1, [pc, #124]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327a:	4313      	orrs	r3, r2
 800327c:	614b      	str	r3, [r1, #20]
 800327e:	e011      	b.n	80032a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003288:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6892      	ldr	r2, [r2, #8]
 8003290:	0211      	lsls	r1, r2, #8
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6912      	ldr	r2, [r2, #16]
 8003296:	0852      	lsrs	r2, r2, #1
 8003298:	3a01      	subs	r2, #1
 800329a:	0652      	lsls	r2, r2, #25
 800329c:	430a      	orrs	r2, r1
 800329e:	4916      	ldr	r1, [pc, #88]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fd f976 	bl	80005a0 <HAL_GetTick>
 80032b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032b6:	e009      	b.n	80032cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032b8:	f7fd f972 	bl	80005a0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d902      	bls.n	80032cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	73fb      	strb	r3, [r7, #15]
          break;
 80032ca:	e005      	b.n	80032d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032cc:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ef      	beq.n	80032b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4904      	ldr	r1, [pc, #16]	; (80032f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000

080032fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032fc:	b084      	sub	sp, #16
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	f107 001c 	add.w	r0, r7, #28
 800330a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f001 f9ce 	bl	80046bc <USB_CoreReset>
 8003320:	4603      	mov	r3, r0
 8003322:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
 8003336:	e005      	b.n	8003344 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003350:	b004      	add	sp, #16
 8003352:	4770      	bx	lr

08003354 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	4613      	mov	r3, r2
 8003360:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d165      	bne.n	8003434 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4a3e      	ldr	r2, [pc, #248]	; (8003464 <USB_SetTurnaroundTime+0x110>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d906      	bls.n	800337e <USB_SetTurnaroundTime+0x2a>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4a3d      	ldr	r2, [pc, #244]	; (8003468 <USB_SetTurnaroundTime+0x114>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d202      	bcs.n	800337e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003378:	230f      	movs	r3, #15
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	e05c      	b.n	8003438 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4a39      	ldr	r2, [pc, #228]	; (8003468 <USB_SetTurnaroundTime+0x114>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d306      	bcc.n	8003394 <USB_SetTurnaroundTime+0x40>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4a38      	ldr	r2, [pc, #224]	; (800346c <USB_SetTurnaroundTime+0x118>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d202      	bcs.n	8003394 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800338e:	230e      	movs	r3, #14
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e051      	b.n	8003438 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4a35      	ldr	r2, [pc, #212]	; (800346c <USB_SetTurnaroundTime+0x118>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d306      	bcc.n	80033aa <USB_SetTurnaroundTime+0x56>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4a34      	ldr	r2, [pc, #208]	; (8003470 <USB_SetTurnaroundTime+0x11c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d202      	bcs.n	80033aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80033a4:	230d      	movs	r3, #13
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e046      	b.n	8003438 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4a30      	ldr	r2, [pc, #192]	; (8003470 <USB_SetTurnaroundTime+0x11c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d306      	bcc.n	80033c0 <USB_SetTurnaroundTime+0x6c>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	4a2f      	ldr	r2, [pc, #188]	; (8003474 <USB_SetTurnaroundTime+0x120>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d802      	bhi.n	80033c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80033ba:	230c      	movs	r3, #12
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e03b      	b.n	8003438 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <USB_SetTurnaroundTime+0x120>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d906      	bls.n	80033d6 <USB_SetTurnaroundTime+0x82>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <USB_SetTurnaroundTime+0x124>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d802      	bhi.n	80033d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80033d0:	230b      	movs	r3, #11
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	e030      	b.n	8003438 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4a27      	ldr	r2, [pc, #156]	; (8003478 <USB_SetTurnaroundTime+0x124>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d906      	bls.n	80033ec <USB_SetTurnaroundTime+0x98>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <USB_SetTurnaroundTime+0x128>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d802      	bhi.n	80033ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80033e6:	230a      	movs	r3, #10
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	e025      	b.n	8003438 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4a23      	ldr	r2, [pc, #140]	; (800347c <USB_SetTurnaroundTime+0x128>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d906      	bls.n	8003402 <USB_SetTurnaroundTime+0xae>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4a22      	ldr	r2, [pc, #136]	; (8003480 <USB_SetTurnaroundTime+0x12c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d202      	bcs.n	8003402 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80033fc:	2309      	movs	r3, #9
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e01a      	b.n	8003438 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4a1e      	ldr	r2, [pc, #120]	; (8003480 <USB_SetTurnaroundTime+0x12c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d306      	bcc.n	8003418 <USB_SetTurnaroundTime+0xc4>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <USB_SetTurnaroundTime+0x130>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d802      	bhi.n	8003418 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003412:	2308      	movs	r3, #8
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e00f      	b.n	8003438 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <USB_SetTurnaroundTime+0x130>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d906      	bls.n	800342e <USB_SetTurnaroundTime+0xda>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4a19      	ldr	r2, [pc, #100]	; (8003488 <USB_SetTurnaroundTime+0x134>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d202      	bcs.n	800342e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003428:	2307      	movs	r3, #7
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	e004      	b.n	8003438 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800342e:	2306      	movs	r3, #6
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e001      	b.n	8003438 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003434:	2309      	movs	r3, #9
 8003436:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	029b      	lsls	r3, r3, #10
 800344c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	00d8acbf 	.word	0x00d8acbf
 8003468:	00e4e1c0 	.word	0x00e4e1c0
 800346c:	00f42400 	.word	0x00f42400
 8003470:	01067380 	.word	0x01067380
 8003474:	011a499f 	.word	0x011a499f
 8003478:	01312cff 	.word	0x01312cff
 800347c:	014ca43f 	.word	0x014ca43f
 8003480:	016e3600 	.word	0x016e3600
 8003484:	01a6ab1f 	.word	0x01a6ab1f
 8003488:	01e84800 	.word	0x01e84800

0800348c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f023 0201 	bic.w	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d106      	bne.n	80034fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	e00b      	b.n	8003514 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	e001      	b.n	8003514 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e003      	b.n	800351c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003514:	2032      	movs	r0, #50	; 0x32
 8003516:	f7fd f84f 	bl	80005b8 <HAL_Delay>

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003524:	b084      	sub	sp, #16
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e009      	b.n	8003558 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	3340      	adds	r3, #64	; 0x40
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	2200      	movs	r2, #0
 8003550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	3301      	adds	r3, #1
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b0e      	cmp	r3, #14
 800355c:	d9f2      	bls.n	8003544 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d11c      	bne.n	800359e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003572:	f043 0302 	orr.w	r3, r3, #2
 8003576:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	e005      	b.n	80035aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80035b0:	461a      	mov	r2, r3
 80035b2:	2300      	movs	r3, #0
 80035b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035bc:	4619      	mov	r1, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c4:	461a      	mov	r2, r3
 80035c6:	680b      	ldr	r3, [r1, #0]
 80035c8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80035ca:	2103      	movs	r1, #3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f93d 	bl	800384c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80035d2:	2110      	movs	r1, #16
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f8f1 	bl	80037bc <USB_FlushTxFifo>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f90f 	bl	8003808 <USB_FlushRxFifo>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fa:	461a      	mov	r2, r3
 80035fc:	2300      	movs	r3, #0
 80035fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003606:	461a      	mov	r2, r3
 8003608:	2300      	movs	r3, #0
 800360a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003612:	461a      	mov	r2, r3
 8003614:	2300      	movs	r3, #0
 8003616:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	e043      	b.n	80036a6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003634:	d118      	bne.n	8003668 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003648:	461a      	mov	r2, r3
 800364a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	e013      	b.n	800367a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365e:	461a      	mov	r2, r3
 8003660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e008      	b.n	800367a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	461a      	mov	r2, r3
 8003676:	2300      	movs	r3, #0
 8003678:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003686:	461a      	mov	r2, r3
 8003688:	2300      	movs	r3, #0
 800368a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003698:	461a      	mov	r2, r3
 800369a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800369e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	3301      	adds	r3, #1
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d3b7      	bcc.n	800361e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	e043      	b.n	800373c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ca:	d118      	bne.n	80036fe <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036de:	461a      	mov	r2, r3
 80036e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e013      	b.n	8003710 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f4:	461a      	mov	r2, r3
 80036f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	e008      	b.n	8003710 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370a:	461a      	mov	r2, r3
 800370c:	2300      	movs	r3, #0
 800370e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371c:	461a      	mov	r2, r3
 800371e:	2300      	movs	r3, #0
 8003720:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372e:	461a      	mov	r2, r3
 8003730:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003734:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	3301      	adds	r3, #1
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	429a      	cmp	r2, r3
 8003742:	d3b7      	bcc.n	80036b4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003756:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003764:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f043 0210 	orr.w	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <USB_DevInit+0x294>)
 8003778:	4313      	orrs	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800377e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f043 0208 	orr.w	r2, r3, #8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003792:	2b01      	cmp	r3, #1
 8003794:	d107      	bne.n	80037a6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037b2:	b004      	add	sp, #16
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	803c3800 	.word	0x803c3800

080037bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3301      	adds	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <USB_FlushTxFifo+0x48>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e006      	b.n	80037f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d0f0      	beq.n	80037d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	00030d40 	.word	0x00030d40

08003808 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2210      	movs	r2, #16
 8003818:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3301      	adds	r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <USB_FlushRxFifo+0x40>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e006      	b.n	800383a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b10      	cmp	r3, #16
 8003836:	d0f0      	beq.n	800381a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	00030d40 	.word	0x00030d40

0800384c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800387e:	b480      	push	{r7}
 8003880:	b087      	sub	sp, #28
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0306 	and.w	r3, r3, #6
 8003896:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d002      	beq.n	80038a4 <USB_GetDevSpeed+0x26>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d102      	bne.n	80038aa <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80038a4:	2302      	movs	r3, #2
 80038a6:	75fb      	strb	r3, [r7, #23]
 80038a8:	e001      	b.n	80038ae <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80038aa:	230f      	movs	r3, #15
 80038ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	371c      	adds	r7, #28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d13a      	bne.n	800394e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	2101      	movs	r1, #1
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	68f9      	ldr	r1, [r7, #12]
 80038f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d155      	bne.n	80039bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	78db      	ldrb	r3, [r3, #3]
 800392a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800392c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	059b      	lsls	r3, r3, #22
 8003932:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003934:	4313      	orrs	r3, r2
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	0151      	lsls	r1, r2, #5
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	440a      	add	r2, r1
 800393e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	e036      	b.n	80039bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f303 	lsl.w	r3, r1, r3
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	68f9      	ldr	r1, [r7, #12]
 8003968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11a      	bne.n	80039bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	78db      	ldrb	r3, [r3, #3]
 80039a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039a2:	430b      	orrs	r3, r1
 80039a4:	4313      	orrs	r3, r2
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d161      	bne.n	8003aac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039fe:	d11f      	bne.n	8003a40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	0151      	lsls	r1, r2, #5
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	440a      	add	r2, r1
 8003a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	0151      	lsls	r1, r2, #5
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	440a      	add	r2, r1
 8003a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	2101      	movs	r1, #1
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	68f9      	ldr	r1, [r7, #12]
 8003a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a60:	4013      	ands	r3, r2
 8003a62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	68f9      	ldr	r1, [r7, #12]
 8003a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a84:	4013      	ands	r3, r2
 8003a86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	0159      	lsls	r1, r3, #5
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	440b      	add	r3, r1
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4b35      	ldr	r3, [pc, #212]	; (8003b7c <USB_DeactivateEndpoint+0x1b0>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
 8003aaa:	e060      	b.n	8003b6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac2:	d11f      	bne.n	8003b04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	0151      	lsls	r1, r2, #5
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	440a      	add	r2, r1
 8003ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ade:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ae2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003afe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	2101      	movs	r1, #1
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	041b      	lsls	r3, r3, #16
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	68f9      	ldr	r1, [r7, #12]
 8003b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b24:	4013      	ands	r3, r2
 8003b26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	2101      	movs	r1, #1
 8003b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	43db      	mvns	r3, r3
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	0159      	lsls	r1, r3, #5
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	440b      	add	r3, r1
 8003b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b66:	4619      	mov	r1, r3
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <USB_DeactivateEndpoint+0x1b4>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	ec337800 	.word	0xec337800
 8003b80:	eff37800 	.word	0xeff37800

08003b84 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	f040 810a 	bne.w	8003db6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d132      	bne.n	8003c10 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	0151      	lsls	r1, r2, #5
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	440a      	add	r2, r1
 8003bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	0151      	lsls	r1, r2, #5
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	440a      	add	r2, r1
 8003be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	0151      	lsls	r1, r2, #5
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	440a      	add	r2, r1
 8003c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c08:	0cdb      	lsrs	r3, r3, #19
 8003c0a:	04db      	lsls	r3, r3, #19
 8003c0c:	6113      	str	r3, [r2, #16]
 8003c0e:	e074      	b.n	8003cfa <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	0151      	lsls	r1, r2, #5
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	440a      	add	r2, r1
 8003c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c2a:	0cdb      	lsrs	r3, r3, #19
 8003c2c:	04db      	lsls	r3, r3, #19
 8003c2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6959      	ldr	r1, [r3, #20]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	440b      	add	r3, r1
 8003c6c:	1e59      	subs	r1, r3, #1
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c76:	04d9      	lsls	r1, r3, #19
 8003c78:	4baf      	ldr	r3, [pc, #700]	; (8003f38 <USB_EPStartXfer+0x3b4>)
 8003c7a:	400b      	ands	r3, r1
 8003c7c:	6939      	ldr	r1, [r7, #16]
 8003c7e:	0148      	lsls	r0, r1, #5
 8003c80:	6979      	ldr	r1, [r7, #20]
 8003c82:	4401      	add	r1, r0
 8003c84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca2:	6939      	ldr	r1, [r7, #16]
 8003ca4:	0148      	lsls	r0, r1, #5
 8003ca6:	6979      	ldr	r1, [r7, #20]
 8003ca8:	4401      	add	r1, r0
 8003caa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	78db      	ldrb	r3, [r3, #3]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d11f      	bne.n	8003cfa <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	0151      	lsls	r1, r2, #5
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	440a      	add	r2, r1
 8003cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003cd8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cf8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d18:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	78db      	ldrb	r3, [r3, #3]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d015      	beq.n	8003d4e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8100 	beq.w	8003f2c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	6979      	ldr	r1, [r7, #20]
 8003d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	634b      	str	r3, [r1, #52]	; 0x34
 8003d4c:	e0ee      	b.n	8003f2c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d110      	bne.n	8003d80 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	0151      	lsls	r1, r2, #5
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	440a      	add	r2, r1
 8003d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00f      	b.n	8003da0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68d9      	ldr	r1, [r3, #12]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781a      	ldrb	r2, [r3, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f9e2 	bl	8004178 <USB_WritePacket>
 8003db4:	e0ba      	b.n	8003f2c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	0151      	lsls	r1, r2, #5
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	440a      	add	r2, r1
 8003dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd0:	0cdb      	lsrs	r3, r3, #19
 8003dd2:	04db      	lsls	r3, r3, #19
 8003dd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	0151      	lsls	r1, r2, #5
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	440a      	add	r2, r1
 8003dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003df4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003df8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d123      	bne.n	8003e4a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e18:	6939      	ldr	r1, [r7, #16]
 8003e1a:	0148      	lsls	r0, r1, #5
 8003e1c:	6979      	ldr	r1, [r7, #20]
 8003e1e:	4401      	add	r1, r0
 8003e20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e24:	4313      	orrs	r3, r2
 8003e26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e46:	6113      	str	r3, [r2, #16]
 8003e48:	e033      	b.n	8003eb2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	4413      	add	r3, r2
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	89fb      	ldrh	r3, [r7, #14]
 8003e70:	04d9      	lsls	r1, r3, #19
 8003e72:	4b31      	ldr	r3, [pc, #196]	; (8003f38 <USB_EPStartXfer+0x3b4>)
 8003e74:	400b      	ands	r3, r1
 8003e76:	6939      	ldr	r1, [r7, #16]
 8003e78:	0148      	lsls	r0, r1, #5
 8003e7a:	6979      	ldr	r1, [r7, #20]
 8003e7c:	4401      	add	r1, r0
 8003e7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e82:	4313      	orrs	r3, r2
 8003e84:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	89f9      	ldrh	r1, [r7, #14]
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea2:	6939      	ldr	r1, [r7, #16]
 8003ea4:	0148      	lsls	r0, r1, #5
 8003ea6:	6979      	ldr	r1, [r7, #20]
 8003ea8:	4401      	add	r1, r0
 8003eaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	78db      	ldrb	r3, [r3, #3]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d128      	bne.n	8003f0c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d110      	bne.n	8003eec <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e00f      	b.n	8003f0c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	1ff80000 	.word	0x1ff80000

08003f3c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	f040 80ab 	bne.w	80040b0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d132      	bne.n	8003fc8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc0:	0cdb      	lsrs	r3, r3, #19
 8003fc2:	04db      	lsls	r3, r3, #19
 8003fc4:	6113      	str	r3, [r2, #16]
 8003fc6:	e04e      	b.n	8004066 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe2:	0cdb      	lsrs	r3, r3, #19
 8003fe4:	04db      	lsls	r3, r3, #19
 8003fe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004002:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004006:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800400a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	d903      	bls.n	8004020 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800403e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	0148      	lsls	r0, r1, #5
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	4401      	add	r1, r0
 800405e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004062:	4313      	orrs	r3, r2
 8004064:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004080:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004084:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d06d      	beq.n	800416a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	68f9      	ldr	r1, [r7, #12]
 80040a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040aa:	4313      	orrs	r3, r2
 80040ac:	634b      	str	r3, [r1, #52]	; 0x34
 80040ae:	e05c      	b.n	800416a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ca:	0cdb      	lsrs	r3, r3, #19
 80040cc:	04db      	lsls	r3, r3, #19
 80040ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	0151      	lsls	r1, r2, #5
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	440a      	add	r2, r1
 80040e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	440a      	add	r2, r1
 800411a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800411e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004122:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	0148      	lsls	r0, r1, #5
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	4401      	add	r1, r0
 8004142:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004146:	4313      	orrs	r3, r2
 8004148:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	0151      	lsls	r1, r2, #5
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	440a      	add	r2, r1
 8004160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004164:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004168:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004178:	b480      	push	{r7}
 800417a:	b089      	sub	sp, #36	; 0x24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	460b      	mov	r3, r1
 8004188:	71fb      	strb	r3, [r7, #7]
 800418a:	4613      	mov	r3, r2
 800418c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004196:	88bb      	ldrh	r3, [r7, #4]
 8004198:	3303      	adds	r3, #3
 800419a:	089b      	lsrs	r3, r3, #2
 800419c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e00f      	b.n	80041c4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	031a      	lsls	r2, r3, #12
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b0:	461a      	mov	r2, r3
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	3304      	adds	r3, #4
 80041bc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	3301      	adds	r3, #1
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d3eb      	bcc.n	80041a4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3724      	adds	r7, #36	; 0x24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80041da:	b480      	push	{r7}
 80041dc:	b089      	sub	sp, #36	; 0x24
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	4613      	mov	r3, r2
 80041e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	3303      	adds	r3, #3
 80041f4:	089b      	lsrs	r3, r3, #2
 80041f6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	e00b      	b.n	8004216 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	601a      	str	r2, [r3, #0]
    pDest++;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3304      	adds	r3, #4
 800420e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	3301      	adds	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	429a      	cmp	r2, r3
 800421c:	d3ef      	bcc.n	80041fe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800421e:	69fb      	ldr	r3, [r7, #28]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3724      	adds	r7, #36	; 0x24
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d12c      	bne.n	80042a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	db12      	blt.n	8004280 <USB_EPSetStall+0x54>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00f      	beq.n	8004280 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	0151      	lsls	r1, r2, #5
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	440a      	add	r2, r1
 8004276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800427e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	0151      	lsls	r1, r2, #5
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	440a      	add	r2, r1
 8004296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e02b      	b.n	80042fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	db12      	blt.n	80042da <USB_EPSetStall+0xae>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00f      	beq.n	80042da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d128      	bne.n	8004376 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	440a      	add	r2, r1
 800433a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800433e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004342:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	78db      	ldrb	r3, [r3, #3]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d003      	beq.n	8004354 <USB_EPClearStall+0x4c>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	78db      	ldrb	r3, [r3, #3]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d138      	bne.n	80043c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e027      	b.n	80043c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004390:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004394:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	78db      	ldrb	r3, [r3, #3]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d003      	beq.n	80043a6 <USB_EPClearStall+0x9e>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	78db      	ldrb	r3, [r3, #3]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d10f      	bne.n	80043c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	0151      	lsls	r1, r2, #5
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	440a      	add	r2, r1
 80043bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004408:	68f9      	ldr	r1, [r7, #12]
 800440a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800443a:	f023 0303 	bic.w	r3, r3, #3
 800443e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800444e:	f023 0302 	bic.w	r3, r3, #2
 8004452:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004462:	b480      	push	{r7}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800447c:	f023 0303 	bic.w	r3, r3, #3
 8004480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004490:	f043 0302 	orr.w	r3, r3, #2
 8004494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4013      	ands	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80044bc:	68fb      	ldr	r3, [r7, #12]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	0c1b      	lsrs	r3, r3, #16
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	b29b      	uxth	r3, r3
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004560:	68bb      	ldr	r3, [r7, #8]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800456e:	b480      	push	{r7}
 8004570:	b087      	sub	sp, #28
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	fa22 f303 	lsr.w	r3, r2, r3
 800459e:	01db      	lsls	r3, r3, #7
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4013      	ands	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045bc:	68bb      	ldr	r3, [r7, #8]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0301 	and.w	r3, r3, #1
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004600:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004604:	f023 0307 	bic.w	r3, r3, #7
 8004608:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	333c      	adds	r3, #60	; 0x3c
 800463e:	3304      	adds	r3, #4
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4a1c      	ldr	r2, [pc, #112]	; (80046b8 <USB_EP0_OutStart+0x8c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d90a      	bls.n	8004662 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800465c:	d101      	bne.n	8004662 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e024      	b.n	80046ac <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	461a      	mov	r2, r3
 800466a:	2300      	movs	r3, #0
 800466c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004680:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004690:	f043 0318 	orr.w	r3, r3, #24
 8004694:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80046a8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	4f54300a 	.word	0x4f54300a

080046bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3301      	adds	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <USB_CoreReset+0x64>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e01b      	b.n	8004712 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	daf2      	bge.n	80046c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3301      	adds	r3, #1
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a09      	ldr	r2, [pc, #36]	; (8004720 <USB_CoreReset+0x64>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e006      	b.n	8004712 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d0f0      	beq.n	80046f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	00030d40 	.word	0x00030d40

08004724 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004730:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004734:	f002 fb44 	bl	8006dc0 <USBD_static_malloc>
 8004738:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d105      	bne.n	800474c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004748:	2302      	movs	r3, #2
 800474a:	e066      	b.n	800481a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7c1b      	ldrb	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d119      	bne.n	8004790 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800475c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004760:	2202      	movs	r2, #2
 8004762:	2181      	movs	r1, #129	; 0x81
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f002 f917 	bl	8006998 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004774:	2202      	movs	r2, #2
 8004776:	2101      	movs	r1, #1
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f002 f90d 	bl	8006998 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2210      	movs	r2, #16
 800478a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800478e:	e016      	b.n	80047be <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004790:	2340      	movs	r3, #64	; 0x40
 8004792:	2202      	movs	r2, #2
 8004794:	2181      	movs	r1, #129	; 0x81
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f002 f8fe 	bl	8006998 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80047a2:	2340      	movs	r3, #64	; 0x40
 80047a4:	2202      	movs	r2, #2
 80047a6:	2101      	movs	r1, #1
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f002 f8f5 	bl	8006998 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2210      	movs	r2, #16
 80047ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80047be:	2308      	movs	r3, #8
 80047c0:	2203      	movs	r2, #3
 80047c2:	2182      	movs	r1, #130	; 0x82
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f002 f8e7 	bl	8006998 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	7c1b      	ldrb	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047fe:	2101      	movs	r1, #1
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f002 fa43 	bl	8006c8c <USBD_LL_PrepareReceive>
 8004806:	e007      	b.n	8004818 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800480e:	2340      	movs	r3, #64	; 0x40
 8004810:	2101      	movs	r1, #1
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f002 fa3a 	bl	8006c8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800482e:	2181      	movs	r1, #129	; 0x81
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f002 f8ef 	bl	8006a14 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800483c:	2101      	movs	r1, #1
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f002 f8e8 	bl	8006a14 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800484c:	2182      	movs	r1, #130	; 0x82
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f002 f8e0 	bl	8006a14 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00e      	beq.n	800488c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800487e:	4618      	mov	r0, r3
 8004880:	f002 faac 	bl	8006ddc <USBD_static_free>
    pdev->pClassData = NULL;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0af      	b.n	8004a20 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d03f      	beq.n	800494c <USBD_CDC_Setup+0xb4>
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	f040 809f 	bne.w	8004a10 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	88db      	ldrh	r3, [r3, #6]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d02e      	beq.n	8004938 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	da16      	bge.n	8004912 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80048f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	88d2      	ldrh	r2, [r2, #6]
 80048f6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	88db      	ldrh	r3, [r3, #6]
 80048fc:	2b07      	cmp	r3, #7
 80048fe:	bf28      	it	cs
 8004900:	2307      	movcs	r3, #7
 8004902:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	89fa      	ldrh	r2, [r7, #14]
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 fb43 	bl	8005f96 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004910:	e085      	b.n	8004a1e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	785a      	ldrb	r2, [r3, #1]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	88db      	ldrh	r3, [r3, #6]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004928:	6939      	ldr	r1, [r7, #16]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	88db      	ldrh	r3, [r3, #6]
 800492e:	461a      	mov	r2, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f001 fb5c 	bl	8005fee <USBD_CtlPrepareRx>
      break;
 8004936:	e072      	b.n	8004a1e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	7850      	ldrb	r0, [r2, #1]
 8004944:	2200      	movs	r2, #0
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	4798      	blx	r3
      break;
 800494a:	e068      	b.n	8004a1e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	2b0b      	cmp	r3, #11
 8004952:	d852      	bhi.n	80049fa <USBD_CDC_Setup+0x162>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <USBD_CDC_Setup+0xc4>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	0800498d 	.word	0x0800498d
 8004960:	08004a09 	.word	0x08004a09
 8004964:	080049fb 	.word	0x080049fb
 8004968:	080049fb 	.word	0x080049fb
 800496c:	080049fb 	.word	0x080049fb
 8004970:	080049fb 	.word	0x080049fb
 8004974:	080049fb 	.word	0x080049fb
 8004978:	080049fb 	.word	0x080049fb
 800497c:	080049fb 	.word	0x080049fb
 8004980:	080049fb 	.word	0x080049fb
 8004984:	080049b7 	.word	0x080049b7
 8004988:	080049e1 	.word	0x080049e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b03      	cmp	r3, #3
 8004996:	d107      	bne.n	80049a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004998:	f107 030a 	add.w	r3, r7, #10
 800499c:	2202      	movs	r2, #2
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 faf8 	bl	8005f96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049a6:	e032      	b.n	8004a0e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80049a8:	6839      	ldr	r1, [r7, #0]
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f001 fa82 	bl	8005eb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80049b0:	2303      	movs	r3, #3
 80049b2:	75fb      	strb	r3, [r7, #23]
          break;
 80049b4:	e02b      	b.n	8004a0e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d107      	bne.n	80049d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80049c2:	f107 030d 	add.w	r3, r7, #13
 80049c6:	2201      	movs	r2, #1
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f001 fae3 	bl	8005f96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049d0:	e01d      	b.n	8004a0e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80049d2:	6839      	ldr	r1, [r7, #0]
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f001 fa6d 	bl	8005eb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80049da:	2303      	movs	r3, #3
 80049dc:	75fb      	strb	r3, [r7, #23]
          break;
 80049de:	e016      	b.n	8004a0e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d00f      	beq.n	8004a0c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f001 fa60 	bl	8005eb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80049f4:	2303      	movs	r3, #3
 80049f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80049f8:	e008      	b.n	8004a0c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f001 fa59 	bl	8005eb4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a02:	2303      	movs	r3, #3
 8004a04:	75fb      	strb	r3, [r7, #23]
          break;
 8004a06:	e002      	b.n	8004a0e <USBD_CDC_Setup+0x176>
          break;
 8004a08:	bf00      	nop
 8004a0a:	e008      	b.n	8004a1e <USBD_CDC_Setup+0x186>
          break;
 8004a0c:	bf00      	nop
      }
      break;
 8004a0e:	e006      	b.n	8004a1e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f001 fa4e 	bl	8005eb4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004a3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e04f      	b.n	8004aea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	3318      	adds	r3, #24
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d029      	beq.n	8004abc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	3318      	adds	r3, #24
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	78f9      	ldrb	r1, [r7, #3]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	1a5b      	subs	r3, r3, r1
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4403      	add	r3, r0
 8004a88:	3344      	adds	r3, #68	; 0x44
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a90:	fb03 f301 	mul.w	r3, r3, r1
 8004a94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d110      	bne.n	8004abc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3318      	adds	r3, #24
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004aae:	78f9      	ldrb	r1, [r7, #3]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f002 f8b1 	bl	8006c1c <USBD_LL_Transmit>
 8004aba:	e015      	b.n	8004ae8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004ae4:	78fa      	ldrb	r2, [r7, #3]
 8004ae6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	460b      	mov	r3, r1
 8004afc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e015      	b.n	8004b40 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	4619      	mov	r1, r3
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f002 f8ef 	bl	8006cfc <USBD_LL_GetRxDataSize>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e01b      	b.n	8004b9a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <USBD_CDC_EP0_RxReady+0x50>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b72:	2bff      	cmp	r3, #255	; 0xff
 8004b74:	d010      	beq.n	8004b98 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004b84:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b8c:	b292      	uxth	r2, r2
 8004b8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	22ff      	movs	r2, #255	; 0xff
 8004b94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2243      	movs	r2, #67	; 0x43
 8004bb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004bb2:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	20000094 	.word	0x20000094

08004bc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2243      	movs	r2, #67	; 0x43
 8004bd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004bd2:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000050 	.word	0x20000050

08004be4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2243      	movs	r2, #67	; 0x43
 8004bf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004bf2:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	200000d8 	.word	0x200000d8

08004c04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	220a      	movs	r2, #10
 8004c10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004c12:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	2000000c 	.word	0x2000000c

08004c24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e004      	b.n	8004c42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b087      	sub	sp, #28
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e008      	b.n	8004c7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e004      	b.n	8004cb0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e01a      	b.n	8004d14 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d114      	bne.n	8004d12 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004d06:	2181      	movs	r1, #129	; 0x81
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f001 ff87 	bl	8006c1c <USBD_LL_Transmit>

    ret = USBD_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e016      	b.n	8004d68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	7c1b      	ldrb	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d109      	bne.n	8004d56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 ff9c 	bl	8006c8c <USBD_LL_PrepareReceive>
 8004d54:	e007      	b.n	8004d66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d5c:	2340      	movs	r3, #64	; 0x40
 8004d5e:	2101      	movs	r1, #1
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f001 ff93 	bl	8006c8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e01f      	b.n	8004dc8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	79fa      	ldrb	r2, [r7, #7]
 8004dba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f001 fd6d 	bl	800689c <USBD_LL_Init>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e016      	b.n	8004e16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00b      	beq.n	8004e14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	f107 020e 	add.w	r2, r7, #14
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4798      	blx	r3
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f001 fd84 	bl	8006934 <USBD_LL_Start>
 8004e2c:	4603      	mov	r3, r0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	4611      	mov	r1, r2
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
  }

  return USBD_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ec4:	6839      	ldr	r1, [r7, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 ffba 	bl	8005e40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d01a      	beq.n	8004f26 <USBD_LL_SetupStage+0x72>
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d822      	bhi.n	8004f3a <USBD_LL_SetupStage+0x86>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <USBD_LL_SetupStage+0x4a>
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d00a      	beq.n	8004f12 <USBD_LL_SetupStage+0x5e>
 8004efc:	e01d      	b.n	8004f3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fa62 	bl	80053d0 <USBD_StdDevReq>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f10:	e020      	b.n	8004f54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fac6 	bl	80054ac <USBD_StdItfReq>
 8004f20:	4603      	mov	r3, r0
 8004f22:	73fb      	strb	r3, [r7, #15]
      break;
 8004f24:	e016      	b.n	8004f54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fb05 	bl	800553e <USBD_StdEPReq>
 8004f34:	4603      	mov	r3, r0
 8004f36:	73fb      	strb	r3, [r7, #15]
      break;
 8004f38:	e00c      	b.n	8004f54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 fd99 	bl	8006a80 <USBD_LL_StallEP>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	73fb      	strb	r3, [r7, #15]
      break;
 8004f52:	bf00      	nop
  }

  return ret;
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	460b      	mov	r3, r1
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004f6c:	7afb      	ldrb	r3, [r7, #11]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d138      	bne.n	8004fe4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004f78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d14a      	bne.n	800501a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d913      	bls.n	8004fb8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	1ad2      	subs	r2, r2, r3
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	bf28      	it	cs
 8004faa:	4613      	movcs	r3, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f001 f839 	bl	8006028 <USBD_CtlContinueRx>
 8004fb6:	e030      	b.n	800501a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d10b      	bne.n	8004fdc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f001 f834 	bl	800604a <USBD_CtlSendStatus>
 8004fe2:	e01a      	b.n	800501a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d114      	bne.n	800501a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00e      	beq.n	800501a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	7afa      	ldrb	r2, [r7, #11]
 8005006:	4611      	mov	r1, r2
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	4798      	blx	r3
 800500c:	4603      	mov	r3, r0
 800500e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005010:	7dfb      	ldrb	r3, [r7, #23]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	e000      	b.n	800501c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	460b      	mov	r3, r1
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005032:	7afb      	ldrb	r3, [r7, #11]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d16b      	bne.n	8005110 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3314      	adds	r3, #20
 800503c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005044:	2b02      	cmp	r3, #2
 8005046:	d156      	bne.n	80050f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	429a      	cmp	r2, r3
 8005052:	d914      	bls.n	800507e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	1ad2      	subs	r2, r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	461a      	mov	r2, r3
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 ffae 	bl	8005fcc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005070:	2300      	movs	r3, #0
 8005072:	2200      	movs	r2, #0
 8005074:	2100      	movs	r1, #0
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f001 fe08 	bl	8006c8c <USBD_LL_PrepareReceive>
 800507c:	e03b      	b.n	80050f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	d11c      	bne.n	80050c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005092:	429a      	cmp	r2, r3
 8005094:	d316      	bcc.n	80050c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d20f      	bcs.n	80050c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80050a4:	2200      	movs	r2, #0
 80050a6:	2100      	movs	r1, #0
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 ff8f 	bl	8005fcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050b6:	2300      	movs	r3, #0
 80050b8:	2200      	movs	r2, #0
 80050ba:	2100      	movs	r1, #0
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f001 fde5 	bl	8006c8c <USBD_LL_PrepareReceive>
 80050c2:	e018      	b.n	80050f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d10b      	bne.n	80050e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80050e8:	2180      	movs	r1, #128	; 0x80
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f001 fcc8 	bl	8006a80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 ffbd 	bl	8006070 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d122      	bne.n	8005146 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f7ff fe98 	bl	8004e36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800510e:	e01a      	b.n	8005146 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b03      	cmp	r3, #3
 800511a:	d114      	bne.n	8005146 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	7afa      	ldrb	r2, [r7, #11]
 8005132:	4611      	mov	r1, r2
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	4798      	blx	r3
 8005138:	4603      	mov	r3, r0
 800513a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800513c:	7dfb      	ldrb	r3, [r7, #23]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005142:	7dfb      	ldrb	r3, [r7, #23]
 8005144:	e000      	b.n	8005148 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005180:	2303      	movs	r3, #3
 8005182:	e02f      	b.n	80051e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00f      	beq.n	80051ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6852      	ldr	r2, [r2, #4]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	4611      	mov	r1, r2
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051ae:	2340      	movs	r3, #64	; 0x40
 80051b0:	2200      	movs	r2, #0
 80051b2:	2100      	movs	r1, #0
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 fbef 	bl	8006998 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2240      	movs	r2, #64	; 0x40
 80051c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051ca:	2340      	movs	r3, #64	; 0x40
 80051cc:	2200      	movs	r2, #0
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f001 fbe1 	bl	8006998 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2240      	movs	r2, #64	; 0x40
 80051e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800521a:	b2da      	uxtb	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2204      	movs	r2, #4
 8005226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b04      	cmp	r3, #4
 800524a:	d106      	bne.n	800525a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005252:	b2da      	uxtb	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800527a:	2303      	movs	r3, #3
 800527c:	e012      	b.n	80052a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b03      	cmp	r3, #3
 8005288:	d10b      	bne.n	80052a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e014      	b.n	80052f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d10d      	bne.n	80052ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	4611      	mov	r1, r2
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800530e:	2303      	movs	r3, #3
 8005310:	e014      	b.n	800533c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b03      	cmp	r3, #3
 800531c:	d10d      	bne.n	800533a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	4611      	mov	r1, r2
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d009      	beq.n	8005388 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6852      	ldr	r2, [r2, #4]
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	4611      	mov	r1, r2
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
  }

  return USBD_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005392:	b480      	push	{r7}
 8005394:	b087      	sub	sp, #28
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3301      	adds	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80053b0:	8a3b      	ldrh	r3, [r7, #16]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	b21a      	sxth	r2, r3
 80053b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	b21b      	sxth	r3, r3
 80053be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80053c0:	89fb      	ldrh	r3, [r7, #14]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d005      	beq.n	80053f6 <USBD_StdDevReq+0x26>
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d853      	bhi.n	8005496 <USBD_StdDevReq+0xc6>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <USBD_StdDevReq+0x3a>
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d14f      	bne.n	8005496 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	4798      	blx	r3
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
      break;
 8005408:	e04a      	b.n	80054a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b09      	cmp	r3, #9
 8005410:	d83b      	bhi.n	800548a <USBD_StdDevReq+0xba>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <USBD_StdDevReq+0x48>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	0800546d 	.word	0x0800546d
 800541c:	08005481 	.word	0x08005481
 8005420:	0800548b 	.word	0x0800548b
 8005424:	08005477 	.word	0x08005477
 8005428:	0800548b 	.word	0x0800548b
 800542c:	0800544b 	.word	0x0800544b
 8005430:	08005441 	.word	0x08005441
 8005434:	0800548b 	.word	0x0800548b
 8005438:	08005463 	.word	0x08005463
 800543c:	08005455 	.word	0x08005455
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f9de 	bl	8005804 <USBD_GetDescriptor>
          break;
 8005448:	e024      	b.n	8005494 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fb6d 	bl	8005b2c <USBD_SetAddress>
          break;
 8005452:	e01f      	b.n	8005494 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005454:	6839      	ldr	r1, [r7, #0]
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fbac 	bl	8005bb4 <USBD_SetConfig>
 800545c:	4603      	mov	r3, r0
 800545e:	73fb      	strb	r3, [r7, #15]
          break;
 8005460:	e018      	b.n	8005494 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fc4b 	bl	8005d00 <USBD_GetConfig>
          break;
 800546a:	e013      	b.n	8005494 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fc7c 	bl	8005d6c <USBD_GetStatus>
          break;
 8005474:	e00e      	b.n	8005494 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fcab 	bl	8005dd4 <USBD_SetFeature>
          break;
 800547e:	e009      	b.n	8005494 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fcba 	bl	8005dfc <USBD_ClrFeature>
          break;
 8005488:	e004      	b.n	8005494 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fd11 	bl	8005eb4 <USBD_CtlError>
          break;
 8005492:	bf00      	nop
      }
      break;
 8005494:	e004      	b.n	80054a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fd0b 	bl	8005eb4 <USBD_CtlError>
      break;
 800549e:	bf00      	nop
  }

  return ret;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop

080054ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d005      	beq.n	80054d2 <USBD_StdItfReq+0x26>
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d82f      	bhi.n	800552a <USBD_StdItfReq+0x7e>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <USBD_StdItfReq+0x26>
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d12b      	bne.n	800552a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d81d      	bhi.n	800551c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	889b      	ldrh	r3, [r3, #4]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d813      	bhi.n	8005512 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	6839      	ldr	r1, [r7, #0]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	88db      	ldrh	r3, [r3, #6]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d110      	bne.n	8005526 <USBD_StdItfReq+0x7a>
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10d      	bne.n	8005526 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fd9d 	bl	800604a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005510:	e009      	b.n	8005526 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fccd 	bl	8005eb4 <USBD_CtlError>
          break;
 800551a:	e004      	b.n	8005526 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fcc8 	bl	8005eb4 <USBD_CtlError>
          break;
 8005524:	e000      	b.n	8005528 <USBD_StdItfReq+0x7c>
          break;
 8005526:	bf00      	nop
      }
      break;
 8005528:	e004      	b.n	8005534 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fcc1 	bl	8005eb4 <USBD_CtlError>
      break;
 8005532:	bf00      	nop
  }

  return ret;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	889b      	ldrh	r3, [r3, #4]
 8005550:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d007      	beq.n	800556e <USBD_StdEPReq+0x30>
 800555e:	2b40      	cmp	r3, #64	; 0x40
 8005560:	f200 8145 	bhi.w	80057ee <USBD_StdEPReq+0x2b0>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00c      	beq.n	8005582 <USBD_StdEPReq+0x44>
 8005568:	2b20      	cmp	r3, #32
 800556a:	f040 8140 	bne.w	80057ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	4798      	blx	r3
 800557c:	4603      	mov	r3, r0
 800557e:	73fb      	strb	r3, [r7, #15]
      break;
 8005580:	e13a      	b.n	80057f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d007      	beq.n	800559a <USBD_StdEPReq+0x5c>
 800558a:	2b03      	cmp	r3, #3
 800558c:	f300 8129 	bgt.w	80057e2 <USBD_StdEPReq+0x2a4>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d07f      	beq.n	8005694 <USBD_StdEPReq+0x156>
 8005594:	2b01      	cmp	r3, #1
 8005596:	d03c      	beq.n	8005612 <USBD_StdEPReq+0xd4>
 8005598:	e123      	b.n	80057e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d002      	beq.n	80055ac <USBD_StdEPReq+0x6e>
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d016      	beq.n	80055d8 <USBD_StdEPReq+0x9a>
 80055aa:	e02c      	b.n	8005606 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055ac:	7bbb      	ldrb	r3, [r7, #14]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00d      	beq.n	80055ce <USBD_StdEPReq+0x90>
 80055b2:	7bbb      	ldrb	r3, [r7, #14]
 80055b4:	2b80      	cmp	r3, #128	; 0x80
 80055b6:	d00a      	beq.n	80055ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80055b8:	7bbb      	ldrb	r3, [r7, #14]
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 fa5f 	bl	8006a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 fa5b 	bl	8006a80 <USBD_LL_StallEP>
 80055ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80055cc:	e020      	b.n	8005610 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80055ce:	6839      	ldr	r1, [r7, #0]
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fc6f 	bl	8005eb4 <USBD_CtlError>
              break;
 80055d6:	e01b      	b.n	8005610 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	885b      	ldrh	r3, [r3, #2]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10e      	bne.n	80055fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80055e0:	7bbb      	ldrb	r3, [r7, #14]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <USBD_StdEPReq+0xc0>
 80055e6:	7bbb      	ldrb	r3, [r7, #14]
 80055e8:	2b80      	cmp	r3, #128	; 0x80
 80055ea:	d008      	beq.n	80055fe <USBD_StdEPReq+0xc0>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	88db      	ldrh	r3, [r3, #6]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80055f4:	7bbb      	ldrb	r3, [r7, #14]
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 fa41 	bl	8006a80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fd23 	bl	800604a <USBD_CtlSendStatus>

              break;
 8005604:	e004      	b.n	8005610 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fc53 	bl	8005eb4 <USBD_CtlError>
              break;
 800560e:	bf00      	nop
          }
          break;
 8005610:	e0ec      	b.n	80057ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d002      	beq.n	8005624 <USBD_StdEPReq+0xe6>
 800561e:	2b03      	cmp	r3, #3
 8005620:	d016      	beq.n	8005650 <USBD_StdEPReq+0x112>
 8005622:	e030      	b.n	8005686 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005624:	7bbb      	ldrb	r3, [r7, #14]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00d      	beq.n	8005646 <USBD_StdEPReq+0x108>
 800562a:	7bbb      	ldrb	r3, [r7, #14]
 800562c:	2b80      	cmp	r3, #128	; 0x80
 800562e:	d00a      	beq.n	8005646 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005630:	7bbb      	ldrb	r3, [r7, #14]
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f001 fa23 	bl	8006a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800563a:	2180      	movs	r1, #128	; 0x80
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 fa1f 	bl	8006a80 <USBD_LL_StallEP>
 8005642:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005644:	e025      	b.n	8005692 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fc33 	bl	8005eb4 <USBD_CtlError>
              break;
 800564e:	e020      	b.n	8005692 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	885b      	ldrh	r3, [r3, #2]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11b      	bne.n	8005690 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005658:	7bbb      	ldrb	r3, [r7, #14]
 800565a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 fa40 	bl	8006aec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fcec 	bl	800604a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
 8005680:	4603      	mov	r3, r0
 8005682:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005684:	e004      	b.n	8005690 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fc13 	bl	8005eb4 <USBD_CtlError>
              break;
 800568e:	e000      	b.n	8005692 <USBD_StdEPReq+0x154>
              break;
 8005690:	bf00      	nop
          }
          break;
 8005692:	e0ab      	b.n	80057ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d002      	beq.n	80056a6 <USBD_StdEPReq+0x168>
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d032      	beq.n	800570a <USBD_StdEPReq+0x1cc>
 80056a4:	e097      	b.n	80057d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056a6:	7bbb      	ldrb	r3, [r7, #14]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <USBD_StdEPReq+0x17e>
 80056ac:	7bbb      	ldrb	r3, [r7, #14]
 80056ae:	2b80      	cmp	r3, #128	; 0x80
 80056b0:	d004      	beq.n	80056bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fbfd 	bl	8005eb4 <USBD_CtlError>
                break;
 80056ba:	e091      	b.n	80057e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	da0b      	bge.n	80056dc <USBD_StdEPReq+0x19e>
 80056c4:	7bbb      	ldrb	r3, [r7, #14]
 80056c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	3310      	adds	r3, #16
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	4413      	add	r3, r2
 80056d8:	3304      	adds	r3, #4
 80056da:	e00b      	b.n	80056f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80056dc:	7bbb      	ldrb	r3, [r7, #14]
 80056de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	4413      	add	r3, r2
 80056f2:	3304      	adds	r3, #4
 80056f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2202      	movs	r2, #2
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fc47 	bl	8005f96 <USBD_CtlSendData>
              break;
 8005708:	e06a      	b.n	80057e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800570a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800570e:	2b00      	cmp	r3, #0
 8005710:	da11      	bge.n	8005736 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005712:	7bbb      	ldrb	r3, [r7, #14]
 8005714:	f003 020f 	and.w	r2, r3, #15
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	3324      	adds	r3, #36	; 0x24
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d117      	bne.n	800575c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fbc0 	bl	8005eb4 <USBD_CtlError>
                  break;
 8005734:	e054      	b.n	80057e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005736:	7bbb      	ldrb	r3, [r7, #14]
 8005738:	f003 020f 	and.w	r2, r3, #15
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fbad 	bl	8005eb4 <USBD_CtlError>
                  break;
 800575a:	e041      	b.n	80057e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800575c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005760:	2b00      	cmp	r3, #0
 8005762:	da0b      	bge.n	800577c <USBD_StdEPReq+0x23e>
 8005764:	7bbb      	ldrb	r3, [r7, #14]
 8005766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	3310      	adds	r3, #16
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4413      	add	r3, r2
 8005778:	3304      	adds	r3, #4
 800577a:	e00b      	b.n	8005794 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800577c:	7bbb      	ldrb	r3, [r7, #14]
 800577e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	3304      	adds	r3, #4
 8005794:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005796:	7bbb      	ldrb	r3, [r7, #14]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <USBD_StdEPReq+0x264>
 800579c:	7bbb      	ldrb	r3, [r7, #14]
 800579e:	2b80      	cmp	r3, #128	; 0x80
 80057a0:	d103      	bne.n	80057aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e00e      	b.n	80057c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 f9d2 	bl	8006b58 <USBD_LL_IsStallEP>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2201      	movs	r2, #1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	e002      	b.n	80057c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2202      	movs	r2, #2
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fbe1 	bl	8005f96 <USBD_CtlSendData>
              break;
 80057d4:	e004      	b.n	80057e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fb6b 	bl	8005eb4 <USBD_CtlError>
              break;
 80057de:	bf00      	nop
          }
          break;
 80057e0:	e004      	b.n	80057ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fb65 	bl	8005eb4 <USBD_CtlError>
          break;
 80057ea:	bf00      	nop
      }
      break;
 80057ec:	e004      	b.n	80057f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fb5f 	bl	8005eb4 <USBD_CtlError>
      break;
 80057f6:	bf00      	nop
  }

  return ret;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	885b      	ldrh	r3, [r3, #2]
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	2b0e      	cmp	r3, #14
 8005826:	f200 8152 	bhi.w	8005ace <USBD_GetDescriptor+0x2ca>
 800582a:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <USBD_GetDescriptor+0x2c>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	080058a1 	.word	0x080058a1
 8005834:	080058b9 	.word	0x080058b9
 8005838:	080058f9 	.word	0x080058f9
 800583c:	08005acf 	.word	0x08005acf
 8005840:	08005acf 	.word	0x08005acf
 8005844:	08005a6f 	.word	0x08005a6f
 8005848:	08005a9b 	.word	0x08005a9b
 800584c:	08005acf 	.word	0x08005acf
 8005850:	08005acf 	.word	0x08005acf
 8005854:	08005acf 	.word	0x08005acf
 8005858:	08005acf 	.word	0x08005acf
 800585c:	08005acf 	.word	0x08005acf
 8005860:	08005acf 	.word	0x08005acf
 8005864:	08005acf 	.word	0x08005acf
 8005868:	0800586d 	.word	0x0800586d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00b      	beq.n	8005890 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	7c12      	ldrb	r2, [r2, #16]
 8005884:	f107 0108 	add.w	r1, r7, #8
 8005888:	4610      	mov	r0, r2
 800588a:	4798      	blx	r3
 800588c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800588e:	e126      	b.n	8005ade <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fb0e 	bl	8005eb4 <USBD_CtlError>
        err++;
 8005898:	7afb      	ldrb	r3, [r7, #11]
 800589a:	3301      	adds	r3, #1
 800589c:	72fb      	strb	r3, [r7, #11]
      break;
 800589e:	e11e      	b.n	8005ade <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	7c12      	ldrb	r2, [r2, #16]
 80058ac:	f107 0108 	add.w	r1, r7, #8
 80058b0:	4610      	mov	r0, r2
 80058b2:	4798      	blx	r3
 80058b4:	60f8      	str	r0, [r7, #12]
      break;
 80058b6:	e112      	b.n	8005ade <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	7c1b      	ldrb	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10d      	bne.n	80058dc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f107 0208 	add.w	r2, r7, #8
 80058cc:	4610      	mov	r0, r2
 80058ce:	4798      	blx	r3
 80058d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3301      	adds	r3, #1
 80058d6:	2202      	movs	r2, #2
 80058d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80058da:	e100      	b.n	8005ade <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	f107 0208 	add.w	r2, r7, #8
 80058e8:	4610      	mov	r0, r2
 80058ea:	4798      	blx	r3
 80058ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	2202      	movs	r2, #2
 80058f4:	701a      	strb	r2, [r3, #0]
      break;
 80058f6:	e0f2      	b.n	8005ade <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	885b      	ldrh	r3, [r3, #2]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b05      	cmp	r3, #5
 8005900:	f200 80ac 	bhi.w	8005a5c <USBD_GetDescriptor+0x258>
 8005904:	a201      	add	r2, pc, #4	; (adr r2, 800590c <USBD_GetDescriptor+0x108>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	08005925 	.word	0x08005925
 8005910:	08005959 	.word	0x08005959
 8005914:	0800598d 	.word	0x0800598d
 8005918:	080059c1 	.word	0x080059c1
 800591c:	080059f5 	.word	0x080059f5
 8005920:	08005a29 	.word	0x08005a29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00b      	beq.n	8005948 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	7c12      	ldrb	r2, [r2, #16]
 800593c:	f107 0108 	add.w	r1, r7, #8
 8005940:	4610      	mov	r0, r2
 8005942:	4798      	blx	r3
 8005944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005946:	e091      	b.n	8005a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fab2 	bl	8005eb4 <USBD_CtlError>
            err++;
 8005950:	7afb      	ldrb	r3, [r7, #11]
 8005952:	3301      	adds	r3, #1
 8005954:	72fb      	strb	r3, [r7, #11]
          break;
 8005956:	e089      	b.n	8005a6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	7c12      	ldrb	r2, [r2, #16]
 8005970:	f107 0108 	add.w	r1, r7, #8
 8005974:	4610      	mov	r0, r2
 8005976:	4798      	blx	r3
 8005978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800597a:	e077      	b.n	8005a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa98 	bl	8005eb4 <USBD_CtlError>
            err++;
 8005984:	7afb      	ldrb	r3, [r7, #11]
 8005986:	3301      	adds	r3, #1
 8005988:	72fb      	strb	r3, [r7, #11]
          break;
 800598a:	e06f      	b.n	8005a6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	7c12      	ldrb	r2, [r2, #16]
 80059a4:	f107 0108 	add.w	r1, r7, #8
 80059a8:	4610      	mov	r0, r2
 80059aa:	4798      	blx	r3
 80059ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059ae:	e05d      	b.n	8005a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa7e 	bl	8005eb4 <USBD_CtlError>
            err++;
 80059b8:	7afb      	ldrb	r3, [r7, #11]
 80059ba:	3301      	adds	r3, #1
 80059bc:	72fb      	strb	r3, [r7, #11]
          break;
 80059be:	e055      	b.n	8005a6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	7c12      	ldrb	r2, [r2, #16]
 80059d8:	f107 0108 	add.w	r1, r7, #8
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059e2:	e043      	b.n	8005a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fa64 	bl	8005eb4 <USBD_CtlError>
            err++;
 80059ec:	7afb      	ldrb	r3, [r7, #11]
 80059ee:	3301      	adds	r3, #1
 80059f0:	72fb      	strb	r3, [r7, #11]
          break;
 80059f2:	e03b      	b.n	8005a6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	7c12      	ldrb	r2, [r2, #16]
 8005a0c:	f107 0108 	add.w	r1, r7, #8
 8005a10:	4610      	mov	r0, r2
 8005a12:	4798      	blx	r3
 8005a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a16:	e029      	b.n	8005a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa4a 	bl	8005eb4 <USBD_CtlError>
            err++;
 8005a20:	7afb      	ldrb	r3, [r7, #11]
 8005a22:	3301      	adds	r3, #1
 8005a24:	72fb      	strb	r3, [r7, #11]
          break;
 8005a26:	e021      	b.n	8005a6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	7c12      	ldrb	r2, [r2, #16]
 8005a40:	f107 0108 	add.w	r1, r7, #8
 8005a44:	4610      	mov	r0, r2
 8005a46:	4798      	blx	r3
 8005a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a4a:	e00f      	b.n	8005a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005a4c:	6839      	ldr	r1, [r7, #0]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa30 	bl	8005eb4 <USBD_CtlError>
            err++;
 8005a54:	7afb      	ldrb	r3, [r7, #11]
 8005a56:	3301      	adds	r3, #1
 8005a58:	72fb      	strb	r3, [r7, #11]
          break;
 8005a5a:	e007      	b.n	8005a6c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa28 	bl	8005eb4 <USBD_CtlError>
          err++;
 8005a64:	7afb      	ldrb	r3, [r7, #11]
 8005a66:	3301      	adds	r3, #1
 8005a68:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005a6a:	bf00      	nop
      }
      break;
 8005a6c:	e037      	b.n	8005ade <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	7c1b      	ldrb	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7e:	f107 0208 	add.w	r2, r7, #8
 8005a82:	4610      	mov	r0, r2
 8005a84:	4798      	blx	r3
 8005a86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a88:	e029      	b.n	8005ade <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa11 	bl	8005eb4 <USBD_CtlError>
        err++;
 8005a92:	7afb      	ldrb	r3, [r7, #11]
 8005a94:	3301      	adds	r3, #1
 8005a96:	72fb      	strb	r3, [r7, #11]
      break;
 8005a98:	e021      	b.n	8005ade <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	7c1b      	ldrb	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10d      	bne.n	8005abe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	f107 0208 	add.w	r2, r7, #8
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4798      	blx	r3
 8005ab2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	2207      	movs	r2, #7
 8005aba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005abc:	e00f      	b.n	8005ade <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f9f7 	bl	8005eb4 <USBD_CtlError>
        err++;
 8005ac6:	7afb      	ldrb	r3, [r7, #11]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	72fb      	strb	r3, [r7, #11]
      break;
 8005acc:	e007      	b.n	8005ade <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f9ef 	bl	8005eb4 <USBD_CtlError>
      err++;
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	72fb      	strb	r3, [r7, #11]
      break;
 8005adc:	bf00      	nop
  }

  if (err != 0U)
 8005ade:	7afb      	ldrb	r3, [r7, #11]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11e      	bne.n	8005b22 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	88db      	ldrh	r3, [r3, #6]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d016      	beq.n	8005b1a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005aec:	893b      	ldrh	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00e      	beq.n	8005b10 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	88da      	ldrh	r2, [r3, #6]
 8005af6:	893b      	ldrh	r3, [r7, #8]
 8005af8:	4293      	cmp	r3, r2
 8005afa:	bf28      	it	cs
 8005afc:	4613      	movcs	r3, r2
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b02:	893b      	ldrh	r3, [r7, #8]
 8005b04:	461a      	mov	r2, r3
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fa44 	bl	8005f96 <USBD_CtlSendData>
 8005b0e:	e009      	b.n	8005b24 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9ce 	bl	8005eb4 <USBD_CtlError>
 8005b18:	e004      	b.n	8005b24 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa95 	bl	800604a <USBD_CtlSendStatus>
 8005b20:	e000      	b.n	8005b24 <USBD_GetDescriptor+0x320>
    return;
 8005b22:	bf00      	nop
  }
}
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop

08005b2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	889b      	ldrh	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d131      	bne.n	8005ba2 <USBD_SetAddress+0x76>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	88db      	ldrh	r3, [r3, #6]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d12d      	bne.n	8005ba2 <USBD_SetAddress+0x76>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	885b      	ldrh	r3, [r3, #2]
 8005b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4c:	d829      	bhi.n	8005ba2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	885b      	ldrh	r3, [r3, #2]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d104      	bne.n	8005b70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f9a3 	bl	8005eb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b6e:	e01d      	b.n	8005bac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	7bfa      	ldrb	r2, [r7, #15]
 8005b74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f001 f817 	bl	8006bb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa61 	bl	800604a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b96:	e009      	b.n	8005bac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba0:	e004      	b.n	8005bac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f985 	bl	8005eb4 <USBD_CtlError>
  }
}
 8005baa:	bf00      	nop
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	885b      	ldrh	r3, [r3, #2]
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	4b4c      	ldr	r3, [pc, #304]	; (8005cfc <USBD_SetConfig+0x148>)
 8005bca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005bcc:	4b4b      	ldr	r3, [pc, #300]	; (8005cfc <USBD_SetConfig+0x148>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d905      	bls.n	8005be0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f96c 	bl	8005eb4 <USBD_CtlError>
    return USBD_FAIL;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e088      	b.n	8005cf2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d002      	beq.n	8005bf2 <USBD_SetConfig+0x3e>
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d025      	beq.n	8005c3c <USBD_SetConfig+0x88>
 8005bf0:	e071      	b.n	8005cd6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005bf2:	4b42      	ldr	r3, [pc, #264]	; (8005cfc <USBD_SetConfig+0x148>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01c      	beq.n	8005c34 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005bfa:	4b40      	ldr	r3, [pc, #256]	; (8005cfc <USBD_SetConfig+0x148>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c04:	4b3d      	ldr	r3, [pc, #244]	; (8005cfc <USBD_SetConfig+0x148>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff f91e 	bl	8004e4c <USBD_SetClassConfig>
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d004      	beq.n	8005c24 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f949 	bl	8005eb4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005c22:	e065      	b.n	8005cf0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fa10 	bl	800604a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005c32:	e05d      	b.n	8005cf0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fa08 	bl	800604a <USBD_CtlSendStatus>
      break;
 8005c3a:	e059      	b.n	8005cf0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005c3c:	4b2f      	ldr	r3, [pc, #188]	; (8005cfc <USBD_SetConfig+0x148>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d112      	bne.n	8005c6a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005c4c:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <USBD_SetConfig+0x148>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c56:	4b29      	ldr	r3, [pc, #164]	; (8005cfc <USBD_SetConfig+0x148>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff f911 	bl	8004e84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9f1 	bl	800604a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005c68:	e042      	b.n	8005cf0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005c6a:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <USBD_SetConfig+0x148>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d02a      	beq.n	8005cce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff f8ff 	bl	8004e84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005c86:	4b1d      	ldr	r3, [pc, #116]	; (8005cfc <USBD_SetConfig+0x148>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c90:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <USBD_SetConfig+0x148>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff f8d8 	bl	8004e4c <USBD_SetClassConfig>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00f      	beq.n	8005cc6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f903 	bl	8005eb4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff f8e4 	bl	8004e84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005cc4:	e014      	b.n	8005cf0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f9bf 	bl	800604a <USBD_CtlSendStatus>
      break;
 8005ccc:	e010      	b.n	8005cf0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f9bb 	bl	800604a <USBD_CtlSendStatus>
      break;
 8005cd4:	e00c      	b.n	8005cf0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f8eb 	bl	8005eb4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cde:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <USBD_SetConfig+0x148>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff f8cd 	bl	8004e84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005cea:	2303      	movs	r3, #3
 8005cec:	73fb      	strb	r3, [r7, #15]
      break;
 8005cee:	bf00      	nop
  }

  return ret;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	200001ac 	.word	0x200001ac

08005d00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	88db      	ldrh	r3, [r3, #6]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d004      	beq.n	8005d1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f8cd 	bl	8005eb4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005d1a:	e023      	b.n	8005d64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	dc02      	bgt.n	8005d2e <USBD_GetConfig+0x2e>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	dc03      	bgt.n	8005d34 <USBD_GetConfig+0x34>
 8005d2c:	e015      	b.n	8005d5a <USBD_GetConfig+0x5a>
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d00b      	beq.n	8005d4a <USBD_GetConfig+0x4a>
 8005d32:	e012      	b.n	8005d5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	2201      	movs	r2, #1
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f927 	bl	8005f96 <USBD_CtlSendData>
        break;
 8005d48:	e00c      	b.n	8005d64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	2201      	movs	r2, #1
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f91f 	bl	8005f96 <USBD_CtlSendData>
        break;
 8005d58:	e004      	b.n	8005d64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f8a9 	bl	8005eb4 <USBD_CtlError>
        break;
 8005d62:	bf00      	nop
}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d81e      	bhi.n	8005dc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	88db      	ldrh	r3, [r3, #6]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d004      	beq.n	8005d96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f890 	bl	8005eb4 <USBD_CtlError>
        break;
 8005d94:	e01a      	b.n	8005dcc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f043 0202 	orr.w	r2, r3, #2
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	330c      	adds	r3, #12
 8005db6:	2202      	movs	r2, #2
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f8eb 	bl	8005f96 <USBD_CtlSendData>
      break;
 8005dc0:	e004      	b.n	8005dcc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f875 	bl	8005eb4 <USBD_CtlError>
      break;
 8005dca:	bf00      	nop
  }
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	885b      	ldrh	r3, [r3, #2]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d106      	bne.n	8005df4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f92b 	bl	800604a <USBD_CtlSendStatus>
  }
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d80b      	bhi.n	8005e2c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	885b      	ldrh	r3, [r3, #2]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d10c      	bne.n	8005e36 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f910 	bl	800604a <USBD_CtlSendStatus>
      }
      break;
 8005e2a:	e004      	b.n	8005e36 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f840 	bl	8005eb4 <USBD_CtlError>
      break;
 8005e34:	e000      	b.n	8005e38 <USBD_ClrFeature+0x3c>
      break;
 8005e36:	bf00      	nop
  }
}
 8005e38:	bf00      	nop
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	781a      	ldrb	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3301      	adds	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff fa91 	bl	8005392 <SWAPBYTE>
 8005e70:	4603      	mov	r3, r0
 8005e72:	461a      	mov	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f7ff fa84 	bl	8005392 <SWAPBYTE>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3301      	adds	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff fa77 	bl	8005392 <SWAPBYTE>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	80da      	strh	r2, [r3, #6]
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ebe:	2180      	movs	r1, #128	; 0x80
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fddd 	bl	8006a80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fdd9 	bl	8006a80 <USBD_LL_StallEP>
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d036      	beq.n	8005f5a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005ef0:	6938      	ldr	r0, [r7, #16]
 8005ef2:	f000 f836 	bl	8005f62 <USBD_GetLen>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	3301      	adds	r3, #1
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	4413      	add	r3, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	7812      	ldrb	r2, [r2, #0]
 8005f0e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	3301      	adds	r3, #1
 8005f14:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
 8005f22:	3301      	adds	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005f26:	e013      	b.n	8005f50 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	7812      	ldrb	r2, [r2, #0]
 8005f32:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	3301      	adds	r3, #1
 8005f38:	613b      	str	r3, [r7, #16]
    idx++;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	4413      	add	r3, r2
 8005f46:	2200      	movs	r2, #0
 8005f48:	701a      	strb	r2, [r3, #0]
    idx++;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e7      	bne.n	8005f28 <USBD_GetString+0x52>
 8005f58:	e000      	b.n	8005f5c <USBD_GetString+0x86>
    return;
 8005f5a:	bf00      	nop
  }
}
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005f72:	e005      	b.n	8005f80 <USBD_GetLen+0x1e>
  {
    len++;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	3301      	adds	r3, #1
 8005f78:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f5      	bne.n	8005f74 <USBD_GetLen+0x12>
  }

  return len;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	2100      	movs	r1, #0
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fe2d 	bl	8006c1c <USBD_LL_Transmit>

  return USBD_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	2100      	movs	r1, #0
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fe1c 	bl	8006c1c <USBD_LL_Transmit>

  return USBD_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	2100      	movs	r1, #0
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fe37 	bl	8006c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	2100      	movs	r1, #0
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fe26 	bl	8006c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2204      	movs	r2, #4
 8006056:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800605a:	2300      	movs	r3, #0
 800605c:	2200      	movs	r2, #0
 800605e:	2100      	movs	r1, #0
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fddb 	bl	8006c1c <USBD_LL_Transmit>

  return USBD_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2205      	movs	r2, #5
 800607c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006080:	2300      	movs	r3, #0
 8006082:	2200      	movs	r2, #0
 8006084:	2100      	movs	r1, #0
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fe00 	bl	8006c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800609c:	2200      	movs	r2, #0
 800609e:	4912      	ldr	r1, [pc, #72]	; (80060e8 <MX_USB_DEVICE_Init+0x50>)
 80060a0:	4812      	ldr	r0, [pc, #72]	; (80060ec <MX_USB_DEVICE_Init+0x54>)
 80060a2:	f7fe fe65 	bl	8004d70 <USBD_Init>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80060ac:	f7fa f94e 	bl	800034c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80060b0:	490f      	ldr	r1, [pc, #60]	; (80060f0 <MX_USB_DEVICE_Init+0x58>)
 80060b2:	480e      	ldr	r0, [pc, #56]	; (80060ec <MX_USB_DEVICE_Init+0x54>)
 80060b4:	f7fe fe8c 	bl	8004dd0 <USBD_RegisterClass>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80060be:	f7fa f945 	bl	800034c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80060c2:	490c      	ldr	r1, [pc, #48]	; (80060f4 <MX_USB_DEVICE_Init+0x5c>)
 80060c4:	4809      	ldr	r0, [pc, #36]	; (80060ec <MX_USB_DEVICE_Init+0x54>)
 80060c6:	f7fe fdad 	bl	8004c24 <USBD_CDC_RegisterInterface>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80060d0:	f7fa f93c 	bl	800034c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80060d4:	4805      	ldr	r0, [pc, #20]	; (80060ec <MX_USB_DEVICE_Init+0x54>)
 80060d6:	f7fe fea2 	bl	8004e1e <USBD_Start>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80060e0:	f7fa f934 	bl	800034c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80060e4:	bf00      	nop
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20000130 	.word	0x20000130
 80060ec:	200003d4 	.word	0x200003d4
 80060f0:	20000018 	.word	0x20000018
 80060f4:	2000011c 	.word	0x2000011c

080060f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80060fc:	2200      	movs	r2, #0
 80060fe:	4905      	ldr	r1, [pc, #20]	; (8006114 <CDC_Init_FS+0x1c>)
 8006100:	4805      	ldr	r0, [pc, #20]	; (8006118 <CDC_Init_FS+0x20>)
 8006102:	f7fe fda4 	bl	8004c4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006106:	4905      	ldr	r1, [pc, #20]	; (800611c <CDC_Init_FS+0x24>)
 8006108:	4803      	ldr	r0, [pc, #12]	; (8006118 <CDC_Init_FS+0x20>)
 800610a:	f7fe fdbe 	bl	8004c8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800610e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20000ea4 	.word	0x20000ea4
 8006118:	200003d4 	.word	0x200003d4
 800611c:	200006a4 	.word	0x200006a4

08006120 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006124:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006126:	4618      	mov	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	6039      	str	r1, [r7, #0]
 800613a:	71fb      	strb	r3, [r7, #7]
 800613c:	4613      	mov	r3, r2
 800613e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	2b23      	cmp	r3, #35	; 0x23
 8006144:	f200 808c 	bhi.w	8006260 <CDC_Control_FS+0x130>
 8006148:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <CDC_Control_FS+0x20>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006261 	.word	0x08006261
 8006154:	08006261 	.word	0x08006261
 8006158:	08006261 	.word	0x08006261
 800615c:	08006261 	.word	0x08006261
 8006160:	08006261 	.word	0x08006261
 8006164:	08006261 	.word	0x08006261
 8006168:	08006261 	.word	0x08006261
 800616c:	08006261 	.word	0x08006261
 8006170:	08006261 	.word	0x08006261
 8006174:	08006261 	.word	0x08006261
 8006178:	08006261 	.word	0x08006261
 800617c:	08006261 	.word	0x08006261
 8006180:	08006261 	.word	0x08006261
 8006184:	08006261 	.word	0x08006261
 8006188:	08006261 	.word	0x08006261
 800618c:	08006261 	.word	0x08006261
 8006190:	08006261 	.word	0x08006261
 8006194:	08006261 	.word	0x08006261
 8006198:	08006261 	.word	0x08006261
 800619c:	08006261 	.word	0x08006261
 80061a0:	08006261 	.word	0x08006261
 80061a4:	08006261 	.word	0x08006261
 80061a8:	08006261 	.word	0x08006261
 80061ac:	08006261 	.word	0x08006261
 80061b0:	08006261 	.word	0x08006261
 80061b4:	08006261 	.word	0x08006261
 80061b8:	08006261 	.word	0x08006261
 80061bc:	08006261 	.word	0x08006261
 80061c0:	08006261 	.word	0x08006261
 80061c4:	08006261 	.word	0x08006261
 80061c8:	08006261 	.word	0x08006261
 80061cc:	08006261 	.word	0x08006261
 80061d0:	080061e1 	.word	0x080061e1
 80061d4:	0800621b 	.word	0x0800621b
 80061d8:	08006261 	.word	0x08006261
 80061dc:	08006261 	.word	0x08006261
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    buffer[0] = pbuf[0];
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781a      	ldrb	r2, [r3, #0]
 80061e4:	4b22      	ldr	r3, [pc, #136]	; (8006270 <CDC_Control_FS+0x140>)
 80061e6:	701a      	strb	r2, [r3, #0]
    buffer[1] = pbuf[1];
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	785a      	ldrb	r2, [r3, #1]
 80061ec:	4b20      	ldr	r3, [pc, #128]	; (8006270 <CDC_Control_FS+0x140>)
 80061ee:	705a      	strb	r2, [r3, #1]
    buffer[2] = pbuf[2];
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	789a      	ldrb	r2, [r3, #2]
 80061f4:	4b1e      	ldr	r3, [pc, #120]	; (8006270 <CDC_Control_FS+0x140>)
 80061f6:	709a      	strb	r2, [r3, #2]
    buffer[3] = pbuf[3];
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	78da      	ldrb	r2, [r3, #3]
 80061fc:	4b1c      	ldr	r3, [pc, #112]	; (8006270 <CDC_Control_FS+0x140>)
 80061fe:	70da      	strb	r2, [r3, #3]
    buffer[4] = pbuf[4];
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	791a      	ldrb	r2, [r3, #4]
 8006204:	4b1a      	ldr	r3, [pc, #104]	; (8006270 <CDC_Control_FS+0x140>)
 8006206:	711a      	strb	r2, [r3, #4]
    buffer[5] = pbuf[5];
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	795a      	ldrb	r2, [r3, #5]
 800620c:	4b18      	ldr	r3, [pc, #96]	; (8006270 <CDC_Control_FS+0x140>)
 800620e:	715a      	strb	r2, [r3, #5]
    buffer[6] = pbuf[6];
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	799a      	ldrb	r2, [r3, #6]
 8006214:	4b16      	ldr	r3, [pc, #88]	; (8006270 <CDC_Control_FS+0x140>)
 8006216:	719a      	strb	r2, [r3, #6]

    break;
 8006218:	e023      	b.n	8006262 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:

    	 pbuf[0]= buffer[0];
 800621a:	4b15      	ldr	r3, [pc, #84]	; (8006270 <CDC_Control_FS+0x140>)
 800621c:	781a      	ldrb	r2, [r3, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	701a      	strb	r2, [r3, #0]
    	 pbuf[1]= buffer[1];
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	4a12      	ldr	r2, [pc, #72]	; (8006270 <CDC_Control_FS+0x140>)
 8006228:	7852      	ldrb	r2, [r2, #1]
 800622a:	701a      	strb	r2, [r3, #0]
    	 pbuf[2]= buffer[2];
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	3302      	adds	r3, #2
 8006230:	4a0f      	ldr	r2, [pc, #60]	; (8006270 <CDC_Control_FS+0x140>)
 8006232:	7892      	ldrb	r2, [r2, #2]
 8006234:	701a      	strb	r2, [r3, #0]
    	 pbuf[3]= buffer[3];
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	3303      	adds	r3, #3
 800623a:	4a0d      	ldr	r2, [pc, #52]	; (8006270 <CDC_Control_FS+0x140>)
 800623c:	78d2      	ldrb	r2, [r2, #3]
 800623e:	701a      	strb	r2, [r3, #0]
    	 pbuf[4]= buffer[4];
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	3304      	adds	r3, #4
 8006244:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <CDC_Control_FS+0x140>)
 8006246:	7912      	ldrb	r2, [r2, #4]
 8006248:	701a      	strb	r2, [r3, #0]
    	 pbuf[5]= buffer[5];
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	3305      	adds	r3, #5
 800624e:	4a08      	ldr	r2, [pc, #32]	; (8006270 <CDC_Control_FS+0x140>)
 8006250:	7952      	ldrb	r2, [r2, #5]
 8006252:	701a      	strb	r2, [r3, #0]
    	 pbuf[6]= buffer[6];
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	3306      	adds	r3, #6
 8006258:	4a05      	ldr	r2, [pc, #20]	; (8006270 <CDC_Control_FS+0x140>)
 800625a:	7992      	ldrb	r2, [r2, #6]
 800625c:	701a      	strb	r2, [r3, #0]
    break;
 800625e:	e000      	b.n	8006262 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006260:	bf00      	nop
  }

  return (USBD_OK);
 8006262:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	200016a4 	.word	0x200016a4

08006274 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	480b      	ldr	r0, [pc, #44]	; (80062b0 <CDC_Receive_FS+0x3c>)
 8006282:	f7fe fd02 	bl	8004c8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006286:	480a      	ldr	r0, [pc, #40]	; (80062b0 <CDC_Receive_FS+0x3c>)
 8006288:	f7fe fd48 	bl	8004d1c <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(buffer, *Len);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	4619      	mov	r1, r3
 8006294:	4807      	ldr	r0, [pc, #28]	; (80062b4 <CDC_Receive_FS+0x40>)
 8006296:	f000 f80f 	bl	80062b8 <CDC_Transmit_FS>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800629a:	2120      	movs	r1, #32
 800629c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062a0:	f7fa fc82 	bl	8000ba8 <HAL_GPIO_TogglePin>
  return (USBD_OK);
 80062a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	200003d4 	.word	0x200003d4
 80062b4:	200016a4 	.word	0x200016a4

080062b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80062c8:	4b0f      	ldr	r3, [pc, #60]	; (8006308 <CDC_Transmit_FS+0x50>)
 80062ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80062da:	2301      	movs	r3, #1
 80062dc:	e010      	b.n	8006300 <CDC_Transmit_FS+0x48>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80062de:	887b      	ldrh	r3, [r7, #2]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4808      	ldr	r0, [pc, #32]	; (8006308 <CDC_Transmit_FS+0x50>)
 80062e6:	f7fe fcb2 	bl	8004c4e <USBD_CDC_SetTxBuffer>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80062ea:	2120      	movs	r1, #32
 80062ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062f0:	f7fa fc5a 	bl	8000ba8 <HAL_GPIO_TogglePin>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80062f4:	4804      	ldr	r0, [pc, #16]	; (8006308 <CDC_Transmit_FS+0x50>)
 80062f6:	f7fe fce1 	bl	8004cbc <USBD_CDC_TransmitPacket>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	200003d4 	.word	0x200003d4

0800630c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800631e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006322:	4618      	mov	r0, r3
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	6039      	str	r1, [r7, #0]
 800633a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2212      	movs	r2, #18
 8006340:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006342:	4b03      	ldr	r3, [pc, #12]	; (8006350 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20000150 	.word	0x20000150

08006354 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	6039      	str	r1, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2204      	movs	r2, #4
 8006364:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006366:	4b03      	ldr	r3, [pc, #12]	; (8006374 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	20000170 	.word	0x20000170

08006378 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	6039      	str	r1, [r7, #0]
 8006382:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d105      	bne.n	8006396 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	4907      	ldr	r1, [pc, #28]	; (80063ac <USBD_FS_ProductStrDescriptor+0x34>)
 800638e:	4808      	ldr	r0, [pc, #32]	; (80063b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006390:	f7ff fda1 	bl	8005ed6 <USBD_GetString>
 8006394:	e004      	b.n	80063a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	4904      	ldr	r1, [pc, #16]	; (80063ac <USBD_FS_ProductStrDescriptor+0x34>)
 800639a:	4805      	ldr	r0, [pc, #20]	; (80063b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800639c:	f7ff fd9b 	bl	8005ed6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80063a0:	4b02      	ldr	r3, [pc, #8]	; (80063ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200016ac 	.word	0x200016ac
 80063b0:	08006e6c 	.word	0x08006e6c

080063b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	6039      	str	r1, [r7, #0]
 80063be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	4904      	ldr	r1, [pc, #16]	; (80063d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80063c4:	4804      	ldr	r0, [pc, #16]	; (80063d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80063c6:	f7ff fd86 	bl	8005ed6 <USBD_GetString>
  return USBD_StrDesc;
 80063ca:	4b02      	ldr	r3, [pc, #8]	; (80063d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	200016ac 	.word	0x200016ac
 80063d8:	08006e84 	.word	0x08006e84

080063dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	6039      	str	r1, [r7, #0]
 80063e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	221a      	movs	r2, #26
 80063ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80063ee:	f000 f855 	bl	800649c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80063f2:	4b02      	ldr	r3, [pc, #8]	; (80063fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000174 	.word	0x20000174

08006400 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	6039      	str	r1, [r7, #0]
 800640a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d105      	bne.n	800641e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	4907      	ldr	r1, [pc, #28]	; (8006434 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006416:	4808      	ldr	r0, [pc, #32]	; (8006438 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006418:	f7ff fd5d 	bl	8005ed6 <USBD_GetString>
 800641c:	e004      	b.n	8006428 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	4904      	ldr	r1, [pc, #16]	; (8006434 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006422:	4805      	ldr	r0, [pc, #20]	; (8006438 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006424:	f7ff fd57 	bl	8005ed6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006428:	4b02      	ldr	r3, [pc, #8]	; (8006434 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	200016ac 	.word	0x200016ac
 8006438:	08006e98 	.word	0x08006e98

0800643c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	6039      	str	r1, [r7, #0]
 8006446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d105      	bne.n	800645a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	4907      	ldr	r1, [pc, #28]	; (8006470 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006452:	4808      	ldr	r0, [pc, #32]	; (8006474 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006454:	f7ff fd3f 	bl	8005ed6 <USBD_GetString>
 8006458:	e004      	b.n	8006464 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	4904      	ldr	r1, [pc, #16]	; (8006470 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800645e:	4805      	ldr	r0, [pc, #20]	; (8006474 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006460:	f7ff fd39 	bl	8005ed6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006464:	4b02      	ldr	r3, [pc, #8]	; (8006470 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	200016ac 	.word	0x200016ac
 8006474:	08006ea4 	.word	0x08006ea4

08006478 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	6039      	str	r1, [r7, #0]
 8006482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	220c      	movs	r2, #12
 8006488:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800648a:	4b03      	ldr	r3, [pc, #12]	; (8006498 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	20000164 	.word	0x20000164

0800649c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80064a2:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <Get_SerialNum+0x44>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80064a8:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <Get_SerialNum+0x48>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80064ae:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <Get_SerialNum+0x4c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4413      	add	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80064c2:	2208      	movs	r2, #8
 80064c4:	4909      	ldr	r1, [pc, #36]	; (80064ec <Get_SerialNum+0x50>)
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f814 	bl	80064f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80064cc:	2204      	movs	r2, #4
 80064ce:	4908      	ldr	r1, [pc, #32]	; (80064f0 <Get_SerialNum+0x54>)
 80064d0:	68b8      	ldr	r0, [r7, #8]
 80064d2:	f000 f80f 	bl	80064f4 <IntToUnicode>
  }
}
 80064d6:	bf00      	nop
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	1fff7590 	.word	0x1fff7590
 80064e4:	1fff7594 	.word	0x1fff7594
 80064e8:	1fff7598 	.word	0x1fff7598
 80064ec:	20000176 	.word	0x20000176
 80064f0:	20000186 	.word	0x20000186

080064f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006506:	2300      	movs	r3, #0
 8006508:	75fb      	strb	r3, [r7, #23]
 800650a:	e027      	b.n	800655c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	0f1b      	lsrs	r3, r3, #28
 8006510:	2b09      	cmp	r3, #9
 8006512:	d80b      	bhi.n	800652c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	0f1b      	lsrs	r3, r3, #28
 8006518:	b2da      	uxtb	r2, r3
 800651a:	7dfb      	ldrb	r3, [r7, #23]
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	4619      	mov	r1, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	440b      	add	r3, r1
 8006524:	3230      	adds	r2, #48	; 0x30
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	e00a      	b.n	8006542 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	0f1b      	lsrs	r3, r3, #28
 8006530:	b2da      	uxtb	r2, r3
 8006532:	7dfb      	ldrb	r3, [r7, #23]
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	4619      	mov	r1, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	440b      	add	r3, r1
 800653c:	3237      	adds	r2, #55	; 0x37
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	3301      	adds	r3, #1
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	4413      	add	r3, r2
 8006552:	2200      	movs	r2, #0
 8006554:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	3301      	adds	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]
 800655c:	7dfa      	ldrb	r2, [r7, #23]
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	429a      	cmp	r2, r3
 8006562:	d3d3      	bcc.n	800650c <IntToUnicode+0x18>
  }
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b0ac      	sub	sp, #176	; 0xb0
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800657c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	605a      	str	r2, [r3, #4]
 8006586:	609a      	str	r2, [r3, #8]
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800658c:	f107 0314 	add.w	r3, r7, #20
 8006590:	2288      	movs	r2, #136	; 0x88
 8006592:	2100      	movs	r1, #0
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fc55 	bl	8006e44 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065a2:	d173      	bne.n	800668c <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80065a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80065aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80065ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80065b2:	2303      	movs	r3, #3
 80065b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80065b6:	2301      	movs	r3, #1
 80065b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80065ba:	230c      	movs	r3, #12
 80065bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80065be:	2307      	movs	r3, #7
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80065c2:	2302      	movs	r3, #2
 80065c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80065c6:	2302      	movs	r3, #2
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80065ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80065ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065d0:	f107 0314 	add.w	r3, r7, #20
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fc f9d5 	bl	8002984 <HAL_RCCEx_PeriphCLKConfig>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80065e0:	f7f9 feb4 	bl	800034c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065e4:	4b2b      	ldr	r3, [pc, #172]	; (8006694 <HAL_PCD_MspInit+0x120>)
 80065e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e8:	4a2a      	ldr	r2, [pc, #168]	; (8006694 <HAL_PCD_MspInit+0x120>)
 80065ea:	f043 0301 	orr.w	r3, r3, #1
 80065ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065f0:	4b28      	ldr	r3, [pc, #160]	; (8006694 <HAL_PCD_MspInit+0x120>)
 80065f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80065fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006604:	2302      	movs	r3, #2
 8006606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660a:	2300      	movs	r3, #0
 800660c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006610:	2303      	movs	r3, #3
 8006612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006616:	230a      	movs	r3, #10
 8006618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800661c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006620:	4619      	mov	r1, r3
 8006622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006626:	f7fa f8fd 	bl	8000824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800662a:	4b1a      	ldr	r3, [pc, #104]	; (8006694 <HAL_PCD_MspInit+0x120>)
 800662c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662e:	4a19      	ldr	r2, [pc, #100]	; (8006694 <HAL_PCD_MspInit+0x120>)
 8006630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006636:	4b17      	ldr	r3, [pc, #92]	; (8006694 <HAL_PCD_MspInit+0x120>)
 8006638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006642:	4b14      	ldr	r3, [pc, #80]	; (8006694 <HAL_PCD_MspInit+0x120>)
 8006644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d114      	bne.n	8006678 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800664e:	4b11      	ldr	r3, [pc, #68]	; (8006694 <HAL_PCD_MspInit+0x120>)
 8006650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006652:	4a10      	ldr	r2, [pc, #64]	; (8006694 <HAL_PCD_MspInit+0x120>)
 8006654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006658:	6593      	str	r3, [r2, #88]	; 0x58
 800665a:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <HAL_PCD_MspInit+0x120>)
 800665c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006662:	60bb      	str	r3, [r7, #8]
 8006664:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8006666:	f7fb fbbd 	bl	8001de4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <HAL_PCD_MspInit+0x120>)
 800666c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <HAL_PCD_MspInit+0x120>)
 8006670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006674:	6593      	str	r3, [r2, #88]	; 0x58
 8006676:	e001      	b.n	800667c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006678:	f7fb fbb4 	bl	8001de4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800667c:	2200      	movs	r2, #0
 800667e:	2100      	movs	r1, #0
 8006680:	2043      	movs	r0, #67	; 0x43
 8006682:	f7fa f898 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006686:	2043      	movs	r0, #67	; 0x43
 8006688:	f7fa f8b1 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800668c:	bf00      	nop
 800668e:	37b0      	adds	r7, #176	; 0xb0
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	40021000 	.word	0x40021000

08006698 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066ac:	4619      	mov	r1, r3
 80066ae:	4610      	mov	r0, r2
 80066b0:	f7fe fc00 	bl	8004eb4 <USBD_LL_SetupStage>
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	6879      	ldr	r1, [r7, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	1a9b      	subs	r3, r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	440b      	add	r3, r1
 80066dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	4619      	mov	r1, r3
 80066e6:	f7fe fc3a 	bl	8004f5e <USBD_LL_DataOutStage>
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006704:	78fa      	ldrb	r2, [r7, #3]
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	1a9b      	subs	r3, r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	3348      	adds	r3, #72	; 0x48
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	78fb      	ldrb	r3, [r7, #3]
 8006718:	4619      	mov	r1, r3
 800671a:	f7fe fc83 	bl	8005024 <USBD_LL_DataInStage>
}
 800671e:	bf00      	nop
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b082      	sub	sp, #8
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe fd97 	bl	8005268 <USBD_LL_SOF>
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800674a:	2301      	movs	r3, #1
 800674c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d001      	beq.n	800675a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006756:	f7f9 fdf9 	bl	800034c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006760:	7bfa      	ldrb	r2, [r7, #15]
 8006762:	4611      	mov	r1, r2
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fd41 	bl	80051ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006770:	4618      	mov	r0, r3
 8006772:	f7fe fced 	bl	8005150 <USBD_LL_Reset>
}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe fd30 	bl	800520c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80067b4:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <HAL_PCD_SuspendCallback+0x48>)
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	4a03      	ldr	r2, [pc, #12]	; (80067c8 <HAL_PCD_SuspendCallback+0x48>)
 80067ba:	f043 0306 	orr.w	r3, r3, #6
 80067be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	e000ed00 	.word	0xe000ed00

080067cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80067f4:	4b08      	ldr	r3, [pc, #32]	; (8006818 <HAL_PCD_ResumeCallback+0x4c>)
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	4a07      	ldr	r2, [pc, #28]	; (8006818 <HAL_PCD_ResumeCallback+0x4c>)
 80067fa:	f023 0306 	bic.w	r3, r3, #6
 80067fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006800:	f000 faf6 	bl	8006df0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fd14 	bl	8005238 <USBD_LL_Resume>
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	e000ed00 	.word	0xe000ed00

0800681c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	460b      	mov	r3, r1
 8006826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800682e:	78fa      	ldrb	r2, [r7, #3]
 8006830:	4611      	mov	r1, r2
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe fd60 	bl	80052f8 <USBD_LL_IsoOUTIncomplete>
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fd28 	bl	80052ac <USBD_LL_IsoINIncomplete>
}
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006872:	4618      	mov	r0, r3
 8006874:	f7fe fd66 	bl	8005344 <USBD_LL_DevConnected>
}
 8006878:	bf00      	nop
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fd63 	bl	800535a <USBD_LL_DevDisconnected>
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d13c      	bne.n	8006926 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80068ac:	4a20      	ldr	r2, [pc, #128]	; (8006930 <USBD_LL_Init+0x94>)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <USBD_LL_Init+0x94>)
 80068b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80068bc:	4b1c      	ldr	r3, [pc, #112]	; (8006930 <USBD_LL_Init+0x94>)
 80068be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80068c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80068c4:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <USBD_LL_Init+0x94>)
 80068c6:	2206      	movs	r2, #6
 80068c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80068ca:	4b19      	ldr	r3, [pc, #100]	; (8006930 <USBD_LL_Init+0x94>)
 80068cc:	2202      	movs	r2, #2
 80068ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80068d0:	4b17      	ldr	r3, [pc, #92]	; (8006930 <USBD_LL_Init+0x94>)
 80068d2:	2202      	movs	r2, #2
 80068d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80068d6:	4b16      	ldr	r3, [pc, #88]	; (8006930 <USBD_LL_Init+0x94>)
 80068d8:	2200      	movs	r2, #0
 80068da:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80068dc:	4b14      	ldr	r3, [pc, #80]	; (8006930 <USBD_LL_Init+0x94>)
 80068de:	2200      	movs	r2, #0
 80068e0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80068e2:	4b13      	ldr	r3, [pc, #76]	; (8006930 <USBD_LL_Init+0x94>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <USBD_LL_Init+0x94>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80068ee:	4b10      	ldr	r3, [pc, #64]	; (8006930 <USBD_LL_Init+0x94>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80068f4:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <USBD_LL_Init+0x94>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80068fa:	480d      	ldr	r0, [pc, #52]	; (8006930 <USBD_LL_Init+0x94>)
 80068fc:	f7fa f96e 	bl	8000bdc <HAL_PCD_Init>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006906:	f7f9 fd21 	bl	800034c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800690a:	2180      	movs	r1, #128	; 0x80
 800690c:	4808      	ldr	r0, [pc, #32]	; (8006930 <USBD_LL_Init+0x94>)
 800690e:	f7fb f9d0 	bl	8001cb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006912:	2240      	movs	r2, #64	; 0x40
 8006914:	2100      	movs	r1, #0
 8006916:	4806      	ldr	r0, [pc, #24]	; (8006930 <USBD_LL_Init+0x94>)
 8006918:	f7fb f984 	bl	8001c24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800691c:	2280      	movs	r2, #128	; 0x80
 800691e:	2101      	movs	r1, #1
 8006920:	4803      	ldr	r0, [pc, #12]	; (8006930 <USBD_LL_Init+0x94>)
 8006922:	f7fb f97f 	bl	8001c24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	200018ac 	.word	0x200018ac

08006934 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800694a:	4618      	mov	r0, r3
 800694c:	f7fa fa6a 	bl	8000e24 <HAL_PCD_Start>
 8006950:	4603      	mov	r3, r0
 8006952:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	2b03      	cmp	r3, #3
 8006958:	d816      	bhi.n	8006988 <USBD_LL_Start+0x54>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <USBD_LL_Start+0x2c>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006971 	.word	0x08006971
 8006964:	08006977 	.word	0x08006977
 8006968:	0800697d 	.word	0x0800697d
 800696c:	08006983 	.word	0x08006983
    case HAL_OK :
      usb_status = USBD_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	73fb      	strb	r3, [r7, #15]
    break;
 8006974:	e00b      	b.n	800698e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006976:	2303      	movs	r3, #3
 8006978:	73fb      	strb	r3, [r7, #15]
    break;
 800697a:	e008      	b.n	800698e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
    break;
 8006980:	e005      	b.n	800698e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006982:	2303      	movs	r3, #3
 8006984:	73fb      	strb	r3, [r7, #15]
    break;
 8006986:	e002      	b.n	800698e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006988:	2303      	movs	r3, #3
 800698a:	73fb      	strb	r3, [r7, #15]
    break;
 800698c:	bf00      	nop
  }
  return usb_status;
 800698e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	4608      	mov	r0, r1
 80069a2:	4611      	mov	r1, r2
 80069a4:	461a      	mov	r2, r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	70fb      	strb	r3, [r7, #3]
 80069aa:	460b      	mov	r3, r1
 80069ac:	70bb      	strb	r3, [r7, #2]
 80069ae:	4613      	mov	r3, r2
 80069b0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80069c0:	78bb      	ldrb	r3, [r7, #2]
 80069c2:	883a      	ldrh	r2, [r7, #0]
 80069c4:	78f9      	ldrb	r1, [r7, #3]
 80069c6:	f7fa fe25 	bl	8001614 <HAL_PCD_EP_Open>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d817      	bhi.n	8006a04 <USBD_LL_OpenEP+0x6c>
 80069d4:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <USBD_LL_OpenEP+0x44>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	080069ed 	.word	0x080069ed
 80069e0:	080069f3 	.word	0x080069f3
 80069e4:	080069f9 	.word	0x080069f9
 80069e8:	080069ff 	.word	0x080069ff
    case HAL_OK :
      usb_status = USBD_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	73fb      	strb	r3, [r7, #15]
    break;
 80069f0:	e00b      	b.n	8006a0a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80069f2:	2303      	movs	r3, #3
 80069f4:	73fb      	strb	r3, [r7, #15]
    break;
 80069f6:	e008      	b.n	8006a0a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80069f8:	2301      	movs	r3, #1
 80069fa:	73fb      	strb	r3, [r7, #15]
    break;
 80069fc:	e005      	b.n	8006a0a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80069fe:	2303      	movs	r3, #3
 8006a00:	73fb      	strb	r3, [r7, #15]
    break;
 8006a02:	e002      	b.n	8006a0a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006a04:	2303      	movs	r3, #3
 8006a06:	73fb      	strb	r3, [r7, #15]
    break;
 8006a08:	bf00      	nop
  }
  return usb_status;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	4611      	mov	r1, r2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fa fe56 	bl	80016e4 <HAL_PCD_EP_Close>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d816      	bhi.n	8006a70 <USBD_LL_CloseEP+0x5c>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <USBD_LL_CloseEP+0x34>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a59 	.word	0x08006a59
 8006a4c:	08006a5f 	.word	0x08006a5f
 8006a50:	08006a65 	.word	0x08006a65
 8006a54:	08006a6b 	.word	0x08006a6b
    case HAL_OK :
      usb_status = USBD_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a5c:	e00b      	b.n	8006a76 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	73fb      	strb	r3, [r7, #15]
    break;
 8006a62:	e008      	b.n	8006a76 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a64:	2301      	movs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
    break;
 8006a68:	e005      	b.n	8006a76 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006a6e:	e002      	b.n	8006a76 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006a70:	2303      	movs	r3, #3
 8006a72:	73fb      	strb	r3, [r7, #15]
    break;
 8006a74:	bf00      	nop
  }
  return usb_status;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fa fefd 	bl	800189e <HAL_PCD_EP_SetStall>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d816      	bhi.n	8006adc <USBD_LL_StallEP+0x5c>
 8006aae:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <USBD_LL_StallEP+0x34>)
 8006ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab4:	08006ac5 	.word	0x08006ac5
 8006ab8:	08006acb 	.word	0x08006acb
 8006abc:	08006ad1 	.word	0x08006ad1
 8006ac0:	08006ad7 	.word	0x08006ad7
    case HAL_OK :
      usb_status = USBD_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ac8:	e00b      	b.n	8006ae2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006aca:	2303      	movs	r3, #3
 8006acc:	73fb      	strb	r3, [r7, #15]
    break;
 8006ace:	e008      	b.n	8006ae2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ad4:	e005      	b.n	8006ae2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8006ada:	e002      	b.n	8006ae2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006adc:	2303      	movs	r3, #3
 8006ade:	73fb      	strb	r3, [r7, #15]
    break;
 8006ae0:	bf00      	nop
  }
  return usb_status;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b06:	78fa      	ldrb	r2, [r7, #3]
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fa ff29 	bl	8001962 <HAL_PCD_EP_ClrStall>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d816      	bhi.n	8006b48 <USBD_LL_ClearStallEP+0x5c>
 8006b1a:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <USBD_LL_ClearStallEP+0x34>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006b37 	.word	0x08006b37
 8006b28:	08006b3d 	.word	0x08006b3d
 8006b2c:	08006b43 	.word	0x08006b43
    case HAL_OK :
      usb_status = USBD_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	73fb      	strb	r3, [r7, #15]
    break;
 8006b34:	e00b      	b.n	8006b4e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b36:	2303      	movs	r3, #3
 8006b38:	73fb      	strb	r3, [r7, #15]
    break;
 8006b3a:	e008      	b.n	8006b4e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b40:	e005      	b.n	8006b4e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b42:	2303      	movs	r3, #3
 8006b44:	73fb      	strb	r3, [r7, #15]
    break;
 8006b46:	e002      	b.n	8006b4e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b4c:	bf00      	nop
  }
  return usb_status;
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da0b      	bge.n	8006b8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	333e      	adds	r3, #62	; 0x3e
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	e00b      	b.n	8006ba4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	4613      	mov	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ba2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bca:	78fa      	ldrb	r2, [r7, #3]
 8006bcc:	4611      	mov	r1, r2
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fa fcfb 	bl	80015ca <HAL_PCD_SetAddress>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d816      	bhi.n	8006c0c <USBD_LL_SetUSBAddress+0x5c>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <USBD_LL_SetUSBAddress+0x34>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006bfb 	.word	0x08006bfb
 8006bec:	08006c01 	.word	0x08006c01
 8006bf0:	08006c07 	.word	0x08006c07
    case HAL_OK :
      usb_status = USBD_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8006bf8:	e00b      	b.n	8006c12 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	73fb      	strb	r3, [r7, #15]
    break;
 8006bfe:	e008      	b.n	8006c12 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
    break;
 8006c04:	e005      	b.n	8006c12 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c06:	2303      	movs	r3, #3
 8006c08:	73fb      	strb	r3, [r7, #15]
    break;
 8006c0a:	e002      	b.n	8006c12 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c10:	bf00      	nop
  }
  return usb_status;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c3a:	7af9      	ldrb	r1, [r7, #11]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	f7fa fdf0 	bl	8001824 <HAL_PCD_EP_Transmit>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006c48:	7dbb      	ldrb	r3, [r7, #22]
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d816      	bhi.n	8006c7c <USBD_LL_Transmit+0x60>
 8006c4e:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <USBD_LL_Transmit+0x38>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006c65 	.word	0x08006c65
 8006c58:	08006c6b 	.word	0x08006c6b
 8006c5c:	08006c71 	.word	0x08006c71
 8006c60:	08006c77 	.word	0x08006c77
    case HAL_OK :
      usb_status = USBD_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	75fb      	strb	r3, [r7, #23]
    break;
 8006c68:	e00b      	b.n	8006c82 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	75fb      	strb	r3, [r7, #23]
    break;
 8006c6e:	e008      	b.n	8006c82 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c70:	2301      	movs	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
    break;
 8006c74:	e005      	b.n	8006c82 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c76:	2303      	movs	r3, #3
 8006c78:	75fb      	strb	r3, [r7, #23]
    break;
 8006c7a:	e002      	b.n	8006c82 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	75fb      	strb	r3, [r7, #23]
    break;
 8006c80:	bf00      	nop
  }
  return usb_status;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	607a      	str	r2, [r7, #4]
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006caa:	7af9      	ldrb	r1, [r7, #11]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	f7fa fd62 	bl	8001778 <HAL_PCD_EP_Receive>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006cb8:	7dbb      	ldrb	r3, [r7, #22]
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d816      	bhi.n	8006cec <USBD_LL_PrepareReceive+0x60>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <USBD_LL_PrepareReceive+0x38>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cd5 	.word	0x08006cd5
 8006cc8:	08006cdb 	.word	0x08006cdb
 8006ccc:	08006ce1 	.word	0x08006ce1
 8006cd0:	08006ce7 	.word	0x08006ce7
    case HAL_OK :
      usb_status = USBD_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]
    break;
 8006cd8:	e00b      	b.n	8006cf2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	75fb      	strb	r3, [r7, #23]
    break;
 8006cde:	e008      	b.n	8006cf2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	75fb      	strb	r3, [r7, #23]
    break;
 8006ce4:	e005      	b.n	8006cf2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	75fb      	strb	r3, [r7, #23]
    break;
 8006cea:	e002      	b.n	8006cf2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	75fb      	strb	r3, [r7, #23]
    break;
 8006cf0:	bf00      	nop
  }
  return usb_status;
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	4611      	mov	r1, r2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fa fd6e 	bl	80017f4 <HAL_PCD_EP_GetRxCount>
 8006d18:	4603      	mov	r3, r0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_PCDEx_LPM_Callback+0x18>
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d01f      	beq.n	8006d7a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8006d3a:	e03b      	b.n	8006db4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006d44:	f000 f854 	bl	8006df0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d48:	4b1c      	ldr	r3, [pc, #112]	; (8006dbc <HAL_PCDEx_LPM_Callback+0x98>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	4a1b      	ldr	r2, [pc, #108]	; (8006dbc <HAL_PCDEx_LPM_Callback+0x98>)
 8006d4e:	f023 0306 	bic.w	r3, r3, #6
 8006d52:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d66:	f023 0301 	bic.w	r3, r3, #1
 8006d6a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fa60 	bl	8005238 <USBD_LL_Resume>
    break;
 8006d78:	e01c      	b.n	8006db4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d8c:	f043 0301 	orr.w	r3, r3, #1
 8006d90:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fa37 	bl	800520c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <HAL_PCDEx_LPM_Callback+0x98>)
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	4a04      	ldr	r2, [pc, #16]	; (8006dbc <HAL_PCDEx_LPM_Callback+0x98>)
 8006dac:	f043 0306 	orr.w	r3, r3, #6
 8006db0:	6113      	str	r3, [r2, #16]
    break;
 8006db2:	bf00      	nop
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	e000ed00 	.word	0xe000ed00

08006dc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006dc8:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <USBD_static_malloc+0x18>)
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	200001b0 	.word	0x200001b0

08006ddc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]

}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006df4:	f7f9 f9f3 	bl	80001de <SystemClock_Config>
}
 8006df8:	bf00      	nop
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <__libc_init_array>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	4d0d      	ldr	r5, [pc, #52]	; (8006e34 <__libc_init_array+0x38>)
 8006e00:	4c0d      	ldr	r4, [pc, #52]	; (8006e38 <__libc_init_array+0x3c>)
 8006e02:	1b64      	subs	r4, r4, r5
 8006e04:	10a4      	asrs	r4, r4, #2
 8006e06:	2600      	movs	r6, #0
 8006e08:	42a6      	cmp	r6, r4
 8006e0a:	d109      	bne.n	8006e20 <__libc_init_array+0x24>
 8006e0c:	4d0b      	ldr	r5, [pc, #44]	; (8006e3c <__libc_init_array+0x40>)
 8006e0e:	4c0c      	ldr	r4, [pc, #48]	; (8006e40 <__libc_init_array+0x44>)
 8006e10:	f000 f820 	bl	8006e54 <_init>
 8006e14:	1b64      	subs	r4, r4, r5
 8006e16:	10a4      	asrs	r4, r4, #2
 8006e18:	2600      	movs	r6, #0
 8006e1a:	42a6      	cmp	r6, r4
 8006e1c:	d105      	bne.n	8006e2a <__libc_init_array+0x2e>
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e24:	4798      	blx	r3
 8006e26:	3601      	adds	r6, #1
 8006e28:	e7ee      	b.n	8006e08 <__libc_init_array+0xc>
 8006e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e2e:	4798      	blx	r3
 8006e30:	3601      	adds	r6, #1
 8006e32:	e7f2      	b.n	8006e1a <__libc_init_array+0x1e>
 8006e34:	08006ef4 	.word	0x08006ef4
 8006e38:	08006ef4 	.word	0x08006ef4
 8006e3c:	08006ef4 	.word	0x08006ef4
 8006e40:	08006ef8 	.word	0x08006ef8

08006e44 <memset>:
 8006e44:	4402      	add	r2, r0
 8006e46:	4603      	mov	r3, r0
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d100      	bne.n	8006e4e <memset+0xa>
 8006e4c:	4770      	bx	lr
 8006e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e52:	e7f9      	b.n	8006e48 <memset+0x4>

08006e54 <_init>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	bf00      	nop
 8006e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5a:	bc08      	pop	{r3}
 8006e5c:	469e      	mov	lr, r3
 8006e5e:	4770      	bx	lr

08006e60 <_fini>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	bf00      	nop
 8006e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e66:	bc08      	pop	{r3}
 8006e68:	469e      	mov	lr, r3
 8006e6a:	4770      	bx	lr
