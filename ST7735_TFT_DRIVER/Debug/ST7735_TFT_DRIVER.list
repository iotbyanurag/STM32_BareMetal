
ST7735_TFT_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a970  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f744  0800f744  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800f744  0800f744  0001f744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f74c  0800f74c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f74c  0800f74c  0001f74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f750  0800f750  0001f750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800f754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000030  0800f784  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  0800f784  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4c7  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213f  00000000  00000000  0002f527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00031668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00026576  00000000  00000000  00032340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000dedc  00000000  00000000  000588b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000eb79d  00000000  00000000  00066792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00151f2f  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000bf8  00000000  00000000  00151f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003410  00000000  00000000  00152b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004dbc 	.word	0x08004dbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08004dbc 	.word	0x08004dbc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <demoTFT>:
  */


/* USER CODE END 0 */
void  demoTFT ( void )
{
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af04      	add	r7, sp, #16
	ST7735_SetRotation (r);
 80004c6:	4b4f      	ldr	r3, [pc, #316]	; (8000604 <demoTFT+0x144>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fa40 	bl	8001950 <ST7735_SetRotation>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004d0:	2120      	movs	r1, #32
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f002 f82d 	bl	8002534 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80004da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004de:	f001 fcf1 	bl	8001ec4 <HAL_Delay>
	 ST7735_FillScreen (ST7735_BLACK);
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 fe3c 	bl	8001160 <ST7735_FillScreen>

	 for ( int x =  0 ; x < ST7735_GetWidth (); x ++ )
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e018      	b.n	8000520 <demoTFT+0x60>
	 {
	   ST7735_DrawPixel (x, 0 , ST7735_WHITE);
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fcf9 	bl	8000ef0 <ST7735_DrawPixel>
	   ST7735_DrawPixel (x, ST7735_GetHeight () -  1 , ST7735_WHITE);
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	b29c      	uxth	r4, r3
 8000502:	f001 fad1 	bl	8001aa8 <ST7735_GetHeight>
 8000506:	4603      	mov	r3, r0
 8000508:	b29b      	uxth	r3, r3
 800050a:	3b01      	subs	r3, #1
 800050c:	b29b      	uxth	r3, r3
 800050e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000512:	4619      	mov	r1, r3
 8000514:	4620      	mov	r0, r4
 8000516:	f000 fceb 	bl	8000ef0 <ST7735_DrawPixel>
	 for ( int x =  0 ; x < ST7735_GetWidth (); x ++ )
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	f001 face 	bl	8001ac0 <ST7735_GetWidth>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	4293      	cmp	r3, r2
 800052c:	dbdf      	blt.n	80004ee <demoTFT+0x2e>
	 }

	 for ( int y =  0 ; y < ST7735_GetHeight (); y ++ )
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	e017      	b.n	8000564 <demoTFT+0xa4>
	 {
	   ST7735_DrawPixel ( 0 , y, ST7735_WHITE);
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	b29b      	uxth	r3, r3
 8000538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053c:	4619      	mov	r1, r3
 800053e:	2000      	movs	r0, #0
 8000540:	f000 fcd6 	bl	8000ef0 <ST7735_DrawPixel>
	   ST7735_DrawPixel (ST7735_GetWidth () -  1 , y, ST7735_WHITE);
 8000544:	f001 fabc 	bl	8001ac0 <ST7735_GetWidth>
 8000548:	4603      	mov	r3, r0
 800054a:	b29b      	uxth	r3, r3
 800054c:	3b01      	subs	r3, #1
 800054e:	b29b      	uxth	r3, r3
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	b291      	uxth	r1, r2
 8000554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fcc9 	bl	8000ef0 <ST7735_DrawPixel>
	 for ( int y =  0 ; y < ST7735_GetHeight (); y ++ )
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	3301      	adds	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	f001 faa0 	bl	8001aa8 <ST7735_GetHeight>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	4293      	cmp	r3, r2
 8000570:	dbe0      	blt.n	8000534 <demoTFT+0x74>
	 }

	 ST7735_DrawLine ( 0 , 0 , ST7735_GetWidth (), ST7735_GetHeight (), ST7735_WHITE);
 8000572:	f001 faa5 	bl	8001ac0 <ST7735_GetWidth>
 8000576:	4603      	mov	r3, r0
 8000578:	461c      	mov	r4, r3
 800057a:	f001 fa95 	bl	8001aa8 <ST7735_GetHeight>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	4613      	mov	r3, r2
 800058a:	4622      	mov	r2, r4
 800058c:	2100      	movs	r1, #0
 800058e:	2000      	movs	r0, #0
 8000590:	f001 f8ab 	bl	80016ea <ST7735_DrawLine>
	 ST7735_DrawLine (ST7735_GetWidth (), 0 , 0 , ST7735_GetHeight (), ST7735_WHITE);
 8000594:	f001 fa94 	bl	8001ac0 <ST7735_GetWidth>
 8000598:	4603      	mov	r3, r0
 800059a:	461c      	mov	r4, r3
 800059c:	f001 fa84 	bl	8001aa8 <ST7735_GetHeight>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	4613      	mov	r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	4620      	mov	r0, r4
 80005b2:	f001 f89a 	bl	80016ea <ST7735_DrawLine>

	 HAL_Delay ( 2000 );
 80005b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ba:	f001 fc83 	bl	8001ec4 <HAL_Delay>

	 ST7735_FillScreen (ST7735_BLACK);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fdce 	bl	8001160 <ST7735_FillScreen>

	 for ( int i = 0 ; i < ST7735_GetHeight (); i += 4 )
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e011      	b.n	80005ee <demoTFT+0x12e>
	 {
	  ST7735_DrawFastHLine ( 0 , i, ST7735_GetWidth()- 1 , ST7735_WHITE);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	b21c      	sxth	r4, r3
 80005ce:	f001 fa77 	bl	8001ac0 <ST7735_GetWidth>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	3b01      	subs	r3, #1
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b21a      	sxth	r2, r3
 80005dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e0:	4621      	mov	r1, r4
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 f96a 	bl	80018bc <ST7735_DrawFastHLine>
	 for ( int i = 0 ; i < ST7735_GetHeight (); i += 4 )
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3304      	adds	r3, #4
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	f001 fa5b 	bl	8001aa8 <ST7735_GetHeight>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	4293      	cmp	r3, r2
 80005fa:	dbe6      	blt.n	80005ca <demoTFT+0x10a>
	 }

	 for ( int i =  0 ; i < ST7735_GetWidth (); i += 4 )
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	e014      	b.n	800062c <demoTFT+0x16c>
 8000602:	bf00      	nop
 8000604:	2000004c 	.word	0x2000004c
	 {
	  ST7735_DrawFastVLine (i, 0 , ST7735_GetHeight ()-1 , ST7735_WHITE);
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	b21c      	sxth	r4, r3
 800060c:	f001 fa4c 	bl	8001aa8 <ST7735_GetHeight>
 8000610:	4603      	mov	r3, r0
 8000612:	b29b      	uxth	r3, r3
 8000614:	3b01      	subs	r3, #1
 8000616:	b29b      	uxth	r3, r3
 8000618:	b21a      	sxth	r2, r3
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	2100      	movs	r1, #0
 8000620:	4620      	mov	r0, r4
 8000622:	f001 f901 	bl	8001828 <ST7735_DrawFastVLine>
	 for ( int i =  0 ; i < ST7735_GetWidth (); i += 4 )
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	3304      	adds	r3, #4
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	f001 fa48 	bl	8001ac0 <ST7735_GetWidth>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4293      	cmp	r3, r2
 8000638:	dbe6      	blt.n	8000608 <demoTFT+0x148>
	 }

	 HAL_Delay ( 2000 );
 800063a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800063e:	f001 fc41 	bl	8001ec4 <HAL_Delay>

	 // Check fonts
	 ST7735_FillScreen (ST7735_BLACK);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fd8c 	bl	8001160 <ST7735_FillScreen>
	 ST7735_DrawString ( 0 , 0 , "Font_7x10, red on black, lorem ipsum dolor sit amet" , Font_7x10, ST7735_RED, ST7735_BLACK);
 8000648:	4ba0      	ldr	r3, [pc, #640]	; (80008cc <demoTFT+0x40c>)
 800064a:	2200      	movs	r2, #0
 800064c:	9202      	str	r2, [sp, #8]
 800064e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000652:	9201      	str	r2, [sp, #4]
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a9d      	ldr	r2, [pc, #628]	; (80008d0 <demoTFT+0x410>)
 800065c:	2100      	movs	r1, #0
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fc8e 	bl	8000f80 <ST7735_DrawString>
	 ST7735_DrawString ( 0 , 3 * 10 , "Font_11x18, green, lorem ipsum" , Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8000664:	4b9b      	ldr	r3, [pc, #620]	; (80008d4 <demoTFT+0x414>)
 8000666:	2200      	movs	r2, #0
 8000668:	9202      	str	r2, [sp, #8]
 800066a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	9200      	str	r2, [sp, #0]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a98      	ldr	r2, [pc, #608]	; (80008d8 <demoTFT+0x418>)
 8000678:	211e      	movs	r1, #30
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fc80 	bl	8000f80 <ST7735_DrawString>
	 ST7735_DrawString ( 0 , 3 * 10 + 3 * 18 , "Font_16x26" , Font_16x26, ST7735_BLUE, ST7735_BLACK);
 8000680:	4b96      	ldr	r3, [pc, #600]	; (80008dc <demoTFT+0x41c>)
 8000682:	2200      	movs	r2, #0
 8000684:	9202      	str	r2, [sp, #8]
 8000686:	221f      	movs	r2, #31
 8000688:	9201      	str	r2, [sp, #4]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	9200      	str	r2, [sp, #0]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a93      	ldr	r2, [pc, #588]	; (80008e0 <demoTFT+0x420>)
 8000692:	2154      	movs	r1, #84	; 0x54
 8000694:	2000      	movs	r0, #0
 8000696:	f000 fc73 	bl	8000f80 <ST7735_DrawString>
	 HAL_Delay ( 2000 );
 800069a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069e:	f001 fc11 	bl	8001ec4 <HAL_Delay>

	 // Check colors
	 ST7735_FillScreen (ST7735_BLACK);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 fd5c 	bl	8001160 <ST7735_FillScreen>
	 ST7735_DrawString ( 0 , 0 , "BLACK" , Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80006a8:	4b8a      	ldr	r3, [pc, #552]	; (80008d4 <demoTFT+0x414>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	9202      	str	r2, [sp, #8]
 80006ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b2:	9201      	str	r2, [sp, #4]
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	9200      	str	r2, [sp, #0]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a8a      	ldr	r2, [pc, #552]	; (80008e4 <demoTFT+0x424>)
 80006bc:	2100      	movs	r1, #0
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fc5e 	bl	8000f80 <ST7735_DrawString>
	 HAL_Delay ( 500 );
 80006c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c8:	f001 fbfc 	bl	8001ec4 <HAL_Delay>

	 ST7735_FillScreen (ST7735_BLUE);
 80006cc:	201f      	movs	r0, #31
 80006ce:	f000 fd47 	bl	8001160 <ST7735_FillScreen>
	 ST7735_DrawString ( 0 , 0 , "BLUE" , Font_11x18, ST7735_BLACK, ST7735_BLUE);
 80006d2:	4b80      	ldr	r3, [pc, #512]	; (80008d4 <demoTFT+0x414>)
 80006d4:	221f      	movs	r2, #31
 80006d6:	9202      	str	r2, [sp, #8]
 80006d8:	2200      	movs	r2, #0
 80006da:	9201      	str	r2, [sp, #4]
 80006dc:	685a      	ldr	r2, [r3, #4]
 80006de:	9200      	str	r2, [sp, #0]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a81      	ldr	r2, [pc, #516]	; (80008e8 <demoTFT+0x428>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fc4a 	bl	8000f80 <ST7735_DrawString>
	 HAL_Delay ( 500 );
 80006ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f0:	f001 fbe8 	bl	8001ec4 <HAL_Delay>

	 ST7735_FillScreen (ST7735_RED);
 80006f4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80006f8:	f000 fd32 	bl	8001160 <ST7735_FillScreen>
	 ST7735_DrawString ( 0 , 0 , "RED" , Font_11x18, ST7735_BLACK, ST7735_RED);
 80006fc:	4b75      	ldr	r3, [pc, #468]	; (80008d4 <demoTFT+0x414>)
 80006fe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000702:	9202      	str	r2, [sp, #8]
 8000704:	2200      	movs	r2, #0
 8000706:	9201      	str	r2, [sp, #4]
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	9200      	str	r2, [sp, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a77      	ldr	r2, [pc, #476]	; (80008ec <demoTFT+0x42c>)
 8000710:	2100      	movs	r1, #0
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fc34 	bl	8000f80 <ST7735_DrawString>
	 HAL_Delay ( 500 );
 8000718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071c:	f001 fbd2 	bl	8001ec4 <HAL_Delay>

	 ST7735_FillScreen (ST7735_GREEN);
 8000720:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000724:	f000 fd1c 	bl	8001160 <ST7735_FillScreen>
	 ST7735_DrawString ( 0 , 0 , "GREEN" , Font_11x18, ST7735_BLACK, ST7735_GREEN);
 8000728:	4b6a      	ldr	r3, [pc, #424]	; (80008d4 <demoTFT+0x414>)
 800072a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800072e:	9202      	str	r2, [sp, #8]
 8000730:	2200      	movs	r2, #0
 8000732:	9201      	str	r2, [sp, #4]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a6d      	ldr	r2, [pc, #436]	; (80008f0 <demoTFT+0x430>)
 800073c:	2100      	movs	r1, #0
 800073e:	2000      	movs	r0, #0
 8000740:	f000 fc1e 	bl	8000f80 <ST7735_DrawString>
	 HAL_Delay ( 500 );
 8000744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000748:	f001 fbbc 	bl	8001ec4 <HAL_Delay>

	 ST7735_FillScreen (ST7735_CYAN);
 800074c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000750:	f000 fd06 	bl	8001160 <ST7735_FillScreen>
	 ST7735_DrawString ( 0 , 0 , "CYAN" , Font_11x18, ST7735_BLACK, ST7735_CYAN);
 8000754:	4b5f      	ldr	r3, [pc, #380]	; (80008d4 <demoTFT+0x414>)
 8000756:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800075a:	9202      	str	r2, [sp, #8]
 800075c:	2200      	movs	r2, #0
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a63      	ldr	r2, [pc, #396]	; (80008f4 <demoTFT+0x434>)
 8000768:	2100      	movs	r1, #0
 800076a:	2000      	movs	r0, #0
 800076c:	f000 fc08 	bl	8000f80 <ST7735_DrawString>
	 HAL_Delay ( 500 );
 8000770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000774:	f001 fba6 	bl	8001ec4 <HAL_Delay>

	 ST7735_FillScreen (ST7735_MAGENTA);
 8000778:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800077c:	f000 fcf0 	bl	8001160 <ST7735_FillScreen>
	 ST7735_DrawString ( 0 , 0 , "MAGENTA" , Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 8000780:	4b54      	ldr	r3, [pc, #336]	; (80008d4 <demoTFT+0x414>)
 8000782:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000786:	9202      	str	r2, [sp, #8]
 8000788:	2200      	movs	r2, #0
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	685a      	ldr	r2, [r3, #4]
 800078e:	9200      	str	r2, [sp, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a59      	ldr	r2, [pc, #356]	; (80008f8 <demoTFT+0x438>)
 8000794:	2100      	movs	r1, #0
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fbf2 	bl	8000f80 <ST7735_DrawString>
	 HAL_Delay ( 500 );
 800079c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a0:	f001 fb90 	bl	8001ec4 <HAL_Delay>
//
	 ST7735_FillScreen (ST7735_YELLOW);
 80007a4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80007a8:	f000 fcda 	bl	8001160 <ST7735_FillScreen>
	 ST7735_DrawString ( 0 , 0 , "YELLOW" , Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 80007ac:	4b49      	ldr	r3, [pc, #292]	; (80008d4 <demoTFT+0x414>)
 80007ae:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80007b2:	9202      	str	r2, [sp, #8]
 80007b4:	2200      	movs	r2, #0
 80007b6:	9201      	str	r2, [sp, #4]
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	9200      	str	r2, [sp, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a4f      	ldr	r2, [pc, #316]	; (80008fc <demoTFT+0x43c>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fbdc 	bl	8000f80 <ST7735_DrawString>
	 HAL_Delay ( 500 );
 80007c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007cc:	f001 fb7a 	bl	8001ec4 <HAL_Delay>
//
	 ST7735_FillScreen (ST7735_WHITE);
 80007d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007d4:	f000 fcc4 	bl	8001160 <ST7735_FillScreen>
	 ST7735_DrawString ( 0 , 0 , "WHITE" , Font_11x18, ST7735_BLACK, ST7735_WHITE);
 80007d8:	4b3e      	ldr	r3, [pc, #248]	; (80008d4 <demoTFT+0x414>)
 80007da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007de:	9202      	str	r2, [sp, #8]
 80007e0:	2200      	movs	r2, #0
 80007e2:	9201      	str	r2, [sp, #4]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	9200      	str	r2, [sp, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a45      	ldr	r2, [pc, #276]	; (8000900 <demoTFT+0x440>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 fbc6 	bl	8000f80 <ST7735_DrawString>
	 HAL_Delay ( 500 );
 80007f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f8:	f001 fb64 	bl	8001ec4 <HAL_Delay>

	 // Draw circles
	 ST7735_FillScreen (ST7735_BLACK);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 fcaf 	bl	8001160 <ST7735_FillScreen>
	 for ( int i =  0 ; i < ST7735_GetHeight ()/2 ; i += 2 )
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	e017      	b.n	8000838 <demoTFT+0x378>
	 {
	  ST7735_DrawCircle (ST7735_GetWidth()/2 , ST7735_GetHeight()/2 , i, ST7735_YELLOW);
 8000808:	f001 f95a 	bl	8001ac0 <ST7735_GetWidth>
 800080c:	4603      	mov	r3, r0
 800080e:	0fda      	lsrs	r2, r3, #31
 8000810:	4413      	add	r3, r2
 8000812:	105b      	asrs	r3, r3, #1
 8000814:	b21c      	sxth	r4, r3
 8000816:	f001 f947 	bl	8001aa8 <ST7735_GetHeight>
 800081a:	4603      	mov	r3, r0
 800081c:	0fda      	lsrs	r2, r3, #31
 800081e:	4413      	add	r3, r2
 8000820:	105b      	asrs	r3, r3, #1
 8000822:	b219      	sxth	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	b21a      	sxth	r2, r3
 8000828:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800082c:	4620      	mov	r0, r4
 800082e:	f000 fd25 	bl	800127c <ST7735_DrawCircle>
	 for ( int i =  0 ; i < ST7735_GetHeight ()/2 ; i += 2 )
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3302      	adds	r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	f001 f936 	bl	8001aa8 <ST7735_GetHeight>
 800083c:	4603      	mov	r3, r0
 800083e:	0fda      	lsrs	r2, r3, #31
 8000840:	4413      	add	r3, r2
 8000842:	105b      	asrs	r3, r3, #1
 8000844:	b21b      	sxth	r3, r3
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4293      	cmp	r3, r2
 800084c:	dbdc      	blt.n	8000808 <demoTFT+0x348>
	 }
	 HAL_Delay ( 1000 );
 800084e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000852:	f001 fb37 	bl	8001ec4 <HAL_Delay>

	 ST7735_FillScreen (ST7735_BLACK);
 8000856:	2000      	movs	r0, #0
 8000858:	f000 fc82 	bl	8001160 <ST7735_FillScreen>
	 ST7735_FillTriangle ( 0 , 0 , ST7735_GetWidth ()/2 , ST7735_GetHeight (), ST7735_GetWidth (), 0 , ST7735_RED);
 800085c:	f001 f930 	bl	8001ac0 <ST7735_GetWidth>
 8000860:	4603      	mov	r3, r0
 8000862:	0fda      	lsrs	r2, r3, #31
 8000864:	4413      	add	r3, r2
 8000866:	105b      	asrs	r3, r3, #1
 8000868:	b21c      	sxth	r4, r3
 800086a:	f001 f91d 	bl	8001aa8 <ST7735_GetHeight>
 800086e:	4603      	mov	r3, r0
 8000870:	461d      	mov	r5, r3
 8000872:	f001 f925 	bl	8001ac0 <ST7735_GetWidth>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	2300      	movs	r3, #0
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	9200      	str	r2, [sp, #0]
 8000886:	462b      	mov	r3, r5
 8000888:	4622      	mov	r2, r4
 800088a:	2100      	movs	r1, #0
 800088c:	2000      	movs	r0, #0
 800088e:	f000 fdc7 	bl	8001420 <ST7735_FillTriangle>
	 HAL_Delay ( 1000 );
 8000892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000896:	f001 fb15 	bl	8001ec4 <HAL_Delay>

	 ST7735_FillScreen (ST7735_BLACK);
 800089a:	2000      	movs	r0, #0
 800089c:	f000 fc60 	bl	8001160 <ST7735_FillScreen>
	 ST7735_DrawImage ( 0 , 0 , 128 , 128 , ( uint16_t * ) test_img_128x128);
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <demoTFT+0x444>)
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	2100      	movs	r1, #0
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fc74 	bl	8001198 <ST7735_DrawImage>
	 HAL_Delay ( 3000 );
 80008b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008b4:	f001 fb06 	bl	8001ec4 <HAL_Delay>

 r ++ ;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <demoTFT+0x448>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <demoTFT+0x448>)
 80008c2:	701a      	strb	r2, [r3, #0]
}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bdb0      	pop	{r4, r5, r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	08004dd4 	.word	0x08004dd4
 80008d4:	20000008 	.word	0x20000008
 80008d8:	08004e08 	.word	0x08004e08
 80008dc:	20000010 	.word	0x20000010
 80008e0:	08004e28 	.word	0x08004e28
 80008e4:	08004e34 	.word	0x08004e34
 80008e8:	08004e3c 	.word	0x08004e3c
 80008ec:	08004e44 	.word	0x08004e44
 80008f0:	08004e48 	.word	0x08004e48
 80008f4:	08004e50 	.word	0x08004e50
 80008f8:	08004e58 	.word	0x08004e58
 80008fc:	08004e60 	.word	0x08004e60
 8000900:	08004e68 	.word	0x08004e68
 8000904:	08007684 	.word	0x08007684
 8000908:	2000004c 	.word	0x2000004c

0800090c <main>:


int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f001 fa5c 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f816 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f000 f8e4 	bl	8000ae4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800091c:	f000 f8b2 	bl	8000a84 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000920:	f000 f872 	bl	8000a08 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  ST7735_Init ();
 8000924:	f000 fabe 	bl	8000ea4 <ST7735_Init>
    ST7735_Backlight_On ();
 8000928:	f000 fc9c 	bl	8001264 <ST7735_Backlight_On>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  demoTFT ();
 800092c:	f7ff fdc8 	bl	80004c0 <demoTFT>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000930:	2120      	movs	r1, #32
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f001 fdfd 	bl	8002534 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800093a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093e:	f001 fac1 	bl	8001ec4 <HAL_Delay>
	  demoTFT ();
 8000942:	e7f3      	b.n	800092c <main+0x20>

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b096      	sub	sp, #88	; 0x58
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2244      	movs	r2, #68	; 0x44
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fa2a 	bl	8004dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000966:	f44f 7000 	mov.w	r0, #512	; 0x200
 800096a:	f001 fe1b 	bl	80025a4 <HAL_PWREx_ControlVoltageScaling>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000974:	f000 f934 	bl	8000be0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000978:	f001 fdf6 	bl	8002568 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <SystemClock_Config+0xc0>)
 800097e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000982:	4a20      	ldr	r2, [pc, #128]	; (8000a04 <SystemClock_Config+0xc0>)
 8000984:	f023 0318 	bic.w	r3, r3, #24
 8000988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800098c:	2314      	movs	r3, #20
 800098e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009a4:	2301      	movs	r3, #1
 80009a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009ac:	2328      	movs	r3, #40	; 0x28
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009b0:	2307      	movs	r3, #7
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fe45 	bl	8002650 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f908 	bl	8000be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2303      	movs	r3, #3
 80009d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	2104      	movs	r1, #4
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fa17 	bl	8002e1c <HAL_RCC_ClockConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009f4:	f000 f8f4 	bl	8000be0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009f8:	f002 ff00 	bl	80037fc <HAL_RCCEx_EnableMSIPLLMode>
}
 80009fc:	bf00      	nop
 80009fe:	3758      	adds	r7, #88	; 0x58
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000

08000a08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <MX_SPI2_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a26:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a62:	2208      	movs	r2, #8
 8000a64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_SPI2_Init+0x74>)
 8000a68:	f003 f8aa 	bl	8003bc0 <HAL_SPI_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a72:	f000 f8b5 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000050 	.word	0x20000050
 8000a80:	40003800 	.word	0x40003800

08000a84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a8a:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <MX_USART2_UART_Init+0x5c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ac8:	f003 fd0c 	bl	80044e4 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ad2:	f000 f885 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000b4 	.word	0x200000b4
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a34      	ldr	r2, [pc, #208]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a2e      	ldr	r2, [pc, #184]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	4a22      	ldr	r2, [pc, #136]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f001 fccf 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b6c:	4819      	ldr	r0, [pc, #100]	; (8000bd4 <MX_GPIO_Init+0xf0>)
 8000b6e:	f001 fcc9 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_GPIO_Init+0xf4>)
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <MX_GPIO_Init+0xf8>)
 8000b88:	f001 fb12 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b8c:	2320      	movs	r3, #32
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f001 fb03 	bl	80021b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_RES_Pin ST7735_DC_Pin ST7735_CS_Pin ST7735_BL_Pin */
  GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
 8000baa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_GPIO_Init+0xf0>)
 8000bc4:	f001 faf4 	bl	80021b0 <HAL_GPIO_Init>

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48000400 	.word	0x48000400
 8000bd8:	10210000 	.word	0x10210000
 8000bdc:	48000800 	.word	0x48000800

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>

08000bea <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <ST7735_Reset>:

static void ST7735_Reset()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	TFT_RES_L();
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c02:	4807      	ldr	r0, [pc, #28]	; (8000c20 <ST7735_Reset+0x28>)
 8000c04:	f001 fc7e 	bl	8002504 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000c08:	2014      	movs	r0, #20
 8000c0a:	f001 f95b 	bl	8001ec4 <HAL_Delay>
	TFT_RES_H();
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <ST7735_Reset+0x28>)
 8000c16:	f001 fc75 	bl	8002504 <HAL_GPIO_WritePin>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	48000400 	.word	0x48000400

08000c24 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <ST7735_WriteCommand+0x2c>)
 8000c36:	f001 fc65 	bl	8002504 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000c3a:	1df9      	adds	r1, r7, #7
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	2201      	movs	r2, #1
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <ST7735_WriteCommand+0x30>)
 8000c44:	f003 f85f 	bl	8003d06 <HAL_SPI_Transmit>
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	48000400 	.word	0x48000400
 8000c54:	20000050 	.word	0x20000050

08000c58 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <ST7735_WriteData+0x30>)
 8000c6a:	f001 fc4b 	bl	8002504 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <ST7735_WriteData+0x34>)
 8000c7a:	f003 f844 	bl	8003d06 <HAL_SPI_Transmit>
#endif
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	20000050 	.word	0x20000050

08000c90 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000ca2:	e034      	b.n	8000d0e <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000cae:	7afb      	ldrb	r3, [r7, #11]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffb7 	bl	8000c24 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000cc0:	7abb      	ldrb	r3, [r7, #10]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000cca:	7abb      	ldrb	r3, [r7, #10]
 8000ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cd0:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000cd2:	7abb      	ldrb	r3, [r7, #10]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d008      	beq.n	8000cea <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000cd8:	7abb      	ldrb	r3, [r7, #10]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ffbb 	bl	8000c58 <ST7735_WriteData>
            addr += numArgs;
 8000ce2:	7abb      	ldrb	r3, [r7, #10]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8000cea:	89bb      	ldrh	r3, [r7, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00e      	beq.n	8000d0e <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000cfa:	89bb      	ldrh	r3, [r7, #12]
 8000cfc:	2bff      	cmp	r3, #255	; 0xff
 8000cfe:	d102      	bne.n	8000d06 <ST7735_ExecuteCommandList+0x76>
 8000d00:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d04:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000d06:	89bb      	ldrh	r3, [r7, #12]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 f8db 	bl	8001ec4 <HAL_Delay>
    while(numCommands--)
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	73fa      	strb	r2, [r7, #15]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1c5      	bne.n	8000ca4 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	4611      	mov	r1, r2
 8000d30:	461a      	mov	r2, r3
 8000d32:	4623      	mov	r3, r4
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	4603      	mov	r3, r0
 8000d38:	71bb      	strb	r3, [r7, #6]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	717b      	strb	r3, [r7, #5]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000d42:	202a      	movs	r0, #42	; 0x2a
 8000d44:	f7ff ff6e 	bl	8000c24 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000d48:	2300      	movs	r3, #0
 8000d4a:	733b      	strb	r3, [r7, #12]
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <ST7735_SetAddressWindow+0x88>)
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4413      	add	r3, r2
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	737b      	strb	r3, [r7, #13]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73bb      	strb	r3, [r7, #14]
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <ST7735_SetAddressWindow+0x88>)
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	797b      	ldrb	r3, [r7, #5]
 8000d62:	4413      	add	r3, r2
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff72 	bl	8000c58 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000d74:	202b      	movs	r0, #43	; 0x2b
 8000d76:	f7ff ff55 	bl	8000c24 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <ST7735_SetAddressWindow+0x8c>)
 8000d7c:	781a      	ldrb	r2, [r3, #0]
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	4413      	add	r3, r2
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <ST7735_SetAddressWindow+0x8c>)
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	793b      	ldrb	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2104      	movs	r1, #4
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000d9e:	202c      	movs	r0, #44	; 0x2c
 8000da0:	f7ff ff40 	bl	8000c24 <ST7735_WriteCommand>
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	20000020 	.word	0x20000020
 8000db0:	20000021 	.word	0x20000021

08000db4 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000db4:	b082      	sub	sp, #8
 8000db6:	b590      	push	{r4, r7, lr}
 8000db8:	b089      	sub	sp, #36	; 0x24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	80bb      	strh	r3, [r7, #4]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	b2d8      	uxtb	r0, r3
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	b2d9      	uxtb	r1, r3
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	3b01      	subs	r3, #1
 8000de0:	b2dc      	uxtb	r4, r3
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000dea:	4413      	add	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	3b01      	subs	r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4622      	mov	r2, r4
 8000df4:	f7ff ff96 	bl	8000d24 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
 8000dfc:	e043      	b.n	8000e86 <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	3b20      	subs	r3, #32
 8000e04:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000e08:	fb01 f303 	mul.w	r3, r1, r3
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	440b      	add	r3, r1
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	e029      	b.n	8000e74 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00e      	beq.n	8000e4e <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000e30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	743b      	strb	r3, [r7, #16]
 8000e3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2102      	movs	r1, #2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff06 	bl	8000c58 <ST7735_WriteData>
 8000e4c:	e00f      	b.n	8000e6e <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000e4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e52:	0a1b      	lsrs	r3, r3, #8
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	733b      	strb	r3, [r7, #12]
 8000e5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2102      	movs	r1, #2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fef5 	bl	8000c58 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e78:	461a      	mov	r2, r3
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d3cf      	bcc.n	8000e20 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	3301      	adds	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d3b5      	bcc.n	8000dfe <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	3724      	adds	r7, #36	; 0x24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e9e:	b002      	add	sp, #8
 8000ea0:	4770      	bx	lr
	...

08000ea4 <ST7735_Init>:

void ST7735_Init()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000ea8:	f7ff fe9f 	bl	8000bea <ST7735_GPIO_Init>
	TFT_CS_L();
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb2:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <ST7735_Init+0x3c>)
 8000eb4:	f001 fb26 	bl	8002504 <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000eb8:	f7ff fe9e 	bl	8000bf8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <ST7735_Init+0x40>)
 8000ebe:	f7ff fee7 	bl	8000c90 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <ST7735_Init+0x44>)
 8000ec4:	f7ff fee4 	bl	8000c90 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <ST7735_Init+0x48>)
 8000eca:	f7ff fee1 	bl	8000c90 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <ST7735_Init+0x3c>)
 8000ed6:	f001 fb15 	bl	8002504 <HAL_GPIO_WritePin>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	0800f684 	.word	0x0800f684
 8000ee8:	0800f6c0 	.word	0x0800f6c0
 8000eec:	0800f6d0 	.word	0x0800f6d0

08000ef0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
 8000efa:	460b      	mov	r3, r1
 8000efc:	80bb      	strh	r3, [r7, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <ST7735_DrawPixel+0x84>)
 8000f06:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	da2e      	bge.n	8000f6c <ST7735_DrawPixel+0x7c>
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <ST7735_DrawPixel+0x88>)
 8000f12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f16:	4293      	cmp	r3, r2
 8000f18:	da28      	bge.n	8000f6c <ST7735_DrawPixel+0x7c>
        return;

    TFT_CS_L();
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f20:	4816      	ldr	r0, [pc, #88]	; (8000f7c <ST7735_DrawPixel+0x8c>)
 8000f22:	f001 faef 	bl	8002504 <HAL_GPIO_WritePin>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	b2d8      	uxtb	r0, r3
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	b2d9      	uxtb	r1, r3
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f7ff fef1 	bl	8000d24 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	733b      	strb	r3, [r7, #12]
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	2102      	movs	r1, #2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe7d 	bl	8000c58 <ST7735_WriteData>

    TFT_CS_H();
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <ST7735_DrawPixel+0x8c>)
 8000f66:	f001 facd 	bl	8002504 <HAL_GPIO_WritePin>
 8000f6a:	e000      	b.n	8000f6e <ST7735_DrawPixel+0x7e>
        return;
 8000f6c:	bf00      	nop
}
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000001e 	.word	0x2000001e
 8000f78:	2000001c 	.word	0x2000001c
 8000f7c:	48000400 	.word	0x48000400

08000f80 <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000f80:	b082      	sub	sp, #8
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af04      	add	r7, sp, #16
 8000f88:	603a      	str	r2, [r7, #0]
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80fb      	strh	r3, [r7, #6]
 8000f90:	460b      	mov	r3, r1
 8000f92:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9a:	4825      	ldr	r0, [pc, #148]	; (8001030 <ST7735_DrawString+0xb0>)
 8000f9c:	f001 fab2 	bl	8002504 <HAL_GPIO_WritePin>

    while(*str)
 8000fa0:	e033      	b.n	800100a <ST7735_DrawString+0x8a>
    {
        if(x + font.width >= _width)
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	7d3a      	ldrb	r2, [r7, #20]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a22      	ldr	r2, [pc, #136]	; (8001034 <ST7735_DrawString+0xb4>)
 8000faa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	db16      	blt.n	8000fe0 <ST7735_DrawString+0x60>
        {
            x = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000fb6:	7d7b      	ldrb	r3, [r7, #21]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8000fc0:	88bb      	ldrh	r3, [r7, #4]
 8000fc2:	7d7a      	ldrb	r2, [r7, #21]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <ST7735_DrawString+0xb8>)
 8000fc8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	da21      	bge.n	8001014 <ST7735_DrawString+0x94>
            {
                break;
            }

            if(*str == ' ')
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b20      	cmp	r3, #32
 8000fd6:	d103      	bne.n	8000fe0 <ST7735_DrawString+0x60>
            {
                // skip spaces in the beginning of the new line
                str++;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	603b      	str	r3, [r7, #0]
                continue;
 8000fde:	e014      	b.n	800100a <ST7735_DrawString+0x8a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	88b9      	ldrh	r1, [r7, #4]
 8000fe6:	88f8      	ldrh	r0, [r7, #6]
 8000fe8:	8c3b      	ldrh	r3, [r7, #32]
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	8bbb      	ldrh	r3, [r7, #28]
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f7ff fedd 	bl	8000db4 <ST7735_WriteChar>
        x += font.width;
 8000ffa:	7d3b      	ldrb	r3, [r7, #20]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	4413      	add	r3, r2
 8001002:	80fb      	strh	r3, [r7, #6]
        str++;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	603b      	str	r3, [r7, #0]
    while(*str)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1c7      	bne.n	8000fa2 <ST7735_DrawString+0x22>
 8001012:	e000      	b.n	8001016 <ST7735_DrawString+0x96>
                break;
 8001014:	bf00      	nop
    }
    TFT_CS_H();
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <ST7735_DrawString+0xb0>)
 800101e:	f001 fa71 	bl	8002504 <HAL_GPIO_WritePin>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800102c:	b002      	add	sp, #8
 800102e:	4770      	bx	lr
 8001030:	48000400 	.word	0x48000400
 8001034:	2000001e 	.word	0x2000001e
 8001038:	2000001c 	.word	0x2000001c

0800103c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	4604      	mov	r4, r0
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4623      	mov	r3, r4
 800104c:	80fb      	strh	r3, [r7, #6]
 800104e:	4603      	mov	r3, r0
 8001050:	80bb      	strh	r3, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
 8001056:	4613      	mov	r3, r2
 8001058:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	4a3c      	ldr	r2, [pc, #240]	; (8001150 <ST7735_FillRectangle+0x114>)
 800105e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001062:	4293      	cmp	r3, r2
 8001064:	da6f      	bge.n	8001146 <ST7735_FillRectangle+0x10a>
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	4a3a      	ldr	r2, [pc, #232]	; (8001154 <ST7735_FillRectangle+0x118>)
 800106a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800106e:	4293      	cmp	r3, r2
 8001070:	da69      	bge.n	8001146 <ST7735_FillRectangle+0x10a>
    if((x + w - 1) >= _width) w = _width - x;
 8001072:	88fa      	ldrh	r2, [r7, #6]
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	4413      	add	r3, r2
 8001078:	4a35      	ldr	r2, [pc, #212]	; (8001150 <ST7735_FillRectangle+0x114>)
 800107a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800107e:	4293      	cmp	r3, r2
 8001080:	dd06      	ble.n	8001090 <ST7735_FillRectangle+0x54>
 8001082:	4b33      	ldr	r3, [pc, #204]	; (8001150 <ST7735_FillRectangle+0x114>)
 8001084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001088:	b29a      	uxth	r2, r3
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001090:	88ba      	ldrh	r2, [r7, #4]
 8001092:	883b      	ldrh	r3, [r7, #0]
 8001094:	4413      	add	r3, r2
 8001096:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <ST7735_FillRectangle+0x118>)
 8001098:	f9b2 2000 	ldrsh.w	r2, [r2]
 800109c:	4293      	cmp	r3, r2
 800109e:	dd06      	ble.n	80010ae <ST7735_FillRectangle+0x72>
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <ST7735_FillRectangle+0x118>)
 80010a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b4:	4828      	ldr	r0, [pc, #160]	; (8001158 <ST7735_FillRectangle+0x11c>)
 80010b6:	f001 fa25 	bl	8002504 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	b2d8      	uxtb	r0, r3
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	b2d9      	uxtb	r1, r3
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4413      	add	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b2dc      	uxtb	r4, r3
 80010d2:	88bb      	ldrh	r3, [r7, #4]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	883b      	ldrh	r3, [r7, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4413      	add	r3, r2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3b01      	subs	r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4622      	mov	r2, r4
 80010e4:	f7ff fe1e 	bl	8000d24 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80010e8:	8c3b      	ldrh	r3, [r7, #32]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	733b      	strb	r3, [r7, #12]
 80010f2:	8c3b      	ldrh	r3, [r7, #32]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fe:	4816      	ldr	r0, [pc, #88]	; (8001158 <ST7735_FillRectangle+0x11c>)
 8001100:	f001 fa00 	bl	8002504 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001104:	883b      	ldrh	r3, [r7, #0]
 8001106:	80bb      	strh	r3, [r7, #4]
 8001108:	e013      	b.n	8001132 <ST7735_FillRectangle+0xf6>
    {
        for(x = w; x > 0; x--)
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	80fb      	strh	r3, [r7, #6]
 800110e:	e00a      	b.n	8001126 <ST7735_FillRectangle+0xea>
        {
#ifdef USE_SPI_DMA
        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
        	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
        	HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001110:	f107 010c 	add.w	r1, r7, #12
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	2202      	movs	r2, #2
 800111a:	4810      	ldr	r0, [pc, #64]	; (800115c <ST7735_FillRectangle+0x120>)
 800111c:	f002 fdf3 	bl	8003d06 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	3b01      	subs	r3, #1
 8001124:	80fb      	strh	r3, [r7, #6]
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f1      	bne.n	8001110 <ST7735_FillRectangle+0xd4>
    for(y = h; y > 0; y--)
 800112c:	88bb      	ldrh	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	80bb      	strh	r3, [r7, #4]
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1e8      	bne.n	800110a <ST7735_FillRectangle+0xce>
#endif
        }
    }
    TFT_CS_H();
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <ST7735_FillRectangle+0x11c>)
 8001140:	f001 f9e0 	bl	8002504 <HAL_GPIO_WritePin>
 8001144:	e000      	b.n	8001148 <ST7735_FillRectangle+0x10c>
    if((x >= _width) || (y >= _height)) return;
 8001146:	bf00      	nop
}
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	bf00      	nop
 8001150:	2000001e 	.word	0x2000001e
 8001154:	2000001c 	.word	0x2000001c
 8001158:	48000400 	.word	0x48000400
 800115c:	20000050 	.word	0x20000050

08001160 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <ST7735_FillScreen+0x30>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <ST7735_FillScreen+0x34>)
 8001174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001178:	b299      	uxth	r1, r3
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	460b      	mov	r3, r1
 8001180:	2100      	movs	r1, #0
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff ff5a 	bl	800103c <ST7735_FillRectangle>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000001e 	.word	0x2000001e
 8001194:	2000001c 	.word	0x2000001c

08001198 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4604      	mov	r4, r0
 80011a0:	4608      	mov	r0, r1
 80011a2:	4611      	mov	r1, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4623      	mov	r3, r4
 80011a8:	80fb      	strh	r3, [r7, #6]
 80011aa:	4603      	mov	r3, r0
 80011ac:	80bb      	strh	r3, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]
 80011b2:	4613      	mov	r3, r2
 80011b4:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <ST7735_DrawImage+0xc0>)
 80011ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011be:	4293      	cmp	r3, r2
 80011c0:	da42      	bge.n	8001248 <ST7735_DrawImage+0xb0>
 80011c2:	88bb      	ldrh	r3, [r7, #4]
 80011c4:	4a25      	ldr	r2, [pc, #148]	; (800125c <ST7735_DrawImage+0xc4>)
 80011c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	da3c      	bge.n	8001248 <ST7735_DrawImage+0xb0>
    if((x + w - 1) >= _width) return;
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a20      	ldr	r2, [pc, #128]	; (8001258 <ST7735_DrawImage+0xc0>)
 80011d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011da:	4293      	cmp	r3, r2
 80011dc:	dc36      	bgt.n	800124c <ST7735_DrawImage+0xb4>
    if((y + h - 1) >= _height) return;
 80011de:	88ba      	ldrh	r2, [r7, #4]
 80011e0:	883b      	ldrh	r3, [r7, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <ST7735_DrawImage+0xc4>)
 80011e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011ea:	4293      	cmp	r3, r2
 80011ec:	dc30      	bgt.n	8001250 <ST7735_DrawImage+0xb8>

    TFT_CS_L();
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f4:	481a      	ldr	r0, [pc, #104]	; (8001260 <ST7735_DrawImage+0xc8>)
 80011f6:	f001 f985 	bl	8002504 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	b2d8      	uxtb	r0, r3
 80011fe:	88bb      	ldrh	r3, [r7, #4]
 8001200:	b2d9      	uxtb	r1, r3
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4413      	add	r3, r2
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3b01      	subs	r3, #1
 8001210:	b2dc      	uxtb	r4, r3
 8001212:	88bb      	ldrh	r3, [r7, #4]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	883b      	ldrh	r3, [r7, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4413      	add	r3, r2
 800121c:	b2db      	uxtb	r3, r3
 800121e:	3b01      	subs	r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4622      	mov	r2, r4
 8001224:	f7ff fd7e 	bl	8000d24 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	883a      	ldrh	r2, [r7, #0]
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4619      	mov	r1, r3
 8001234:	69b8      	ldr	r0, [r7, #24]
 8001236:	f7ff fd0f 	bl	8000c58 <ST7735_WriteData>
    TFT_CS_H();
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <ST7735_DrawImage+0xc8>)
 8001242:	f001 f95f 	bl	8002504 <HAL_GPIO_WritePin>
 8001246:	e004      	b.n	8001252 <ST7735_DrawImage+0xba>
    if((x >= _width) || (y >= _height)) return;
 8001248:	bf00      	nop
 800124a:	e002      	b.n	8001252 <ST7735_DrawImage+0xba>
    if((x + w - 1) >= _width) return;
 800124c:	bf00      	nop
 800124e:	e000      	b.n	8001252 <ST7735_DrawImage+0xba>
    if((y + h - 1) >= _height) return;
 8001250:	bf00      	nop
}
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	2000001e 	.word	0x2000001e
 800125c:	2000001c 	.word	0x2000001c
 8001260:	48000400 	.word	0x48000400

08001264 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	TFT_BL_H();
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800126e:	4802      	ldr	r0, [pc, #8]	; (8001278 <ST7735_Backlight_On+0x14>)
 8001270:	f001 f948 	bl	8002504 <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	48000400 	.word	0x48000400

0800127c <ST7735_DrawCircle>:
/***************************************************************************************
** Function name:           drawCircle
** Description:             Draw a circle outline
***************************************************************************************/
void ST7735_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	4604      	mov	r4, r0
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4623      	mov	r3, r4
 800128c:	80fb      	strh	r3, [r7, #6]
 800128e:	4603      	mov	r3, r0
 8001290:	80bb      	strh	r3, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	807b      	strh	r3, [r7, #2]
 8001296:	4613      	mov	r3, r2
 8001298:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	f1c3 0301 	rsb	r3, r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	81fb      	strh	r3, [r7, #14]
  int16_t ddF_x = 1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	81bb      	strh	r3, [r7, #12]
  int16_t ddF_y = - r - r;
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	425b      	negs	r3, r3
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	817b      	strh	r3, [r7, #10]
  int16_t x = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	813b      	strh	r3, [r7, #8]

  ST7735_DrawPixel(x0 + r, y0  , color);
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	4413      	add	r3, r2
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	88b9      	ldrh	r1, [r7, #4]
 80012c4:	883a      	ldrh	r2, [r7, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fe12 	bl	8000ef0 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0 - r, y0  , color);
 80012cc:	88fa      	ldrh	r2, [r7, #6]
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	88b9      	ldrh	r1, [r7, #4]
 80012d6:	883a      	ldrh	r2, [r7, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe09 	bl	8000ef0 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 - r, color);
 80012de:	88f8      	ldrh	r0, [r7, #6]
 80012e0:	88ba      	ldrh	r2, [r7, #4]
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	883a      	ldrh	r2, [r7, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fe00 	bl	8000ef0 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 + r, color);
 80012f0:	88f8      	ldrh	r0, [r7, #6]
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	883a      	ldrh	r2, [r7, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fdf7 	bl	8000ef0 <ST7735_DrawPixel>

  while (x < r)
 8001302:	e081      	b.n	8001408 <ST7735_DrawCircle+0x18c>
  {
    if (f >= 0)
 8001304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0e      	blt.n	800132a <ST7735_DrawCircle+0xae>
    {
      r--;
 800130c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001310:	b29b      	uxth	r3, r3
 8001312:	3b01      	subs	r3, #1
 8001314:	b29b      	uxth	r3, r3
 8001316:	807b      	strh	r3, [r7, #2]
      ddF_y += 2;
 8001318:	897b      	ldrh	r3, [r7, #10]
 800131a:	3302      	adds	r3, #2
 800131c:	b29b      	uxth	r3, r3
 800131e:	817b      	strh	r3, [r7, #10]
      f += ddF_y;
 8001320:	89fa      	ldrh	r2, [r7, #14]
 8001322:	897b      	ldrh	r3, [r7, #10]
 8001324:	4413      	add	r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	81fb      	strh	r3, [r7, #14]
    }
    x++;
 800132a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800132e:	b29b      	uxth	r3, r3
 8001330:	3301      	adds	r3, #1
 8001332:	b29b      	uxth	r3, r3
 8001334:	813b      	strh	r3, [r7, #8]
    ddF_x += 2;
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	3302      	adds	r3, #2
 800133a:	b29b      	uxth	r3, r3
 800133c:	81bb      	strh	r3, [r7, #12]
    f += ddF_x;
 800133e:	89fa      	ldrh	r2, [r7, #14]
 8001340:	89bb      	ldrh	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	b29b      	uxth	r3, r3
 8001346:	81fb      	strh	r3, [r7, #14]

    ST7735_DrawPixel(x0 + x, y0 + r, color);
 8001348:	88fa      	ldrh	r2, [r7, #6]
 800134a:	893b      	ldrh	r3, [r7, #8]
 800134c:	4413      	add	r3, r2
 800134e:	b298      	uxth	r0, r3
 8001350:	88ba      	ldrh	r2, [r7, #4]
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	883a      	ldrh	r2, [r7, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fdc8 	bl	8000ef0 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 + r, color);
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	893b      	ldrh	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b298      	uxth	r0, r3
 8001368:	88ba      	ldrh	r2, [r7, #4]
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	4413      	add	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	883a      	ldrh	r2, [r7, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fdbc 	bl	8000ef0 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 - r, color);
 8001378:	88fa      	ldrh	r2, [r7, #6]
 800137a:	893b      	ldrh	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	b298      	uxth	r0, r3
 8001380:	88ba      	ldrh	r2, [r7, #4]
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	883a      	ldrh	r2, [r7, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fdb0 	bl	8000ef0 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + x, y0 - r, color);
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	893b      	ldrh	r3, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	b298      	uxth	r0, r3
 8001398:	88ba      	ldrh	r2, [r7, #4]
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	883a      	ldrh	r2, [r7, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fda4 	bl	8000ef0 <ST7735_DrawPixel>

    ST7735_DrawPixel(x0 + r, y0 + x, color);
 80013a8:	88fa      	ldrh	r2, [r7, #6]
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	4413      	add	r3, r2
 80013ae:	b298      	uxth	r0, r3
 80013b0:	88ba      	ldrh	r2, [r7, #4]
 80013b2:	893b      	ldrh	r3, [r7, #8]
 80013b4:	4413      	add	r3, r2
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	883a      	ldrh	r2, [r7, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fd98 	bl	8000ef0 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 + x, color);
 80013c0:	88fa      	ldrh	r2, [r7, #6]
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	b298      	uxth	r0, r3
 80013c8:	88ba      	ldrh	r2, [r7, #4]
 80013ca:	893b      	ldrh	r3, [r7, #8]
 80013cc:	4413      	add	r3, r2
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	883a      	ldrh	r2, [r7, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	f7ff fd8c 	bl	8000ef0 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 - x, color);
 80013d8:	88fa      	ldrh	r2, [r7, #6]
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	b298      	uxth	r0, r3
 80013e0:	88ba      	ldrh	r2, [r7, #4]
 80013e2:	893b      	ldrh	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	883a      	ldrh	r2, [r7, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fd80 	bl	8000ef0 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + r, y0 - x, color);
 80013f0:	88fa      	ldrh	r2, [r7, #6]
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	4413      	add	r3, r2
 80013f6:	b298      	uxth	r0, r3
 80013f8:	88ba      	ldrh	r2, [r7, #4]
 80013fa:	893b      	ldrh	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	883a      	ldrh	r2, [r7, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fd74 	bl	8000ef0 <ST7735_DrawPixel>
  while (x < r)
 8001408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800140c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001410:	429a      	cmp	r2, r3
 8001412:	f6ff af77 	blt.w	8001304 <ST7735_DrawCircle+0x88>
  }
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}

08001420 <ST7735_FillTriangle>:
** Function name:           fillTriangle
** Description:             Draw a filled triangle using 3 arbitrary points
***************************************************************************************/
// Fill a triangle - original Adafruit function works well and code footprint is small
void ST7735_FillTriangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b08d      	sub	sp, #52	; 0x34
 8001424:	af00      	add	r7, sp, #0
 8001426:	4604      	mov	r4, r0
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4623      	mov	r3, r4
 8001430:	80fb      	strh	r3, [r7, #6]
 8001432:	4603      	mov	r3, r0
 8001434:	80bb      	strh	r3, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	807b      	strh	r3, [r7, #2]
 800143a:	4613      	mov	r3, r2
 800143c:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1)
 800143e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001442:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001446:	429a      	cmp	r2, r3
 8001448:	dd0b      	ble.n	8001462 <ST7735_FillTriangle+0x42>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 800144a:	88bb      	ldrh	r3, [r7, #4]
 800144c:	847b      	strh	r3, [r7, #34]	; 0x22
 800144e:	883b      	ldrh	r3, [r7, #0]
 8001450:	80bb      	strh	r3, [r7, #4]
 8001452:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001454:	803b      	strh	r3, [r7, #0]
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	843b      	strh	r3, [r7, #32]
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	80fb      	strh	r3, [r7, #6]
 800145e:	8c3b      	ldrh	r3, [r7, #32]
 8001460:	807b      	strh	r3, [r7, #2]
  }

  if (y1 > y2)
 8001462:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001466:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800146a:	429a      	cmp	r2, r3
 800146c:	dd0f      	ble.n	800148e <ST7735_FillTriangle+0x6e>
  {
	  SWAP_INT16_T(y2, y1); SWAP_INT16_T(x2, x1);
 800146e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001472:	83fb      	strh	r3, [r7, #30]
 8001474:	883b      	ldrh	r3, [r7, #0]
 8001476:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800147a:	8bfb      	ldrh	r3, [r7, #30]
 800147c:	803b      	strh	r3, [r7, #0]
 800147e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001482:	83bb      	strh	r3, [r7, #28]
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800148a:	8bbb      	ldrh	r3, [r7, #28]
 800148c:	807b      	strh	r3, [r7, #2]
  }

  if (y0 > y1)
 800148e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001492:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001496:	429a      	cmp	r2, r3
 8001498:	dd0b      	ble.n	80014b2 <ST7735_FillTriangle+0x92>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	837b      	strh	r3, [r7, #26]
 800149e:	883b      	ldrh	r3, [r7, #0]
 80014a0:	80bb      	strh	r3, [r7, #4]
 80014a2:	8b7b      	ldrh	r3, [r7, #26]
 80014a4:	803b      	strh	r3, [r7, #0]
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	833b      	strh	r3, [r7, #24]
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	80fb      	strh	r3, [r7, #6]
 80014ae:	8b3b      	ldrh	r3, [r7, #24]
 80014b0:	807b      	strh	r3, [r7, #2]
  }

  if (y0 == y2)
 80014b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014b6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d137      	bne.n	800152e <ST7735_FillTriangle+0x10e>
  { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x1 < a)      a = x1;
 80014c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014ca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014ce:	429a      	cmp	r2, r3
 80014d0:	da02      	bge.n	80014d8 <ST7735_FillTriangle+0xb8>
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80014d6:	e007      	b.n	80014e8 <ST7735_FillTriangle+0xc8>
    else if (x1 > b) b = x1;
 80014d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014dc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dd01      	ble.n	80014e8 <ST7735_FillTriangle+0xc8>
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (x2 < a)      a = x2;
 80014e8:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80014ec:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014f0:	429a      	cmp	r2, r3
 80014f2:	da03      	bge.n	80014fc <ST7735_FillTriangle+0xdc>
 80014f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80014f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80014fa:	e008      	b.n	800150e <ST7735_FillTriangle+0xee>
    else if (x2 > b) b = x2;
 80014fc:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001500:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001504:	429a      	cmp	r2, r3
 8001506:	dd02      	ble.n	800150e <ST7735_FillTriangle+0xee>
 8001508:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800150c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y0, b - a + 1, color);
 800150e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001510:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	b29b      	uxth	r3, r3
 8001516:	3301      	adds	r3, #1
 8001518:	b29b      	uxth	r3, r3
 800151a:	b21a      	sxth	r2, r3
 800151c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001520:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001524:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001528:	f000 f9c8 	bl	80018bc <ST7735_DrawFastHLine>
    return;
 800152c:	e0da      	b.n	80016e4 <ST7735_FillTriangle+0x2c4>
  }

  int16_t
  dx01 = x1 - x0,
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	b29b      	uxth	r3, r3
 8001536:	82fb      	strh	r3, [r7, #22]
  dy01 = y1 - y0,
 8001538:	883a      	ldrh	r2, [r7, #0]
 800153a:	88bb      	ldrh	r3, [r7, #4]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	82bb      	strh	r3, [r7, #20]
  dx02 = x2 - x0,
 8001542:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	b29b      	uxth	r3, r3
 800154c:	827b      	strh	r3, [r7, #18]
  dy02 = y2 - y0,
 800154e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001552:	88bb      	ldrh	r3, [r7, #4]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	823b      	strh	r3, [r7, #16]
  dx12 = x2 - x1,
 800155a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	81fb      	strh	r3, [r7, #14]
  dy12 = y2 - y1,
 8001566:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800156a:	883b      	ldrh	r3, [r7, #0]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	b29b      	uxth	r3, r3
 8001570:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 8001572:	2300      	movs	r3, #0
 8001574:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	84bb      	strh	r3, [r7, #36]	; 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if (y1 == y2) last = y1;  // Include y1 scanline
 800157a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800157e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001582:	429a      	cmp	r2, r3
 8001584:	d102      	bne.n	800158c <ST7735_FillTriangle+0x16c>
 8001586:	883b      	ldrh	r3, [r7, #0]
 8001588:	853b      	strh	r3, [r7, #40]	; 0x28
 800158a:	e003      	b.n	8001594 <ST7735_FillTriangle+0x174>
  else         last = y1 - 1; // Skip it
 800158c:	883b      	ldrh	r3, [r7, #0]
 800158e:	3b01      	subs	r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	853b      	strh	r3, [r7, #40]	; 0x28

  for (y = y0; y <= last; y++)
 8001594:	88bb      	ldrh	r3, [r7, #4]
 8001596:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001598:	e040      	b.n	800161c <ST7735_FillTriangle+0x1fc>
  {
    a   = x0 + sa / dy01;
 800159a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800159e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	4413      	add	r3, r2
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 80015b0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80015b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80015bc:	b29a      	uxth	r2, r3
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	4413      	add	r3, r2
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 80015c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015c8:	8afb      	ldrh	r3, [r7, #22]
 80015ca:	4413      	add	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 80015d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015d2:	8a7b      	ldrh	r3, [r7, #18]
 80015d4:	4413      	add	r3, r2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 80015da:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80015de:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dd05      	ble.n	80015f2 <ST7735_FillTriangle+0x1d2>
 80015e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015e8:	813b      	strh	r3, [r7, #8]
 80015ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80015ee:	893b      	ldrh	r3, [r7, #8]
 80015f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 80015f2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3301      	adds	r3, #1
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b21a      	sxth	r2, r3
 8001600:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001604:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8001608:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800160c:	f000 f956 	bl	80018bc <ST7735_DrawFastHLine>
  for (y = y0; y <= last; y++)
 8001610:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001614:	b29b      	uxth	r3, r3
 8001616:	3301      	adds	r3, #1
 8001618:	b29b      	uxth	r3, r3
 800161a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800161c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001620:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001624:	429a      	cmp	r2, r3
 8001626:	ddb8      	ble.n	800159a <ST7735_FillTriangle+0x17a>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 8001628:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800162c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	b29a      	uxth	r2, r3
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	fb12 f303 	smulbb	r3, r2, r3
 800163a:	b29b      	uxth	r3, r3
 800163c:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y0);
 800163e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001642:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	b29a      	uxth	r2, r3
 800164a:	8a7b      	ldrh	r3, [r7, #18]
 800164c:	fb12 f303 	smulbb	r3, r2, r3
 8001650:	b29b      	uxth	r3, r3
 8001652:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y2; y++)
 8001654:	e040      	b.n	80016d8 <ST7735_FillTriangle+0x2b8>
  {
    a   = x1 + sa / dy12;
 8001656:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800165a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800165e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001662:	b29a      	uxth	r2, r3
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	4413      	add	r3, r2
 8001668:	b29b      	uxth	r3, r3
 800166a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 800166c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001670:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001674:	fb92 f3f3 	sdiv	r3, r2, r3
 8001678:	b29a      	uxth	r2, r3
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	4413      	add	r3, r2
 800167e:	b29b      	uxth	r3, r3
 8001680:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 8001682:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001684:	89fb      	ldrh	r3, [r7, #14]
 8001686:	4413      	add	r3, r2
 8001688:	b29b      	uxth	r3, r3
 800168a:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 800168c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800168e:	8a7b      	ldrh	r3, [r7, #18]
 8001690:	4413      	add	r3, r2
 8001692:	b29b      	uxth	r3, r3
 8001694:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 8001696:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800169a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800169e:	429a      	cmp	r2, r3
 80016a0:	dd05      	ble.n	80016ae <ST7735_FillTriangle+0x28e>
 80016a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016a4:	817b      	strh	r3, [r7, #10]
 80016a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016aa:	897b      	ldrh	r3, [r7, #10]
 80016ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 80016ae:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016c0:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80016c4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80016c8:	f000 f8f8 	bl	80018bc <ST7735_DrawFastHLine>
  for (; y <= y2; y++)
 80016cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80016d8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80016dc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80016e0:	429a      	cmp	r2, r3
 80016e2:	ddb8      	ble.n	8001656 <ST7735_FillTriangle+0x236>
  }
}
 80016e4:	3734      	adds	r7, #52	; 0x34
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}

080016ea <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80016ea:	b590      	push	{r4, r7, lr}
 80016ec:	b089      	sub	sp, #36	; 0x24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4604      	mov	r4, r0
 80016f2:	4608      	mov	r0, r1
 80016f4:	4611      	mov	r1, r2
 80016f6:	461a      	mov	r2, r3
 80016f8:	4623      	mov	r3, r4
 80016fa:	80fb      	strh	r3, [r7, #6]
 80016fc:	4603      	mov	r3, r0
 80016fe:	80bb      	strh	r3, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001708:	f9b7 2000 	ldrsh.w	r2, [r7]
 800170c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001716:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800171a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001722:	1acb      	subs	r3, r1, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	bfb8      	it	lt
 8001728:	425b      	neglt	r3, r3
 800172a:	429a      	cmp	r2, r3
 800172c:	bfcc      	ite	gt
 800172e:	2301      	movgt	r3, #1
 8001730:	2300      	movle	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	837b      	strh	r3, [r7, #26]
	if (steep)
 8001736:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <ST7735_DrawLine+0x6c>
	{
		SWAP_INT16_T(x0, y0);
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	833b      	strh	r3, [r7, #24]
 8001742:	88bb      	ldrh	r3, [r7, #4]
 8001744:	80fb      	strh	r3, [r7, #6]
 8001746:	8b3b      	ldrh	r3, [r7, #24]
 8001748:	80bb      	strh	r3, [r7, #4]
		SWAP_INT16_T(x1, y1);
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	82fb      	strh	r3, [r7, #22]
 800174e:	883b      	ldrh	r3, [r7, #0]
 8001750:	807b      	strh	r3, [r7, #2]
 8001752:	8afb      	ldrh	r3, [r7, #22]
 8001754:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1)
 8001756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800175a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800175e:	429a      	cmp	r2, r3
 8001760:	dd0b      	ble.n	800177a <ST7735_DrawLine+0x90>
	{
		SWAP_INT16_T(x0, x1);
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	82bb      	strh	r3, [r7, #20]
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	80fb      	strh	r3, [r7, #6]
 800176a:	8abb      	ldrh	r3, [r7, #20]
 800176c:	807b      	strh	r3, [r7, #2]
		SWAP_INT16_T(y0, y1);
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	827b      	strh	r3, [r7, #18]
 8001772:	883b      	ldrh	r3, [r7, #0]
 8001774:	80bb      	strh	r3, [r7, #4]
 8001776:	8a7b      	ldrh	r3, [r7, #18]
 8001778:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8001784:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001788:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	bfb8      	it	lt
 8001792:	425b      	neglt	r3, r3
 8001794:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8001796:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800179a:	0fda      	lsrs	r2, r3, #31
 800179c:	4413      	add	r3, r2
 800179e:	105b      	asrs	r3, r3, #1
 80017a0:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 80017a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	da02      	bge.n	80017b4 <ST7735_DrawLine+0xca>
	{
		ystep = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	83bb      	strh	r3, [r7, #28]
 80017b2:	e02d      	b.n	8001810 <ST7735_DrawLine+0x126>
	}
	else
	{
		ystep = -1;
 80017b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b8:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0<=x1; x0++)
 80017ba:	e029      	b.n	8001810 <ST7735_DrawLine+0x126>
	{
		if (steep)
 80017bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <ST7735_DrawLine+0xe8>
		{
			ST7735_DrawPixel(y0, x0, color);
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	88f9      	ldrh	r1, [r7, #6]
 80017c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fb90 	bl	8000ef0 <ST7735_DrawPixel>
 80017d0:	e005      	b.n	80017de <ST7735_DrawLine+0xf4>
		}
		else
		{
			ST7735_DrawPixel(x0, y0, color);
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	88b9      	ldrh	r1, [r7, #4]
 80017d6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fb89 	bl	8000ef0 <ST7735_DrawPixel>
		}
		err -= dy;
 80017de:	8bfa      	ldrh	r2, [r7, #30]
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 80017e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	da09      	bge.n	8001804 <ST7735_DrawLine+0x11a>
		{
			y0 += ystep;
 80017f0:	88ba      	ldrh	r2, [r7, #4]
 80017f2:	8bbb      	ldrh	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80017fa:	8bfa      	ldrh	r2, [r7, #30]
 80017fc:	8a3b      	ldrh	r3, [r7, #16]
 80017fe:	4413      	add	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	83fb      	strh	r3, [r7, #30]
	for (; x0<=x1; x0++)
 8001804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001808:	b29b      	uxth	r3, r3
 800180a:	3301      	adds	r3, #1
 800180c:	b29b      	uxth	r3, r3
 800180e:	80fb      	strh	r3, [r7, #6]
 8001810:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001814:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001818:	429a      	cmp	r2, r3
 800181a:	ddcf      	ble.n	80017bc <ST7735_DrawLine+0xd2>
		}
	}
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
	...

08001828 <ST7735_DrawFastVLine>:
/***************************************************************************************
** Function name:           drawFastVLine
** Description:             draw a vertical line
***************************************************************************************/
void ST7735_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b085      	sub	sp, #20
 800182c:	af02      	add	r7, sp, #8
 800182e:	4604      	mov	r4, r0
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	461a      	mov	r2, r3
 8001836:	4623      	mov	r3, r4
 8001838:	80fb      	strh	r3, [r7, #6]
 800183a:	4603      	mov	r3, r0
 800183c:	80bb      	strh	r3, [r7, #4]
 800183e:	460b      	mov	r3, r1
 8001840:	807b      	strh	r3, [r7, #2]
 8001842:	4613      	mov	r3, r2
 8001844:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <ST7735_DrawFastVLine+0x8c>)
 8001848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001850:	429a      	cmp	r2, r3
 8001852:	da2b      	bge.n	80018ac <ST7735_DrawFastVLine+0x84>
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <ST7735_DrawFastVLine+0x90>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	da24      	bge.n	80018ac <ST7735_DrawFastVLine+0x84>
  if ((y + h - 1) >= _height) h = _height - y;
 8001862:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001866:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800186a:	4413      	add	r3, r2
 800186c:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <ST7735_DrawFastVLine+0x90>)
 800186e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001872:	4293      	cmp	r3, r2
 8001874:	dd07      	ble.n	8001886 <ST7735_DrawFastVLine+0x5e>
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <ST7735_DrawFastVLine+0x90>)
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	b29a      	uxth	r2, r3
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	b29b      	uxth	r3, r3
 8001884:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x, y + h - 1, color);
 8001886:	88ba      	ldrh	r2, [r7, #4]
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	4413      	add	r3, r2
 800188c:	b29b      	uxth	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b29b      	uxth	r3, r3
 8001892:	b21c      	sxth	r4, r3
 8001894:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001898:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800189c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80018a0:	883b      	ldrh	r3, [r7, #0]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4623      	mov	r3, r4
 80018a6:	f7ff ff20 	bl	80016ea <ST7735_DrawLine>
 80018aa:	e000      	b.n	80018ae <ST7735_DrawFastVLine+0x86>
  if ((x >= _width) || (y >= _height)) return;
 80018ac:	bf00      	nop
}
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	2000001e 	.word	0x2000001e
 80018b8:	2000001c 	.word	0x2000001c

080018bc <ST7735_DrawFastHLine>:
/***************************************************************************************
** Function name:           drawFastHLine
** Description:             draw a horizontal line
***************************************************************************************/
void ST7735_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	4604      	mov	r4, r0
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	4603      	mov	r3, r0
 80018d0:	80bb      	strh	r3, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	807b      	strh	r3, [r7, #2]
 80018d6:	4613      	mov	r3, r2
 80018d8:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <ST7735_DrawFastHLine+0x8c>)
 80018dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	da2b      	bge.n	8001940 <ST7735_DrawFastHLine+0x84>
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <ST7735_DrawFastHLine+0x90>)
 80018ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	da24      	bge.n	8001940 <ST7735_DrawFastHLine+0x84>
  if ((x + w - 1) >= _width)  w = _width - x;
 80018f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018fe:	4413      	add	r3, r2
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <ST7735_DrawFastHLine+0x8c>)
 8001902:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001906:	4293      	cmp	r3, r2
 8001908:	dd07      	ble.n	800191a <ST7735_DrawFastHLine+0x5e>
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <ST7735_DrawFastHLine+0x8c>)
 800190c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001910:	b29a      	uxth	r2, r3
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	b29b      	uxth	r3, r3
 8001918:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x + w - 1, y, color);
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	4413      	add	r3, r2
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b01      	subs	r3, #1
 8001924:	b29b      	uxth	r3, r3
 8001926:	b21a      	sxth	r2, r3
 8001928:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800192c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001930:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001934:	883b      	ldrh	r3, [r7, #0]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4623      	mov	r3, r4
 800193a:	f7ff fed6 	bl	80016ea <ST7735_DrawLine>
 800193e:	e000      	b.n	8001942 <ST7735_DrawFastHLine+0x86>
  if ((x >= _width) || (y >= _height)) return;
 8001940:	bf00      	nop
}
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bd90      	pop	{r4, r7, pc}
 8001948:	2000001e 	.word	0x2000001e
 800194c:	2000001c 	.word	0x2000001c

08001950 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <ST7735_SetRotation+0x13c>)
 8001964:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800196c:	4848      	ldr	r0, [pc, #288]	; (8001a90 <ST7735_SetRotation+0x140>)
 800196e:	f000 fdc9 	bl	8002504 <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 8001972:	2036      	movs	r0, #54	; 0x36
 8001974:	f7ff f956 	bl	8000c24 <ST7735_WriteCommand>

  switch (_value_rotation)
 8001978:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <ST7735_SetRotation+0x13c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d87b      	bhi.n	8001a78 <ST7735_SetRotation+0x128>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <ST7735_SetRotation+0x38>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	08001999 	.word	0x08001999
 800198c:	080019d5 	.word	0x080019d5
 8001990:	08001a11 	.word	0x08001a11
 8001994:	08001a3d 	.word	0x08001a3d
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 8001998:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <ST7735_SetRotation+0x144>)
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <ST7735_SetRotation+0x144>)
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <ST7735_SetRotation+0x144>)
 80019a6:	78db      	ldrb	r3, [r3, #3]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80019ae:	f107 030f 	add.w	r3, r7, #15
 80019b2:	2101      	movs	r1, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f94f 	bl	8000c58 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <ST7735_SetRotation+0x148>)
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <ST7735_SetRotation+0x14c>)
 80019c2:	22a0      	movs	r2, #160	; 0xa0
 80019c4:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 80019c6:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <ST7735_SetRotation+0x150>)
 80019c8:	2202      	movs	r2, #2
 80019ca:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <ST7735_SetRotation+0x154>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
    }
     break;
 80019d2:	e051      	b.n	8001a78 <ST7735_SetRotation+0x128>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <ST7735_SetRotation+0x144>)
 80019d6:	785a      	ldrb	r2, [r3, #1]
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <ST7735_SetRotation+0x144>)
 80019da:	789b      	ldrb	r3, [r3, #2]
 80019dc:	4313      	orrs	r3, r2
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <ST7735_SetRotation+0x144>)
 80019e2:	78db      	ldrb	r3, [r3, #3]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80019ea:	f107 030e 	add.w	r3, r7, #14
 80019ee:	2101      	movs	r1, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f931 	bl	8000c58 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <ST7735_SetRotation+0x148>)
 80019f8:	22a0      	movs	r2, #160	; 0xa0
 80019fa:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <ST7735_SetRotation+0x14c>)
 80019fe:	2280      	movs	r2, #128	; 0x80
 8001a00:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8001a02:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <ST7735_SetRotation+0x150>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <ST7735_SetRotation+0x154>)
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001a0e:	e033      	b.n	8001a78 <ST7735_SetRotation+0x128>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <ST7735_SetRotation+0x144>)
 8001a12:	78db      	ldrb	r3, [r3, #3]
 8001a14:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001a16:	f107 030d 	add.w	r3, r7, #13
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f91b 	bl	8000c58 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <ST7735_SetRotation+0x148>)
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <ST7735_SetRotation+0x14c>)
 8001a2a:	22a0      	movs	r2, #160	; 0xa0
 8001a2c:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <ST7735_SetRotation+0x150>)
 8001a30:	2202      	movs	r2, #2
 8001a32:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <ST7735_SetRotation+0x154>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001a3a:	e01d      	b.n	8001a78 <ST7735_SetRotation+0x128>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <ST7735_SetRotation+0x144>)
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <ST7735_SetRotation+0x144>)
 8001a42:	789b      	ldrb	r3, [r3, #2]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <ST7735_SetRotation+0x144>)
 8001a4a:	78db      	ldrb	r3, [r3, #3]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	2101      	movs	r1, #1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f8fd 	bl	8000c58 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <ST7735_SetRotation+0x148>)
 8001a60:	22a0      	movs	r2, #160	; 0xa0
 8001a62:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <ST7735_SetRotation+0x14c>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <ST7735_SetRotation+0x150>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <ST7735_SetRotation+0x154>)
 8001a72:	2202      	movs	r2, #2
 8001a74:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001a76:	bf00      	nop
  }
  TFT_CS_H();
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a7e:	4804      	ldr	r0, [pc, #16]	; (8001a90 <ST7735_SetRotation+0x140>)
 8001a80:	f000 fd40 	bl	8002504 <HAL_GPIO_WritePin>
}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000004d 	.word	0x2000004d
 8001a90:	48000400 	.word	0x48000400
 8001a94:	20000018 	.word	0x20000018
 8001a98:	2000001e 	.word	0x2000001e
 8001a9c:	2000001c 	.word	0x2000001c
 8001aa0:	20000020 	.word	0x20000020
 8001aa4:	20000021 	.word	0x20000021

08001aa8 <ST7735_GetHeight>:
{
  return _value_rotation;
}

int16_t ST7735_GetHeight(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
	return _height;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <ST7735_GetHeight+0x14>)
 8001aae:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	2000001c 	.word	0x2000001c

08001ac0 <ST7735_GetWidth>:

int16_t ST7735_GetWidth(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	return _width;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <ST7735_GetWidth+0x14>)
 8001ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	2000001e 	.word	0x2000001e

08001ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_MspInit+0x44>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_MspInit+0x44>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_MspInit+0x44>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_MspInit+0x44>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_MspInit+0x44>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6593      	str	r3, [r2, #88]	; 0x58
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_MspInit+0x44>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <HAL_SPI_MspInit+0xc4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d14c      	bne.n	8001bdc <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_SPI_MspInit+0xc8>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	4a28      	ldr	r2, [pc, #160]	; (8001be8 <HAL_SPI_MspInit+0xc8>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <HAL_SPI_MspInit+0xc8>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_SPI_MspInit+0xc8>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <HAL_SPI_MspInit+0xc8>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_SPI_MspInit+0xc8>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_SPI_MspInit+0xc8>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <HAL_SPI_MspInit+0xc8>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_SPI_MspInit+0xc8>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4811      	ldr	r0, [pc, #68]	; (8001bec <HAL_SPI_MspInit+0xcc>)
 8001ba6:	f000 fb03 	bl	80021b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480a      	ldr	r0, [pc, #40]	; (8001bf0 <HAL_SPI_MspInit+0xd0>)
 8001bc8:	f000 faf2 	bl	80021b0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2024      	movs	r0, #36	; 0x24
 8001bd2:	f000 fa76 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bd6:	2024      	movs	r0, #36	; 0x24
 8001bd8:	f000 fa8f 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40003800 	.word	0x40003800
 8001be8:	40021000 	.word	0x40021000
 8001bec:	48000800 	.word	0x48000800
 8001bf0:	48000400 	.word	0x48000400

08001bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b0ac      	sub	sp, #176	; 0xb0
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2288      	movs	r2, #136	; 0x88
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 f8c9 	bl	8004dac <memset>
  if(huart->Instance==USART2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <HAL_UART_MspInit+0xb0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d13b      	bne.n	8001c9c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 faf9 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c3c:	f7fe ffd0 	bl	8000be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_UART_MspInit+0xb4>)
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <HAL_UART_MspInit+0xb4>)
 8001c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_UART_MspInit+0xb4>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_UART_MspInit+0xb4>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <HAL_UART_MspInit+0xb4>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_UART_MspInit+0xb4>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c70:	230c      	movs	r3, #12
 8001c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c98:	f000 fa8a 	bl	80021b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c9c:	bf00      	nop
 8001c9e:	37b0      	adds	r7, #176	; 0xb0
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40004400 	.word	0x40004400
 8001ca8:	40021000 	.word	0x40021000

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <NMI_Handler+0x4>

08001cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler+0x4>

08001cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 f8c4 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <SPI2_IRQHandler+0x10>)
 8001d06:	f002 f96d 	bl	8003fe4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000050 	.word	0x20000050

08001d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <SystemInit+0x5c>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <SystemInit+0x5c>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <SystemInit+0x60>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <SystemInit+0x60>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <SystemInit+0x60>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <SystemInit+0x60>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <SystemInit+0x60>)
 8001d40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <SystemInit+0x60>)
 8001d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <SystemInit+0x60>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <SystemInit+0x60>)
 8001d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SystemInit+0x60>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00
 8001d74:	40021000 	.word	0x40021000

08001d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d7c:	f7ff ffca 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d82:	e003      	b.n	8001d8c <LoopCopyDataInit>

08001d84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d8a:	3104      	adds	r1, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d8c:	480a      	ldr	r0, [pc, #40]	; (8001db8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d94:	d3f6      	bcc.n	8001d84 <CopyDataInit>
	ldr	r2, =_sbss
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d98:	e002      	b.n	8001da0 <LoopFillZerobss>

08001d9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d9c:	f842 3b04 	str.w	r3, [r2], #4

08001da0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <LoopForever+0x16>)
	cmp	r2, r3
 8001da2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001da4:	d3f9      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da6:	f002 ffdd 	bl	8004d64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001daa:	f7fe fdaf 	bl	800090c <main>

08001dae <LoopForever>:

LoopForever:
    b LoopForever
 8001dae:	e7fe      	b.n	8001dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001db0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001db4:	0800f754 	.word	0x0800f754
	ldr	r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001dbc:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8001dc0:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8001dc4:	2000013c 	.word	0x2000013c

08001dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC1_2_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_Init+0x3c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <HAL_Init+0x3c>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de2:	2003      	movs	r0, #3
 8001de4:	f000 f962 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de8:	2000      	movs	r0, #0
 8001dea:	f000 f80f 	bl	8001e0c <HAL_InitTick>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	e001      	b.n	8001dfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dfa:	f7ff fe6d 	bl	8001ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40022000 	.word	0x40022000

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_InitTick+0x6c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d023      	beq.n	8001e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_InitTick+0x70>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_InitTick+0x6c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f96d 	bl	8002116 <HAL_SYSTICK_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d809      	bhi.n	8001e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f000 f937 	bl	80020c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_InitTick+0x74>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e007      	b.n	8001e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e004      	b.n	8001e6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	e001      	b.n	8001e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000002c 	.word	0x2000002c
 8001e7c:	20000024 	.word	0x20000024
 8001e80:	20000028 	.word	0x20000028

08001e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	2000002c 	.word	0x2000002c
 8001ea8:	20000138 	.word	0x20000138

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000138 	.word	0x20000138

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff ffee 	bl	8001eac <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_Delay+0x44>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eea:	bf00      	nop
 8001eec:	f7ff ffde 	bl	8001eac <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000002c 	.word	0x2000002c

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d005      	beq.n	8002152 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e029      	b.n	80021a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 020e 	bic.w	r2, r2, #14
 8002160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f003 021c 	and.w	r2, r3, #28
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f202 	lsl.w	r2, r1, r2
 8002184:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
    }
  }
  return status;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	e17f      	b.n	80024c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	4013      	ands	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8171 	beq.w	80024ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d00b      	beq.n	80021f8 <HAL_GPIO_Init+0x48>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d007      	beq.n	80021f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ec:	2b11      	cmp	r3, #17
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b12      	cmp	r3, #18
 80021f6:	d130      	bne.n	800225a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800222e:	2201      	movs	r2, #1
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 0201 	and.w	r2, r3, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b03      	cmp	r3, #3
 8002264:	d118      	bne.n	8002298 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800226c:	2201      	movs	r2, #1
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	f003 0201 	and.w	r2, r3, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x128>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b12      	cmp	r3, #18
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	6939      	ldr	r1, [r7, #16]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80ac 	beq.w	80024ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <HAL_GPIO_Init+0x330>)
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	4a5e      	ldr	r2, [pc, #376]	; (80024e0 <HAL_GPIO_Init+0x330>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6613      	str	r3, [r2, #96]	; 0x60
 800236e:	4b5c      	ldr	r3, [pc, #368]	; (80024e0 <HAL_GPIO_Init+0x330>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800237a:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <HAL_GPIO_Init+0x334>)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002386:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023a4:	d025      	beq.n	80023f2 <HAL_GPIO_Init+0x242>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4f      	ldr	r2, [pc, #316]	; (80024e8 <HAL_GPIO_Init+0x338>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <HAL_GPIO_Init+0x23e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4e      	ldr	r2, [pc, #312]	; (80024ec <HAL_GPIO_Init+0x33c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x23a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4d      	ldr	r2, [pc, #308]	; (80024f0 <HAL_GPIO_Init+0x340>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x236>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4c      	ldr	r2, [pc, #304]	; (80024f4 <HAL_GPIO_Init+0x344>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x232>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4b      	ldr	r2, [pc, #300]	; (80024f8 <HAL_GPIO_Init+0x348>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x22e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4a      	ldr	r2, [pc, #296]	; (80024fc <HAL_GPIO_Init+0x34c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x22a>
 80023d6:	2306      	movs	r3, #6
 80023d8:	e00c      	b.n	80023f4 <HAL_GPIO_Init+0x244>
 80023da:	2307      	movs	r3, #7
 80023dc:	e00a      	b.n	80023f4 <HAL_GPIO_Init+0x244>
 80023de:	2305      	movs	r3, #5
 80023e0:	e008      	b.n	80023f4 <HAL_GPIO_Init+0x244>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x244>
 80023e6:	2303      	movs	r3, #3
 80023e8:	e004      	b.n	80023f4 <HAL_GPIO_Init+0x244>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e002      	b.n	80023f4 <HAL_GPIO_Init+0x244>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x244>
 80023f2:	2300      	movs	r3, #0
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	f002 0203 	and.w	r2, r2, #3
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	4093      	lsls	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002404:	4937      	ldr	r1, [pc, #220]	; (80024e4 <HAL_GPIO_Init+0x334>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_GPIO_Init+0x350>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002436:	4a32      	ldr	r2, [pc, #200]	; (8002500 <HAL_GPIO_Init+0x350>)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_GPIO_Init+0x350>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002460:	4a27      	ldr	r2, [pc, #156]	; (8002500 <HAL_GPIO_Init+0x350>)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_GPIO_Init+0x350>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800248a:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <HAL_GPIO_Init+0x350>)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_GPIO_Init+0x350>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024b4:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_GPIO_Init+0x350>)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	3301      	adds	r3, #1
 80024be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f47f ae78 	bne.w	80021c0 <HAL_GPIO_Init+0x10>
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40010000 	.word	0x40010000
 80024e8:	48000400 	.word	0x48000400
 80024ec:	48000800 	.word	0x48000800
 80024f0:	48000c00 	.word	0x48000c00
 80024f4:	48001000 	.word	0x48001000
 80024f8:	48001400 	.word	0x48001400
 80024fc:	48001800 	.word	0x48001800
 8002500:	40010400 	.word	0x40010400

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
 8002510:	4613      	mov	r3, r2
 8002512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002520:	e002      	b.n	8002528 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43d9      	mvns	r1, r3
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	400b      	ands	r3, r1
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40007000 	.word	0x40007000

08002588 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40007000 	.word	0x40007000

080025a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b2:	d130      	bne.n	8002616 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c0:	d038      	beq.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2232      	movs	r2, #50	; 0x32
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	4a1b      	ldr	r2, [pc, #108]	; (800264c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0c9b      	lsrs	r3, r3, #18
 80025e4:	3301      	adds	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e8:	e002      	b.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fc:	d102      	bne.n	8002604 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f2      	bne.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002610:	d110      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e00f      	b.n	8002636 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800261e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002622:	d007      	beq.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800262c:	4a05      	ldr	r2, [pc, #20]	; (8002644 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002632:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40007000 	.word	0x40007000
 8002648:	20000024 	.word	0x20000024
 800264c:	431bde83 	.word	0x431bde83

08002650 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e3d4      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002662:	4ba1      	ldr	r3, [pc, #644]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800266c:	4b9e      	ldr	r3, [pc, #632]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80e4 	beq.w	800284c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_RCC_OscConfig+0x4a>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	f040 808b 	bne.w	80027a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b01      	cmp	r3, #1
 8002696:	f040 8087 	bne.w	80027a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800269a:	4b93      	ldr	r3, [pc, #588]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x62>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e3ac      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <HAL_RCC_OscConfig+0x7c>
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ca:	e005      	b.n	80026d8 <HAL_RCC_OscConfig+0x88>
 80026cc:	4b86      	ldr	r3, [pc, #536]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d8:	4293      	cmp	r3, r2
 80026da:	d223      	bcs.n	8002724 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fd41 	bl	8003168 <RCC_SetFlashLatencyFromMSIRange>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e38d      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f0:	4b7d      	ldr	r3, [pc, #500]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a7c      	ldr	r2, [pc, #496]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b7a      	ldr	r3, [pc, #488]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4977      	ldr	r1, [pc, #476]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	4972      	ldr	r1, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
 8002722:	e025      	b.n	8002770 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002724:	4b70      	ldr	r3, [pc, #448]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6f      	ldr	r2, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 800272a:	f043 0308 	orr.w	r3, r3, #8
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	496a      	ldr	r1, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002742:	4b69      	ldr	r3, [pc, #420]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	4965      	ldr	r1, [pc, #404]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fd01 	bl	8003168 <RCC_SetFlashLatencyFromMSIRange>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e34d      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002770:	f000 fc36 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	495a      	ldr	r1, [pc, #360]	; (80028ec <HAL_RCC_OscConfig+0x29c>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_RCC_OscConfig+0x2a0>)
 800278e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002790:	4b58      	ldr	r3, [pc, #352]	; (80028f4 <HAL_RCC_OscConfig+0x2a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fb39 	bl	8001e0c <HAL_InitTick>
 800279a:	4603      	mov	r3, r0
 800279c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d052      	beq.n	800284a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	e331      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d032      	beq.n	8002816 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027b0:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027bc:	f7ff fb76 	bl	8001eac <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c4:	f7ff fb72 	bl	8001eac <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e31a      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e2:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a40      	ldr	r2, [pc, #256]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	493b      	ldr	r1, [pc, #236]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002800:	4b39      	ldr	r3, [pc, #228]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	4936      	ldr	r1, [pc, #216]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
 8002814:	e01a      	b.n	800284c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002816:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a33      	ldr	r2, [pc, #204]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002822:	f7ff fb43 	bl	8001eac <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800282a:	f7ff fb3f 	bl	8001eac <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e2e7      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x1da>
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800284a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d074      	beq.n	8002942 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b08      	cmp	r3, #8
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x21a>
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d10e      	bne.n	8002882 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d10b      	bne.n	8002882 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d064      	beq.n	8002940 <HAL_RCC_OscConfig+0x2f0>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d160      	bne.n	8002940 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e2c4      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x24a>
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a15      	ldr	r2, [pc, #84]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e01d      	b.n	80028d6 <HAL_RCC_OscConfig+0x286>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a2:	d10c      	bne.n	80028be <HAL_RCC_OscConfig+0x26e>
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0f      	ldr	r2, [pc, #60]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80028aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	e00b      	b.n	80028d6 <HAL_RCC_OscConfig+0x286>
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80028c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <HAL_RCC_OscConfig+0x298>)
 80028d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01c      	beq.n	8002918 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7ff fae5 	bl	8001eac <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e4:	e011      	b.n	800290a <HAL_RCC_OscConfig+0x2ba>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	0800f6fc 	.word	0x0800f6fc
 80028f0:	20000024 	.word	0x20000024
 80028f4:	20000028 	.word	0x20000028
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7ff fad8 	bl	8001eac <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e280      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290a:	4baf      	ldr	r3, [pc, #700]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x2a8>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7ff fac8 	bl	8001eac <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff fac4 	bl	8001eac <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e26c      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002932:	4ba5      	ldr	r3, [pc, #660]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x2d0>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d060      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d005      	beq.n	8002960 <HAL_RCC_OscConfig+0x310>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d119      	bne.n	800298e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d116      	bne.n	800298e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002960:	4b99      	ldr	r3, [pc, #612]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_OscConfig+0x328>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e249      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b93      	ldr	r3, [pc, #588]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	4990      	ldr	r1, [pc, #576]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298c:	e040      	b.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d023      	beq.n	80029de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002996:	4b8c      	ldr	r3, [pc, #560]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a8b      	ldr	r2, [pc, #556]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7ff fa83 	bl	8001eac <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029aa:	f7ff fa7f 	bl	8001eac <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e227      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029bc:	4b82      	ldr	r3, [pc, #520]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b7f      	ldr	r3, [pc, #508]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	497c      	ldr	r1, [pc, #496]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
 80029dc:	e018      	b.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029de:	4b7a      	ldr	r3, [pc, #488]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a79      	ldr	r2, [pc, #484]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 80029e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7ff fa5f 	bl	8001eac <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f2:	f7ff fa5b 	bl	8001eac <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e203      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a04:	4b70      	ldr	r3, [pc, #448]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d03c      	beq.n	8002a96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a24:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2a:	4a67      	ldr	r2, [pc, #412]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7ff fa3a 	bl	8001eac <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7ff fa36 	bl	8001eac <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1de      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a4e:	4b5e      	ldr	r3, [pc, #376]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ef      	beq.n	8002a3c <HAL_RCC_OscConfig+0x3ec>
 8002a5c:	e01b      	b.n	8002a96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5e:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a64:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fa1d 	bl	8001eac <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a76:	f7ff fa19 	bl	8001eac <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1c1      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a88:	4b4f      	ldr	r3, [pc, #316]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ef      	bne.n	8002a76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80a6 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002aa8:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab4:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	4a43      	ldr	r2, [pc, #268]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abe:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac0:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002acc:	2301      	movs	r3, #1
 8002ace:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad0:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <HAL_RCC_OscConfig+0x57c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d118      	bne.n	8002b0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002adc:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCC_OscConfig+0x57c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3a      	ldr	r2, [pc, #232]	; (8002bcc <HAL_RCC_OscConfig+0x57c>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae8:	f7ff f9e0 	bl	8001eac <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7ff f9dc 	bl	8001eac <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e184      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b02:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <HAL_RCC_OscConfig+0x57c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4d8>
 8002b16:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	4a2a      	ldr	r2, [pc, #168]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b26:	e024      	b.n	8002b72 <HAL_RCC_OscConfig+0x522>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d110      	bne.n	8002b52 <HAL_RCC_OscConfig+0x502>
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b40:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b50:	e00f      	b.n	8002b72 <HAL_RCC_OscConfig+0x522>
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b62:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b6a:	f023 0304 	bic.w	r3, r3, #4
 8002b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7a:	f7ff f997 	bl	8001eac <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7ff f993 	bl	8001eac <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e139      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_OscConfig+0x578>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0ed      	beq.n	8002b82 <HAL_RCC_OscConfig+0x532>
 8002ba6:	e01a      	b.n	8002bde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7ff f980 	bl	8001eac <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bae:	e00f      	b.n	8002bd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb0:	f7ff f97c 	bl	8001eac <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d906      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e122      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd0:	4b90      	ldr	r3, [pc, #576]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e8      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bde:	7ffb      	ldrb	r3, [r7, #31]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	4a8a      	ldr	r2, [pc, #552]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8108 	beq.w	8002e0a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	f040 80d0 	bne.w	8002da4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c04:	4b83      	ldr	r3, [pc, #524]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d130      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	3b01      	subs	r3, #1
 8002c24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d127      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d11f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c44:	2a07      	cmp	r2, #7
 8002c46:	bf14      	ite	ne
 8002c48:	2201      	movne	r2, #1
 8002c4a:	2200      	moveq	r2, #0
 8002c4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d113      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d06e      	beq.n	8002d58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b0c      	cmp	r3, #12
 8002c7e:	d069      	beq.n	8002d54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c80:	4b64      	ldr	r3, [pc, #400]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c8c:	4b61      	ldr	r3, [pc, #388]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b7      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c9c:	4b5d      	ldr	r3, [pc, #372]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5c      	ldr	r2, [pc, #368]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca8:	f7ff f900 	bl	8001eac <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7ff f8fc 	bl	8001eac <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0a4      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc2:	4b54      	ldr	r3, [pc, #336]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cce:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <HAL_RCC_OscConfig+0x7c8>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ce8:	0212      	lsls	r2, r2, #8
 8002cea:	4311      	orrs	r1, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cf0:	0852      	lsrs	r2, r2, #1
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	0552      	lsls	r2, r2, #21
 8002cf6:	4311      	orrs	r1, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cfc:	0852      	lsrs	r2, r2, #1
 8002cfe:	3a01      	subs	r2, #1
 8002d00:	0652      	lsls	r2, r2, #25
 8002d02:	4311      	orrs	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d08:	0912      	lsrs	r2, r2, #4
 8002d0a:	0452      	lsls	r2, r2, #17
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	4941      	ldr	r1, [pc, #260]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d14:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3e      	ldr	r2, [pc, #248]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d20:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a3b      	ldr	r2, [pc, #236]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d2c:	f7ff f8be 	bl	8001eac <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7ff f8ba 	bl	8001eac <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e062      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d52:	e05a      	b.n	8002e0a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e059      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d58:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d152      	bne.n	8002e0a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d64:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a2a      	ldr	r2, [pc, #168]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d70:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d7c:	f7ff f896 	bl	8001eac <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7ff f892 	bl	8001eac <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e03a      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x734>
 8002da2:	e032      	b.n	8002e0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d02d      	beq.n	8002e06 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002dc8:	f023 0303 	bic.w	r3, r3, #3
 8002dcc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002dd4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ddc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7ff f865 	bl	8001eac <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7ff f861 	bl	8001eac <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e009      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_RCC_OscConfig+0x7c4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x796>
 8002e04:	e001      	b.n	8002e0a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	f99d808c 	.word	0xf99d808c

08002e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0c8      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d910      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b63      	ldr	r3, [pc, #396]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0207 	bic.w	r2, r3, #7
 8002e46:	4961      	ldr	r1, [pc, #388]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0b0      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d04c      	beq.n	8002f06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e74:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d121      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e09e      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8c:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d115      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e092      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e086      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb4:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e07e      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ec4:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f023 0203 	bic.w	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	493f      	ldr	r1, [pc, #252]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed6:	f7fe ffe9 	bl	8001eac <HAL_GetTick>
 8002eda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ede:	f7fe ffe5 	bl	8001eac <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e066      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef4:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 020c 	and.w	r2, r3, #12
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d1eb      	bne.n	8002ede <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f12:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	492c      	ldr	r1, [pc, #176]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d210      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 0207 	bic.w	r2, r3, #7
 8002f3a:	4924      	ldr	r1, [pc, #144]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_RCC_ClockConfig+0x1b0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e036      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4918      	ldr	r1, [pc, #96]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4910      	ldr	r1, [pc, #64]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f92:	f000 f825 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	490c      	ldr	r1, [pc, #48]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	fa22 f303 	lsr.w	r3, r2, r3
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe ff28 	bl	8001e0c <HAL_InitTick>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	0800f6fc 	.word	0x0800f6fc
 8002fd8:	20000024 	.word	0x20000024
 8002fdc:	20000028 	.word	0x20000028

08002fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fee:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_GetSysClockFreq+0x34>
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d121      	bne.n	8003052 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d11e      	bne.n	8003052 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003014:	4b34      	ldr	r3, [pc, #208]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d107      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003020:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e005      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003030:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800303c:	4a2b      	ldr	r2, [pc, #172]	; (80030ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003044:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d102      	bne.n	800305e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003058:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	e004      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d101      	bne.n	8003068 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003064:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003066:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d134      	bne.n	80030d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0xa6>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d003      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0xac>
 8003084:	e005      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003088:	617b      	str	r3, [r7, #20]
      break;
 800308a:	e005      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800308e:	617b      	str	r3, [r7, #20]
      break;
 8003090:	e002      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	617b      	str	r3, [r7, #20]
      break;
 8003096:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003098:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	3301      	adds	r3, #1
 80030a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	fb02 f203 	mul.w	r2, r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	0e5b      	lsrs	r3, r3, #25
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	3301      	adds	r3, #1
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030d8:	69bb      	ldr	r3, [r7, #24]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	0800f714 	.word	0x0800f714
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	007a1200 	.word	0x007a1200

080030f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCC_GetHCLKFreq+0x14>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000024 	.word	0x20000024

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003114:	f7ff fff0 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4904      	ldr	r1, [pc, #16]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000
 8003138:	0800f70c 	.word	0x0800f70c

0800313c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003140:	f7ff ffda 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0adb      	lsrs	r3, r3, #11
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4904      	ldr	r1, [pc, #16]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000
 8003164:	0800f70c 	.word	0x0800f70c

08003168 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003180:	f7ff fa02 	bl	8002588 <HAL_PWREx_GetVoltageRange>
 8003184:	6178      	str	r0, [r7, #20]
 8003186:	e014      	b.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	4a24      	ldr	r2, [pc, #144]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	6593      	str	r3, [r2, #88]	; 0x58
 8003194:	4b22      	ldr	r3, [pc, #136]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031a0:	f7ff f9f2 	bl	8002588 <HAL_PWREx_GetVoltageRange>
 80031a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031a6:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b8:	d10b      	bne.n	80031d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b80      	cmp	r3, #128	; 0x80
 80031be:	d919      	bls.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2ba0      	cmp	r3, #160	; 0xa0
 80031c4:	d902      	bls.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031c6:	2302      	movs	r3, #2
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e013      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031cc:	2301      	movs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	e010      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b80      	cmp	r3, #128	; 0x80
 80031d6:	d902      	bls.n	80031de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031d8:	2303      	movs	r3, #3
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e00a      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d102      	bne.n	80031ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031e4:	2302      	movs	r3, #2
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	e004      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b70      	cmp	r3, #112	; 0x70
 80031ee:	d101      	bne.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f0:	2301      	movs	r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 0207 	bic.w	r2, r3, #7
 80031fc:	4909      	ldr	r1, [pc, #36]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003204:	4b07      	ldr	r3, [pc, #28]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	40022000 	.word	0x40022000

08003228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003230:	2300      	movs	r3, #0
 8003232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003234:	2300      	movs	r3, #0
 8003236:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003240:	2b00      	cmp	r3, #0
 8003242:	d041      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003248:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800324c:	d02a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800324e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003252:	d824      	bhi.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003254:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003258:	d008      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800325a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800325e:	d81e      	bhi.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003268:	d010      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800326a:	e018      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800326c:	4b86      	ldr	r3, [pc, #536]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a85      	ldr	r2, [pc, #532]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003276:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003278:	e015      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3304      	adds	r3, #4
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f000 facb 	bl	800381c <RCCEx_PLLSAI1_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800328a:	e00c      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3320      	adds	r3, #32
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fbb6 	bl	8003a04 <RCCEx_PLLSAI2_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800329c:	e003      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	74fb      	strb	r3, [r7, #19]
      break;
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a6:	7cfb      	ldrb	r3, [r7, #19]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ac:	4b76      	ldr	r3, [pc, #472]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ba:	4973      	ldr	r1, [pc, #460]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032c2:	e001      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d041      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032dc:	d02a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032e2:	d824      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032e8:	d008      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ee:	d81e      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f8:	d010      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032fa:	e018      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032fc:	4b62      	ldr	r3, [pc, #392]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a61      	ldr	r2, [pc, #388]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003306:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003308:	e015      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3304      	adds	r3, #4
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fa83 	bl	800381c <RCCEx_PLLSAI1_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800331a:	e00c      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3320      	adds	r3, #32
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fb6e 	bl	8003a04 <RCCEx_PLLSAI2_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800332c:	e003      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	74fb      	strb	r3, [r7, #19]
      break;
 8003332:	e000      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003336:	7cfb      	ldrb	r3, [r7, #19]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10b      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800333c:	4b52      	ldr	r3, [pc, #328]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800334a:	494f      	ldr	r1, [pc, #316]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003352:	e001      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a0 	beq.w	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800336a:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003380:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	4a40      	ldr	r2, [pc, #256]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338a:	6593      	str	r3, [r2, #88]	; 0x58
 800338c:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003398:	2301      	movs	r3, #1
 800339a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800339c:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a3a      	ldr	r2, [pc, #232]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033a8:	f7fe fd80 	bl	8001eac <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ae:	e009      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b0:	f7fe fd7c 	bl	8001eac <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d902      	bls.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	74fb      	strb	r3, [r7, #19]
        break;
 80033c2:	e005      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033c4:	4b31      	ldr	r3, [pc, #196]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ef      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d15c      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033d6:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01f      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d019      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003400:	4b21      	ldr	r3, [pc, #132]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a20      	ldr	r2, [pc, #128]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d016      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fe fd3b 	bl	8001eac <HAL_GetTick>
 8003436:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003438:	e00b      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fe fd37 	bl	8001eac <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	; 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d902      	bls.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	74fb      	strb	r3, [r7, #19]
            break;
 8003450:	e006      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ec      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10c      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003476:	4904      	ldr	r1, [pc, #16]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800347e:	e009      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
 8003484:	e006      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
 800348c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003494:	7c7b      	ldrb	r3, [r7, #17]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d105      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349a:	4b9e      	ldr	r3, [pc, #632]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349e:	4a9d      	ldr	r2, [pc, #628]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034b2:	4b98      	ldr	r3, [pc, #608]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f023 0203 	bic.w	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	4994      	ldr	r1, [pc, #592]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034d4:	4b8f      	ldr	r3, [pc, #572]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f023 020c 	bic.w	r2, r3, #12
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	498c      	ldr	r1, [pc, #560]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034f6:	4b87      	ldr	r3, [pc, #540]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	4983      	ldr	r1, [pc, #524]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003518:	4b7e      	ldr	r3, [pc, #504]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	497b      	ldr	r1, [pc, #492]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003548:	4972      	ldr	r1, [pc, #456]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800355c:	4b6d      	ldr	r3, [pc, #436]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	496a      	ldr	r1, [pc, #424]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800357e:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	4961      	ldr	r1, [pc, #388]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035a0:	4b5c      	ldr	r3, [pc, #368]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ae:	4959      	ldr	r1, [pc, #356]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c2:	4b54      	ldr	r3, [pc, #336]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	4950      	ldr	r1, [pc, #320]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035e4:	4b4b      	ldr	r3, [pc, #300]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	4948      	ldr	r1, [pc, #288]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003606:	4b43      	ldr	r3, [pc, #268]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	493f      	ldr	r1, [pc, #252]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d028      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003628:	4b3a      	ldr	r3, [pc, #232]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003636:	4937      	ldr	r1, [pc, #220]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003646:	d106      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003648:	4b32      	ldr	r3, [pc, #200]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a31      	ldr	r2, [pc, #196]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003652:	60d3      	str	r3, [r2, #12]
 8003654:	e011      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800365e:	d10c      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f8d8 	bl	800381c <RCCEx_PLLSAI1_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d028      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003686:	4b23      	ldr	r3, [pc, #140]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	491f      	ldr	r1, [pc, #124]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a4:	d106      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b0:	60d3      	str	r3, [r2, #12]
 80036b2:	e011      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f8a9 	bl	800381c <RCCEx_PLLSAI1_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ce:	7cfb      	ldrb	r3, [r7, #19]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d02b      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f2:	4908      	ldr	r1, [pc, #32]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003702:	d109      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a02      	ldr	r2, [pc, #8]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800370e:	60d3      	str	r3, [r2, #12]
 8003710:	e014      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003720:	d10c      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	2101      	movs	r1, #1
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f877 	bl	800381c <RCCEx_PLLSAI1_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d02f      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003748:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003756:	4928      	ldr	r1, [pc, #160]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003766:	d10d      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	2102      	movs	r1, #2
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f854 	bl	800381c <RCCEx_PLLSAI1_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d014      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	74bb      	strb	r3, [r7, #18]
 8003782:	e011      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800378c:	d10c      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3320      	adds	r3, #32
 8003792:	2102      	movs	r1, #2
 8003794:	4618      	mov	r0, r3
 8003796:	f000 f935 	bl	8003a04 <RCCEx_PLLSAI2_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800379e:	7cfb      	ldrb	r3, [r7, #19]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c2:	490d      	ldr	r1, [pc, #52]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e6:	4904      	ldr	r1, [pc, #16]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000

080037fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	6013      	str	r3, [r2, #0]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000

0800381c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800382a:	4b75      	ldr	r3, [pc, #468]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d018      	beq.n	8003868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003836:	4b72      	ldr	r3, [pc, #456]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0203 	and.w	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d10d      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
       ||
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800384e:	4b6c      	ldr	r3, [pc, #432]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
       ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d047      	beq.n	80038f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
 8003866:	e044      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d018      	beq.n	80038a2 <RCCEx_PLLSAI1_Config+0x86>
 8003870:	2b03      	cmp	r3, #3
 8003872:	d825      	bhi.n	80038c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003874:	2b01      	cmp	r3, #1
 8003876:	d002      	beq.n	800387e <RCCEx_PLLSAI1_Config+0x62>
 8003878:	2b02      	cmp	r3, #2
 800387a:	d009      	beq.n	8003890 <RCCEx_PLLSAI1_Config+0x74>
 800387c:	e020      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800387e:	4b60      	ldr	r3, [pc, #384]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d11d      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800388e:	e01a      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003890:	4b5b      	ldr	r3, [pc, #364]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d116      	bne.n	80038ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a0:	e013      	b.n	80038ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038a2:	4b57      	ldr	r3, [pc, #348]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ae:	4b54      	ldr	r3, [pc, #336]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038be:	e006      	b.n	80038ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      break;
 80038c4:	e004      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038c6:	bf00      	nop
 80038c8:	e002      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10d      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038d6:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	430b      	orrs	r3, r1
 80038ec:	4944      	ldr	r1, [pc, #272]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d17d      	bne.n	80039f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038f8:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a40      	ldr	r2, [pc, #256]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fe fad2 	bl	8001eac <HAL_GetTick>
 8003908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800390a:	e009      	b.n	8003920 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800390c:	f7fe face 	bl	8001eac <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d902      	bls.n	8003920 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	73fb      	strb	r3, [r7, #15]
        break;
 800391e:	e005      	b.n	800392c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003920:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ef      	bne.n	800390c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d160      	bne.n	80039f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d111      	bne.n	800395c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6892      	ldr	r2, [r2, #8]
 8003948:	0211      	lsls	r1, r2, #8
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68d2      	ldr	r2, [r2, #12]
 800394e:	0912      	lsrs	r2, r2, #4
 8003950:	0452      	lsls	r2, r2, #17
 8003952:	430a      	orrs	r2, r1
 8003954:	492a      	ldr	r1, [pc, #168]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	610b      	str	r3, [r1, #16]
 800395a:	e027      	b.n	80039ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d112      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003962:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800396a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6892      	ldr	r2, [r2, #8]
 8003972:	0211      	lsls	r1, r2, #8
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6912      	ldr	r2, [r2, #16]
 8003978:	0852      	lsrs	r2, r2, #1
 800397a:	3a01      	subs	r2, #1
 800397c:	0552      	lsls	r2, r2, #21
 800397e:	430a      	orrs	r2, r1
 8003980:	491f      	ldr	r1, [pc, #124]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	610b      	str	r3, [r1, #16]
 8003986:	e011      	b.n	80039ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003988:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003990:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6892      	ldr	r2, [r2, #8]
 8003998:	0211      	lsls	r1, r2, #8
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6952      	ldr	r2, [r2, #20]
 800399e:	0852      	lsrs	r2, r2, #1
 80039a0:	3a01      	subs	r2, #1
 80039a2:	0652      	lsls	r2, r2, #25
 80039a4:	430a      	orrs	r2, r1
 80039a6:	4916      	ldr	r1, [pc, #88]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a13      	ldr	r2, [pc, #76]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7fe fa78 	bl	8001eac <HAL_GetTick>
 80039bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039be:	e009      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039c0:	f7fe fa74 	bl	8001eac <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d902      	bls.n	80039d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	73fb      	strb	r3, [r7, #15]
          break;
 80039d2:	e005      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ef      	beq.n	80039c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	4904      	ldr	r1, [pc, #16]	; (8003a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000

08003a04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a12:	4b6a      	ldr	r3, [pc, #424]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d018      	beq.n	8003a50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a1e:	4b67      	ldr	r3, [pc, #412]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0203 	and.w	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d10d      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
       ||
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a36:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
       ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d047      	beq.n	8003ada <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
 8003a4e:	e044      	b.n	8003ada <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d018      	beq.n	8003a8a <RCCEx_PLLSAI2_Config+0x86>
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d825      	bhi.n	8003aa8 <RCCEx_PLLSAI2_Config+0xa4>
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d002      	beq.n	8003a66 <RCCEx_PLLSAI2_Config+0x62>
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d009      	beq.n	8003a78 <RCCEx_PLLSAI2_Config+0x74>
 8003a64:	e020      	b.n	8003aa8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a66:	4b55      	ldr	r3, [pc, #340]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d11d      	bne.n	8003aae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a76:	e01a      	b.n	8003aae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a78:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d116      	bne.n	8003ab2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a88:	e013      	b.n	8003ab2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a8a:	4b4c      	ldr	r3, [pc, #304]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a96:	4b49      	ldr	r3, [pc, #292]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aa6:	e006      	b.n	8003ab6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003aac:	e004      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10d      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003abe:	4b3f      	ldr	r3, [pc, #252]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	4939      	ldr	r1, [pc, #228]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d167      	bne.n	8003bb0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ae0:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a35      	ldr	r2, [pc, #212]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aec:	f7fe f9de 	bl	8001eac <HAL_GetTick>
 8003af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003af2:	e009      	b.n	8003b08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003af4:	f7fe f9da 	bl	8001eac <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d902      	bls.n	8003b08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	73fb      	strb	r3, [r7, #15]
        break;
 8003b06:	e005      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b08:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1ef      	bne.n	8003af4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d14a      	bne.n	8003bb0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d111      	bne.n	8003b44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b20:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6892      	ldr	r2, [r2, #8]
 8003b30:	0211      	lsls	r1, r2, #8
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68d2      	ldr	r2, [r2, #12]
 8003b36:	0912      	lsrs	r2, r2, #4
 8003b38:	0452      	lsls	r2, r2, #17
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	491f      	ldr	r1, [pc, #124]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	614b      	str	r3, [r1, #20]
 8003b42:	e011      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b44:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6892      	ldr	r2, [r2, #8]
 8003b54:	0211      	lsls	r1, r2, #8
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6912      	ldr	r2, [r2, #16]
 8003b5a:	0852      	lsrs	r2, r2, #1
 8003b5c:	3a01      	subs	r2, #1
 8003b5e:	0652      	lsls	r2, r2, #25
 8003b60:	430a      	orrs	r2, r1
 8003b62:	4916      	ldr	r1, [pc, #88]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b68:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b74:	f7fe f99a 	bl	8001eac <HAL_GetTick>
 8003b78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b7a:	e009      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b7c:	f7fe f996 	bl	8001eac <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b8e:	e005      	b.n	8003b9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ef      	beq.n	8003b7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4904      	ldr	r1, [pc, #16]	; (8003bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e095      	b.n	8003cfe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be2:	d009      	beq.n	8003bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
 8003bea:	e005      	b.n	8003bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd ff84 	bl	8001b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c38:	d902      	bls.n	8003c40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e002      	b.n	8003c46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c4e:	d007      	beq.n	8003c60 <HAL_SPI_Init+0xa0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c58:	d002      	beq.n	8003c60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	ea42 0103 	orr.w	r1, r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	0c1b      	lsrs	r3, r3, #16
 8003cbc:	f003 0204 	and.w	r2, r3, #4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cdc:	ea42 0103 	orr.w	r1, r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b088      	sub	sp, #32
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_SPI_Transmit+0x22>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e158      	b.n	8003fda <HAL_SPI_Transmit+0x2d4>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d30:	f7fe f8bc 	bl	8001eac <HAL_GetTick>
 8003d34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
 8003d48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d4a:	e13d      	b.n	8003fc8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_SPI_Transmit+0x52>
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d5c:	e134      	b.n	8003fc8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2203      	movs	r2, #3
 8003d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da8:	d10f      	bne.n	8003dca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d007      	beq.n	8003de8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003df0:	d94b      	bls.n	8003e8a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_SPI_Transmit+0xfa>
 8003dfa:	8afb      	ldrh	r3, [r7, #22]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d13e      	bne.n	8003e7e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	881a      	ldrh	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e24:	e02b      	b.n	8003e7e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d112      	bne.n	8003e5a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e58:	e011      	b.n	8003e7e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5a:	f7fe f827 	bl	8001eac <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d803      	bhi.n	8003e72 <HAL_SPI_Transmit+0x16c>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d102      	bne.n	8003e78 <HAL_SPI_Transmit+0x172>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e7c:	e0a4      	b.n	8003fc8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ce      	bne.n	8003e26 <HAL_SPI_Transmit+0x120>
 8003e88:	e07c      	b.n	8003f84 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_Transmit+0x192>
 8003e92:	8afb      	ldrh	r3, [r7, #22]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d170      	bne.n	8003f7a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d912      	bls.n	8003ec8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	881a      	ldrh	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	1c9a      	adds	r2, r3, #2
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b02      	subs	r3, #2
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ec6:	e058      	b.n	8003f7a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	7812      	ldrb	r2, [r2, #0]
 8003ed4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003eee:	e044      	b.n	8003f7a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d12b      	bne.n	8003f56 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d912      	bls.n	8003f2e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	881a      	ldrh	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	1c9a      	adds	r2, r3, #2
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b02      	subs	r3, #2
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f2c:	e025      	b.n	8003f7a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	7812      	ldrb	r2, [r2, #0]
 8003f3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f54:	e011      	b.n	8003f7a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f56:	f7fd ffa9 	bl	8001eac <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d803      	bhi.n	8003f6e <HAL_SPI_Transmit+0x268>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d102      	bne.n	8003f74 <HAL_SPI_Transmit+0x26e>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f78:	e026      	b.n	8003fc8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1b5      	bne.n	8003ef0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	6839      	ldr	r1, [r7, #0]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fa65 	bl	8004458 <SPI_EndRxTxTransaction>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e000      	b.n	8003fc8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10f      	bne.n	8004028 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
    return;
 8004026:	e0d7      	b.n	80041d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_SPI_IRQHandler+0x66>
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	09db      	lsrs	r3, r3, #7
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
    return;
 8004048:	e0c6      	b.n	80041d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10c      	bne.n	8004070 <HAL_SPI_IRQHandler+0x8c>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80b4 	beq.w	80041d8 <HAL_SPI_IRQHandler+0x1f4>
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 80ad 	beq.w	80041d8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	099b      	lsrs	r3, r3, #6
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d023      	beq.n	80040d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b03      	cmp	r3, #3
 8004094:	d011      	beq.n	80040ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409a:	f043 0204 	orr.w	r2, r3, #4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	e00b      	b.n	80040d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	693b      	ldr	r3, [r7, #16]
        return;
 80040d0:	e082      	b.n	80041d8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d014      	beq.n	8004108 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e2:	f043 0201 	orr.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00c      	beq.n	800412e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004118:	f043 0208 	orr.w	r2, r3, #8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004120:	2300      	movs	r3, #0
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04f      	beq.n	80041d6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004144:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <HAL_SPI_IRQHandler+0x17e>
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d034      	beq.n	80041cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0203 	bic.w	r2, r2, #3
 8004170:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	2b00      	cmp	r3, #0
 8004178:	d011      	beq.n	800419e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_SPI_IRQHandler+0x1fc>)
 8004180:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd ffd1 	bl	800212e <HAL_DMA_Abort_IT>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	4a0d      	ldr	r2, [pc, #52]	; (80041e0 <HAL_SPI_IRQHandler+0x1fc>)
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd ffbb 	bl	800212e <HAL_DMA_Abort_IT>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80041ca:	e003      	b.n	80041d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f809 	bl	80041e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80041d2:	e000      	b.n	80041d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80041d4:	bf00      	nop
    return;
 80041d6:	bf00      	nop
  }
}
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	080041f9 	.word	0x080041f9

080041e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff ffe5 	bl	80041e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004234:	f7fd fe3a 	bl	8001eac <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	4413      	add	r3, r2
 8004242:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004244:	f7fd fe32 	bl	8001eac <HAL_GetTick>
 8004248:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	015b      	lsls	r3, r3, #5
 8004250:	0d1b      	lsrs	r3, r3, #20
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800425a:	e054      	b.n	8004306 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d050      	beq.n	8004306 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004264:	f7fd fe22 	bl	8001eac <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	429a      	cmp	r2, r3
 8004272:	d902      	bls.n	800427a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d13d      	bne.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004288:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004292:	d111      	bne.n	80042b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429c:	d004      	beq.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a6:	d107      	bne.n	80042b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c0:	d10f      	bne.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e017      	b.n	8004326 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	3b01      	subs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4013      	ands	r3, r2
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	429a      	cmp	r2, r3
 8004314:	bf0c      	ite	eq
 8004316:	2301      	moveq	r3, #1
 8004318:	2300      	movne	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	429a      	cmp	r2, r3
 8004322:	d19b      	bne.n	800425c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000024 	.word	0x20000024

08004334 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004342:	f7fd fdb3 	bl	8001eac <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	4413      	add	r3, r2
 8004350:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004352:	f7fd fdab 	bl	8001eac <HAL_GetTick>
 8004356:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004358:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	00da      	lsls	r2, r3, #3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	0d1b      	lsrs	r3, r3, #20
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004370:	e062      	b.n	8004438 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004378:	d109      	bne.n	800438e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d106      	bne.n	800438e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800438c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d050      	beq.n	8004438 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004396:	f7fd fd89 	bl	8001eac <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d902      	bls.n	80043ac <SPI_WaitFifoStateUntilTimeout+0x78>
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d13d      	bne.n	8004428 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c4:	d111      	bne.n	80043ea <SPI_WaitFifoStateUntilTimeout+0xb6>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	d004      	beq.n	80043da <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d107      	bne.n	80043ea <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f2:	d10f      	bne.n	8004414 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004412:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e010      	b.n	800444a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	3b01      	subs	r3, #1
 8004436:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	d194      	bne.n	8004372 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000024 	.word	0x20000024

08004458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2200      	movs	r2, #0
 800446c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff ff5f 	bl	8004334 <SPI_WaitFifoStateUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e027      	b.n	80044dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2200      	movs	r2, #0
 8004494:	2180      	movs	r1, #128	; 0x80
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff fec4 	bl	8004224 <SPI_WaitFlagStateUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e014      	b.n	80044dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7ff ff38 	bl	8004334 <SPI_WaitFifoStateUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e000      	b.n	80044dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e040      	b.n	8004578 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fd fb74 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	; 0x24
 8004510:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f82c 	bl	8004580 <UART_SetConfig>
 8004528:	4603      	mov	r3, r0
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e022      	b.n	8004578 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 faaa 	bl	8004a94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800454e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800455e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fb31 	bl	8004bd8 <UART_CheckIdleState>
 8004576:	4603      	mov	r3, r0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004580:	b5b0      	push	{r4, r5, r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4bad      	ldr	r3, [pc, #692]	; (8004860 <UART_SetConfig+0x2e0>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	69f9      	ldr	r1, [r7, #28]
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4aa2      	ldr	r2, [pc, #648]	; (8004864 <UART_SetConfig+0x2e4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a99      	ldr	r2, [pc, #612]	; (8004868 <UART_SetConfig+0x2e8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d121      	bne.n	800464a <UART_SetConfig+0xca>
 8004606:	4b99      	ldr	r3, [pc, #612]	; (800486c <UART_SetConfig+0x2ec>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	2b03      	cmp	r3, #3
 8004612:	d817      	bhi.n	8004644 <UART_SetConfig+0xc4>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <UART_SetConfig+0x9c>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	0800462d 	.word	0x0800462d
 8004620:	08004639 	.word	0x08004639
 8004624:	08004633 	.word	0x08004633
 8004628:	0800463f 	.word	0x0800463f
 800462c:	2301      	movs	r3, #1
 800462e:	76fb      	strb	r3, [r7, #27]
 8004630:	e0e7      	b.n	8004802 <UART_SetConfig+0x282>
 8004632:	2302      	movs	r3, #2
 8004634:	76fb      	strb	r3, [r7, #27]
 8004636:	e0e4      	b.n	8004802 <UART_SetConfig+0x282>
 8004638:	2304      	movs	r3, #4
 800463a:	76fb      	strb	r3, [r7, #27]
 800463c:	e0e1      	b.n	8004802 <UART_SetConfig+0x282>
 800463e:	2308      	movs	r3, #8
 8004640:	76fb      	strb	r3, [r7, #27]
 8004642:	e0de      	b.n	8004802 <UART_SetConfig+0x282>
 8004644:	2310      	movs	r3, #16
 8004646:	76fb      	strb	r3, [r7, #27]
 8004648:	e0db      	b.n	8004802 <UART_SetConfig+0x282>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a88      	ldr	r2, [pc, #544]	; (8004870 <UART_SetConfig+0x2f0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d132      	bne.n	80046ba <UART_SetConfig+0x13a>
 8004654:	4b85      	ldr	r3, [pc, #532]	; (800486c <UART_SetConfig+0x2ec>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f003 030c 	and.w	r3, r3, #12
 800465e:	2b0c      	cmp	r3, #12
 8004660:	d828      	bhi.n	80046b4 <UART_SetConfig+0x134>
 8004662:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <UART_SetConfig+0xe8>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	0800469d 	.word	0x0800469d
 800466c:	080046b5 	.word	0x080046b5
 8004670:	080046b5 	.word	0x080046b5
 8004674:	080046b5 	.word	0x080046b5
 8004678:	080046a9 	.word	0x080046a9
 800467c:	080046b5 	.word	0x080046b5
 8004680:	080046b5 	.word	0x080046b5
 8004684:	080046b5 	.word	0x080046b5
 8004688:	080046a3 	.word	0x080046a3
 800468c:	080046b5 	.word	0x080046b5
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046b5 	.word	0x080046b5
 8004698:	080046af 	.word	0x080046af
 800469c:	2300      	movs	r3, #0
 800469e:	76fb      	strb	r3, [r7, #27]
 80046a0:	e0af      	b.n	8004802 <UART_SetConfig+0x282>
 80046a2:	2302      	movs	r3, #2
 80046a4:	76fb      	strb	r3, [r7, #27]
 80046a6:	e0ac      	b.n	8004802 <UART_SetConfig+0x282>
 80046a8:	2304      	movs	r3, #4
 80046aa:	76fb      	strb	r3, [r7, #27]
 80046ac:	e0a9      	b.n	8004802 <UART_SetConfig+0x282>
 80046ae:	2308      	movs	r3, #8
 80046b0:	76fb      	strb	r3, [r7, #27]
 80046b2:	e0a6      	b.n	8004802 <UART_SetConfig+0x282>
 80046b4:	2310      	movs	r3, #16
 80046b6:	76fb      	strb	r3, [r7, #27]
 80046b8:	e0a3      	b.n	8004802 <UART_SetConfig+0x282>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a6d      	ldr	r2, [pc, #436]	; (8004874 <UART_SetConfig+0x2f4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d120      	bne.n	8004706 <UART_SetConfig+0x186>
 80046c4:	4b69      	ldr	r3, [pc, #420]	; (800486c <UART_SetConfig+0x2ec>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046ce:	2b30      	cmp	r3, #48	; 0x30
 80046d0:	d013      	beq.n	80046fa <UART_SetConfig+0x17a>
 80046d2:	2b30      	cmp	r3, #48	; 0x30
 80046d4:	d814      	bhi.n	8004700 <UART_SetConfig+0x180>
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d009      	beq.n	80046ee <UART_SetConfig+0x16e>
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d810      	bhi.n	8004700 <UART_SetConfig+0x180>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <UART_SetConfig+0x168>
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d006      	beq.n	80046f4 <UART_SetConfig+0x174>
 80046e6:	e00b      	b.n	8004700 <UART_SetConfig+0x180>
 80046e8:	2300      	movs	r3, #0
 80046ea:	76fb      	strb	r3, [r7, #27]
 80046ec:	e089      	b.n	8004802 <UART_SetConfig+0x282>
 80046ee:	2302      	movs	r3, #2
 80046f0:	76fb      	strb	r3, [r7, #27]
 80046f2:	e086      	b.n	8004802 <UART_SetConfig+0x282>
 80046f4:	2304      	movs	r3, #4
 80046f6:	76fb      	strb	r3, [r7, #27]
 80046f8:	e083      	b.n	8004802 <UART_SetConfig+0x282>
 80046fa:	2308      	movs	r3, #8
 80046fc:	76fb      	strb	r3, [r7, #27]
 80046fe:	e080      	b.n	8004802 <UART_SetConfig+0x282>
 8004700:	2310      	movs	r3, #16
 8004702:	76fb      	strb	r3, [r7, #27]
 8004704:	e07d      	b.n	8004802 <UART_SetConfig+0x282>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a5b      	ldr	r2, [pc, #364]	; (8004878 <UART_SetConfig+0x2f8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d120      	bne.n	8004752 <UART_SetConfig+0x1d2>
 8004710:	4b56      	ldr	r3, [pc, #344]	; (800486c <UART_SetConfig+0x2ec>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800471a:	2bc0      	cmp	r3, #192	; 0xc0
 800471c:	d013      	beq.n	8004746 <UART_SetConfig+0x1c6>
 800471e:	2bc0      	cmp	r3, #192	; 0xc0
 8004720:	d814      	bhi.n	800474c <UART_SetConfig+0x1cc>
 8004722:	2b80      	cmp	r3, #128	; 0x80
 8004724:	d009      	beq.n	800473a <UART_SetConfig+0x1ba>
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d810      	bhi.n	800474c <UART_SetConfig+0x1cc>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <UART_SetConfig+0x1b4>
 800472e:	2b40      	cmp	r3, #64	; 0x40
 8004730:	d006      	beq.n	8004740 <UART_SetConfig+0x1c0>
 8004732:	e00b      	b.n	800474c <UART_SetConfig+0x1cc>
 8004734:	2300      	movs	r3, #0
 8004736:	76fb      	strb	r3, [r7, #27]
 8004738:	e063      	b.n	8004802 <UART_SetConfig+0x282>
 800473a:	2302      	movs	r3, #2
 800473c:	76fb      	strb	r3, [r7, #27]
 800473e:	e060      	b.n	8004802 <UART_SetConfig+0x282>
 8004740:	2304      	movs	r3, #4
 8004742:	76fb      	strb	r3, [r7, #27]
 8004744:	e05d      	b.n	8004802 <UART_SetConfig+0x282>
 8004746:	2308      	movs	r3, #8
 8004748:	76fb      	strb	r3, [r7, #27]
 800474a:	e05a      	b.n	8004802 <UART_SetConfig+0x282>
 800474c:	2310      	movs	r3, #16
 800474e:	76fb      	strb	r3, [r7, #27]
 8004750:	e057      	b.n	8004802 <UART_SetConfig+0x282>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a49      	ldr	r2, [pc, #292]	; (800487c <UART_SetConfig+0x2fc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d125      	bne.n	80047a8 <UART_SetConfig+0x228>
 800475c:	4b43      	ldr	r3, [pc, #268]	; (800486c <UART_SetConfig+0x2ec>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476a:	d017      	beq.n	800479c <UART_SetConfig+0x21c>
 800476c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004770:	d817      	bhi.n	80047a2 <UART_SetConfig+0x222>
 8004772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004776:	d00b      	beq.n	8004790 <UART_SetConfig+0x210>
 8004778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477c:	d811      	bhi.n	80047a2 <UART_SetConfig+0x222>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <UART_SetConfig+0x20a>
 8004782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004786:	d006      	beq.n	8004796 <UART_SetConfig+0x216>
 8004788:	e00b      	b.n	80047a2 <UART_SetConfig+0x222>
 800478a:	2300      	movs	r3, #0
 800478c:	76fb      	strb	r3, [r7, #27]
 800478e:	e038      	b.n	8004802 <UART_SetConfig+0x282>
 8004790:	2302      	movs	r3, #2
 8004792:	76fb      	strb	r3, [r7, #27]
 8004794:	e035      	b.n	8004802 <UART_SetConfig+0x282>
 8004796:	2304      	movs	r3, #4
 8004798:	76fb      	strb	r3, [r7, #27]
 800479a:	e032      	b.n	8004802 <UART_SetConfig+0x282>
 800479c:	2308      	movs	r3, #8
 800479e:	76fb      	strb	r3, [r7, #27]
 80047a0:	e02f      	b.n	8004802 <UART_SetConfig+0x282>
 80047a2:	2310      	movs	r3, #16
 80047a4:	76fb      	strb	r3, [r7, #27]
 80047a6:	e02c      	b.n	8004802 <UART_SetConfig+0x282>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2d      	ldr	r2, [pc, #180]	; (8004864 <UART_SetConfig+0x2e4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d125      	bne.n	80047fe <UART_SetConfig+0x27e>
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <UART_SetConfig+0x2ec>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c0:	d017      	beq.n	80047f2 <UART_SetConfig+0x272>
 80047c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c6:	d817      	bhi.n	80047f8 <UART_SetConfig+0x278>
 80047c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047cc:	d00b      	beq.n	80047e6 <UART_SetConfig+0x266>
 80047ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d2:	d811      	bhi.n	80047f8 <UART_SetConfig+0x278>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <UART_SetConfig+0x260>
 80047d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047dc:	d006      	beq.n	80047ec <UART_SetConfig+0x26c>
 80047de:	e00b      	b.n	80047f8 <UART_SetConfig+0x278>
 80047e0:	2300      	movs	r3, #0
 80047e2:	76fb      	strb	r3, [r7, #27]
 80047e4:	e00d      	b.n	8004802 <UART_SetConfig+0x282>
 80047e6:	2302      	movs	r3, #2
 80047e8:	76fb      	strb	r3, [r7, #27]
 80047ea:	e00a      	b.n	8004802 <UART_SetConfig+0x282>
 80047ec:	2304      	movs	r3, #4
 80047ee:	76fb      	strb	r3, [r7, #27]
 80047f0:	e007      	b.n	8004802 <UART_SetConfig+0x282>
 80047f2:	2308      	movs	r3, #8
 80047f4:	76fb      	strb	r3, [r7, #27]
 80047f6:	e004      	b.n	8004802 <UART_SetConfig+0x282>
 80047f8:	2310      	movs	r3, #16
 80047fa:	76fb      	strb	r3, [r7, #27]
 80047fc:	e001      	b.n	8004802 <UART_SetConfig+0x282>
 80047fe:	2310      	movs	r3, #16
 8004800:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a17      	ldr	r2, [pc, #92]	; (8004864 <UART_SetConfig+0x2e4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	f040 8087 	bne.w	800491c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800480e:	7efb      	ldrb	r3, [r7, #27]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d837      	bhi.n	8004884 <UART_SetConfig+0x304>
 8004814:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0x29c>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	08004841 	.word	0x08004841
 8004820:	08004885 	.word	0x08004885
 8004824:	08004849 	.word	0x08004849
 8004828:	08004885 	.word	0x08004885
 800482c:	0800484f 	.word	0x0800484f
 8004830:	08004885 	.word	0x08004885
 8004834:	08004885 	.word	0x08004885
 8004838:	08004885 	.word	0x08004885
 800483c:	08004857 	.word	0x08004857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7fe fc66 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8004844:	6178      	str	r0, [r7, #20]
        break;
 8004846:	e022      	b.n	800488e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004848:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <UART_SetConfig+0x300>)
 800484a:	617b      	str	r3, [r7, #20]
        break;
 800484c:	e01f      	b.n	800488e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484e:	f7fe fbc7 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8004852:	6178      	str	r0, [r7, #20]
        break;
 8004854:	e01b      	b.n	800488e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485a:	617b      	str	r3, [r7, #20]
        break;
 800485c:	e017      	b.n	800488e <UART_SetConfig+0x30e>
 800485e:	bf00      	nop
 8004860:	efff69f3 	.word	0xefff69f3
 8004864:	40008000 	.word	0x40008000
 8004868:	40013800 	.word	0x40013800
 800486c:	40021000 	.word	0x40021000
 8004870:	40004400 	.word	0x40004400
 8004874:	40004800 	.word	0x40004800
 8004878:	40004c00 	.word	0x40004c00
 800487c:	40005000 	.word	0x40005000
 8004880:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	76bb      	strb	r3, [r7, #26]
        break;
 800488c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80f1 	beq.w	8004a78 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	4613      	mov	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4413      	add	r3, r2
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d305      	bcc.n	80048b2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d902      	bls.n	80048b8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	76bb      	strb	r3, [r7, #26]
 80048b6:	e0df      	b.n	8004a78 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	020b      	lsls	r3, r1, #8
 80048ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048ce:	0202      	lsls	r2, r0, #8
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	6849      	ldr	r1, [r1, #4]
 80048d4:	0849      	lsrs	r1, r1, #1
 80048d6:	4608      	mov	r0, r1
 80048d8:	f04f 0100 	mov.w	r1, #0
 80048dc:	1814      	adds	r4, r2, r0
 80048de:	eb43 0501 	adc.w	r5, r3, r1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	4620      	mov	r0, r4
 80048ee:	4629      	mov	r1, r5
 80048f0:	f7fb fc6a 	bl	80001c8 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4613      	mov	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004902:	d308      	bcc.n	8004916 <UART_SetConfig+0x396>
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490a:	d204      	bcs.n	8004916 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	60da      	str	r2, [r3, #12]
 8004914:	e0b0      	b.n	8004a78 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	76bb      	strb	r3, [r7, #26]
 800491a:	e0ad      	b.n	8004a78 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004924:	d15c      	bne.n	80049e0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004926:	7efb      	ldrb	r3, [r7, #27]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d828      	bhi.n	800497e <UART_SetConfig+0x3fe>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <UART_SetConfig+0x3b4>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004959 	.word	0x08004959
 8004938:	08004961 	.word	0x08004961
 800493c:	08004969 	.word	0x08004969
 8004940:	0800497f 	.word	0x0800497f
 8004944:	0800496f 	.word	0x0800496f
 8004948:	0800497f 	.word	0x0800497f
 800494c:	0800497f 	.word	0x0800497f
 8004950:	0800497f 	.word	0x0800497f
 8004954:	08004977 	.word	0x08004977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004958:	f7fe fbda 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 800495c:	6178      	str	r0, [r7, #20]
        break;
 800495e:	e013      	b.n	8004988 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004960:	f7fe fbec 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 8004964:	6178      	str	r0, [r7, #20]
        break;
 8004966:	e00f      	b.n	8004988 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004968:	4b49      	ldr	r3, [pc, #292]	; (8004a90 <UART_SetConfig+0x510>)
 800496a:	617b      	str	r3, [r7, #20]
        break;
 800496c:	e00c      	b.n	8004988 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496e:	f7fe fb37 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8004972:	6178      	str	r0, [r7, #20]
        break;
 8004974:	e008      	b.n	8004988 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800497a:	617b      	str	r3, [r7, #20]
        break;
 800497c:	e004      	b.n	8004988 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	76bb      	strb	r3, [r7, #26]
        break;
 8004986:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d074      	beq.n	8004a78 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	005a      	lsls	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	441a      	add	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b0f      	cmp	r3, #15
 80049aa:	d916      	bls.n	80049da <UART_SetConfig+0x45a>
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	d212      	bcs.n	80049da <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f023 030f 	bic.w	r3, r3, #15
 80049bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	89fb      	ldrh	r3, [r7, #14]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	89fa      	ldrh	r2, [r7, #14]
 80049d6:	60da      	str	r2, [r3, #12]
 80049d8:	e04e      	b.n	8004a78 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	76bb      	strb	r3, [r7, #26]
 80049de:	e04b      	b.n	8004a78 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049e0:	7efb      	ldrb	r3, [r7, #27]
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d827      	bhi.n	8004a36 <UART_SetConfig+0x4b6>
 80049e6:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <UART_SetConfig+0x46c>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a11 	.word	0x08004a11
 80049f0:	08004a19 	.word	0x08004a19
 80049f4:	08004a21 	.word	0x08004a21
 80049f8:	08004a37 	.word	0x08004a37
 80049fc:	08004a27 	.word	0x08004a27
 8004a00:	08004a37 	.word	0x08004a37
 8004a04:	08004a37 	.word	0x08004a37
 8004a08:	08004a37 	.word	0x08004a37
 8004a0c:	08004a2f 	.word	0x08004a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a10:	f7fe fb7e 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8004a14:	6178      	str	r0, [r7, #20]
        break;
 8004a16:	e013      	b.n	8004a40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a18:	f7fe fb90 	bl	800313c <HAL_RCC_GetPCLK2Freq>
 8004a1c:	6178      	str	r0, [r7, #20]
        break;
 8004a1e:	e00f      	b.n	8004a40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a20:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <UART_SetConfig+0x510>)
 8004a22:	617b      	str	r3, [r7, #20]
        break;
 8004a24:	e00c      	b.n	8004a40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a26:	f7fe fadb 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8004a2a:	6178      	str	r0, [r7, #20]
        break;
 8004a2c:	e008      	b.n	8004a40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a32:	617b      	str	r3, [r7, #20]
        break;
 8004a34:	e004      	b.n	8004a40 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	76bb      	strb	r3, [r7, #26]
        break;
 8004a3e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d018      	beq.n	8004a78 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	085a      	lsrs	r2, r3, #1
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	441a      	add	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b0f      	cmp	r3, #15
 8004a60:	d908      	bls.n	8004a74 <UART_SetConfig+0x4f4>
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a68:	d204      	bcs.n	8004a74 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	e001      	b.n	8004a78 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a84:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	00f42400 	.word	0x00f42400

08004a94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01a      	beq.n	8004baa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b92:	d10a      	bne.n	8004baa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]
  }
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be8:	f7fd f960 	bl	8001eac <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d10e      	bne.n	8004c1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f82d 	bl	8004c6a <UART_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e023      	b.n	8004c62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d10e      	bne.n	8004c46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f817 	bl	8004c6a <UART_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e00d      	b.n	8004c62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7a:	e05e      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d05a      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	f7fd f912 	bl	8001eac <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d11b      	bne.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ca8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e043      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d02c      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cee:	d124      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cf8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e00f      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d091      	beq.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <__libc_init_array>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	4d0d      	ldr	r5, [pc, #52]	; (8004d9c <__libc_init_array+0x38>)
 8004d68:	4c0d      	ldr	r4, [pc, #52]	; (8004da0 <__libc_init_array+0x3c>)
 8004d6a:	1b64      	subs	r4, r4, r5
 8004d6c:	10a4      	asrs	r4, r4, #2
 8004d6e:	2600      	movs	r6, #0
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	d109      	bne.n	8004d88 <__libc_init_array+0x24>
 8004d74:	4d0b      	ldr	r5, [pc, #44]	; (8004da4 <__libc_init_array+0x40>)
 8004d76:	4c0c      	ldr	r4, [pc, #48]	; (8004da8 <__libc_init_array+0x44>)
 8004d78:	f000 f820 	bl	8004dbc <_init>
 8004d7c:	1b64      	subs	r4, r4, r5
 8004d7e:	10a4      	asrs	r4, r4, #2
 8004d80:	2600      	movs	r6, #0
 8004d82:	42a6      	cmp	r6, r4
 8004d84:	d105      	bne.n	8004d92 <__libc_init_array+0x2e>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8c:	4798      	blx	r3
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7ee      	b.n	8004d70 <__libc_init_array+0xc>
 8004d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d96:	4798      	blx	r3
 8004d98:	3601      	adds	r6, #1
 8004d9a:	e7f2      	b.n	8004d82 <__libc_init_array+0x1e>
 8004d9c:	0800f74c 	.word	0x0800f74c
 8004da0:	0800f74c 	.word	0x0800f74c
 8004da4:	0800f74c 	.word	0x0800f74c
 8004da8:	0800f750 	.word	0x0800f750

08004dac <memset>:
 8004dac:	4402      	add	r2, r0
 8004dae:	4603      	mov	r3, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d100      	bne.n	8004db6 <memset+0xa>
 8004db4:	4770      	bx	lr
 8004db6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dba:	e7f9      	b.n	8004db0 <memset+0x4>

08004dbc <_init>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr

08004dc8 <_fini>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	bf00      	nop
 8004dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dce:	bc08      	pop	{r3}
 8004dd0:	469e      	mov	lr, r3
 8004dd2:	4770      	bx	lr
